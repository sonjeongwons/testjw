package com.scf.manager.mvc.service;

import com.scf.manager.common.enums.TypeEnums;
import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.common.exception.SourceFileException;
import com.scf.manager.common.util.AppUtil;
import com.scf.manager.mvc.domain.Function;
import com.scf.manager.mvc.domain.SourceFile;
import com.scf.manager.mvc.dto.SourceFileDTO;
import com.scf.manager.mvc.repository.FunctionRepository;
import com.scf.manager.mvc.repository.SourceFileRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.transaction.annotation.Transactional;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.EnumSet;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class SourceFileService {
    @Value("${monitoring.http.timeout}")
    private int timeOutValue;

    private final KnativeService knativeService;
    private final FunctionRepository functionRepository;
    private final SourceFileRepository sourceFileRepository;

    private static final String FILE_PATH = "/mb_scf/serverless/";
    private static final String SAMPLE_FILE_PATH = "/mb_scf/serverless/sample.jar";
    private static final String DOWNLOAD_FILENAME = "download.jar";

    // Enum을 활용하여 하드코딩된 파일 유형 문자열 제거
    private enum FileType {
        SAMPLE, CUSTOM;

        public static boolean isValid(String value) {
            return EnumSet.allOf(FileType.class).stream().anyMatch(e -> e.name().equalsIgnoreCase(value));
        }
    }

    @Transactional
    public SourceFileDTO.Response getSourceFile(String functionKey) {
        Function function = functionRepository.findByFunctionKeyAndDelYn(functionKey, "N")
                .orElseThrow(() -> new ResourceNotFoundException("유효한 펑션이 존재하지 않습니다."));
        
        SourceFile sourceFile = sourceFileRepository.findByFunction(function)
                .orElseThrow(() -> new ResourceNotFoundException("유효한 소스파일 데이터가 존재하지 않습니다."));

        return sourceFile.toDto();
    }

    @Transactional
    public SourceFileDTO.Response saveSourceFile(SourceFileDTO.Register reqDto, String functionKey) throws IOException {
        Function function = functionRepository.findByFunctionKey(functionKey)
                .orElseThrow(() -> new ResourceNotFoundException("펑션이 존재하지 않습니다."));

        SourceFile sourceFile = sourceFileRepository.findByFunction(function).orElse(null);

        validateFileType(reqDto.getSourceFileType());

        String localFilePath = FILE_PATH + function.getName();
        log.info("파일 저장 경로: {}", localFilePath);
        AppUtil.createDirectory(localFilePath);

        if (FileType.SAMPLE.name().equalsIgnoreCase(reqDto.getSourceFileType())) {
            prepareSampleFile(reqDto, localFilePath);
        } else {
            validateCustomFileRequest(reqDto);
            downloadFile(reqDto.getDownloadUrl(), localFilePath + "/" + DOWNLOAD_FILENAME);
        }

        saveOrUpdateSourceFile(reqDto, function, sourceFile);

        if (function.isReady()) {
            function.setFunctionStatus(TypeEnums.FunctionStatus.DEPLOYING);
            functionRepository.save(function);
            knativeService.callIstioAndKnative(function);
        }

        return sourceFile.toDto();
    }

    private void validateFileType(String fileType) {
        if (!FileType.isValid(fileType)) {
            throw new SourceFileException("지원하지 않는 파일 유형입니다.");
        }
    }

    private void prepareSampleFile(SourceFileDTO.Register reqDto, String localFilePath) throws IOException {
        reqDto.setBucketId("S3_OBS_BUCKET-sample");
        reqDto.setBucketName("sample-bucket");
        reqDto.setObjectKey("sample.jar");
        reqDto.setClassName("com.example.Handler");
        reqDto.setMethodName("handleRequest");

        Path sampleFile = Paths.get(SAMPLE_FILE_PATH);
        Path functionFile = Paths.get(localFilePath, DOWNLOAD_FILENAME);

        Files.copy(sampleFile, functionFile, StandardCopyOption.REPLACE_EXISTING);
    }

    private void validateCustomFileRequest(SourceFileDTO.Register reqDto) {
        if (StringUtils.isAnyEmpty(reqDto.getBucketId(), reqDto.getBucketName(), reqDto.getObjectKey(), reqDto.getDownloadUrl(), reqDto.getClassName(), reqDto.getMethodName())) {
            throw new SourceFileException("필수 입력값이 누락되었습니다.");
        }
    }

    private void saveOrUpdateSourceFile(SourceFileDTO.Register reqDto, Function function, SourceFile sourceFile) {
        if (sourceFile != null) {
            sourceFile.modify(reqDto);
            sourceFileRepository.save(sourceFile);
        } else {
            reqDto.setFunctionSeq(function.getFunctionSeq());
            sourceFileRepository.save(SourceFile.register(reqDto));
        }
    }

    private void downloadFile(String fileUrl, String savePath) throws IOException {
        HttpURLConnection connection = setupHttpConnection(fileUrl);
        int responseCode = connection.getResponseCode();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            downloadContent(connection, savePath);
        } else {
            log.error("파일 다운로드 실패. 서버 응답 코드: {}", responseCode);
            throw new SourceFileException("파일 다운로드에 실패하였습니다.");
        }
        connection.disconnect();
    }

    private HttpURLConnection setupHttpConnection(String fileUrl) throws IOException {
        try {
            URL url = new URL(fileUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(timeOutValue);
            connection.setReadTimeout(timeOutValue);
            return connection;
        } catch (MalformedURLException e) {
            log.error("유효하지 않은 파일 URL: {}", fileUrl);
            throw new SourceFileException("유효하지 않은 파일 URL입니다.", e);
        }
    }

    private void downloadContent(HttpURLConnection connection, String savePath) throws IOException {
        try (BufferedInputStream inputStream = new BufferedInputStream(connection.getInputStream());
             FileOutputStream outputStream = new FileOutputStream(savePath)) {

            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
            log.info("파일 다운로드 완료: {}", savePath);
        }
    }
}
