package com.example.demo.controller;

import com.example.demo.dto.FileDto;
import com.example.demo.service.V3ScannerService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


import com.example.demo.dto.FileDto;
import com.example.demo.service.V3ScannerService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.util.Map;
import java.util.Properties;

@RestController
@RequestMapping("/api/v1/scanner")
public class V3ScannerController {

    private static final Logger logger = LoggerFactory.getLogger(V3ScannerController.class);

    @Autowired
    private V3ScannerService v3ScannerService;

    @GetMapping("/simple")
    public ResponseEntity<Map<String, Object>> simpleScan(@RequestHeader("X-CVC-API-KEY") String apiKey, @RequestParam String fileName) {
        logger.info("Simple scan requested. Filename: {}, API Key: {}", fileName, apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
        }
        return ResponseEntity.ok(v3ScannerService.simpleScan(fileName));
    }

    @GetMapping("/remote")
    public ResponseEntity<Map<String, Object>> remoteScan(@RequestHeader("X-CVC-API-KEY") String apiKey, @RequestParam String fileName) {
        logger.info("Remote scan requested. Filename: {}, API Key: {}", fileName, apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
        }
        return ResponseEntity.ok(v3ScannerService.remoteScan(fileName));
    }

    @GetMapping("/detail")
    public ResponseEntity<Map<String, Object>> detailScan(@RequestHeader("X-CVC-API-KEY") String apiKey, @RequestParam String fileName) {
        logger.info("Detail scan requested. Filename: {}, API Key: {}", fileName, apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
        }
        return ResponseEntity.ok(v3ScannerService.detailScan(fileName));
    }


    @PostMapping("/scan")
    public ResponseEntity<FileDto.Response> scanFile(
            @RequestHeader("X-CVC-API-KEY") String apiKey,
            @Valid @RequestBody FileDto.Request fileDtoRequest) {
        logger.info("File scan requested. Filename: {}, API Key: {}", fileDtoRequest.getFileName(), apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
                    FileDto.Response.builder()
                            .fileName(fileDtoRequest.getFileName())
                            .returnCode(HttpStatus.UNAUTHORIZED.value())
                            .message("Unauthorized: Invalid API Key")
                            .build()
            );
        }
        FileDto.Response response = v3ScannerService.scanFile(fileDtoRequest);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @GetMapping("/status")
    public ResponseEntity<String> getStatus() {
        logger.info("API status requested.");
        return ResponseEntity.ok("API is running.");
    }
}









package com.example.demo.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.*;
import jakarta.validation.Valid;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class FileDto {

    @NotBlank(message = "파일명을 입력해주세요")
    private String fileName;

    @NotBlank(message = "파일 데이터를 입력해주세요")
    private String fileData;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class Request {

        @NotBlank(message = "파일명을 입력해주세요")
        private String fileName;

        @NotBlank(message = "파일 데이터를 입력해주세요")
        private String fileData;
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class Response {

        private String fileName;

        private int returnCode;

        private String message;
    }
}









package com.example.demo.service;

import com.example.demo.dto.FileDto;
import com.ahnlab.v3engine.V3Const;
import com.ahnlab.v3engine.V3Scanner;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;


@Service
public class V3ScannerService {

    @Value("${api.key}")
    private String validApiKey;
    //private static final String VALID_API_KEY = "CVCKEY";

    public boolean validateApiKey(String apiKey) {
        return validApiKey.equals(apiKey);
    }

    public Map<String, Object> simpleScan(String filename) {
        Map<String, Object> result = new HashMap<>();
        int ret = V3Scanner.scanFile(filename);
        result.put("filename", filename);
        result.put("returnCode", ret);
        result.put("message", getMessageForReturnCode(ret));
        return result;
    }

    public Map<String, Object> remoteScan(String filename) {
        Map<String, Object> result = new HashMap<>();
        Properties prop = new Properties();
        int ret = V3Scanner.remoteScanFile(filename, prop);

        result.put("filename", filename);
        result.put("returnCode", ret);
        result.put("message", getMessageForReturnCode(ret));
        result.put("details", prop);
        return result;
    }

    public Map<String, Object> detailScan(String filename) {
        Map<String, Object> result = new HashMap<>();
        Properties prop = new Properties();
        int ret = V3Scanner.scanFile(filename, prop);

        result.put("filename", filename);
        result.put("returnCode", ret);
        result.put("message", getMessageForReturnCode(ret));
        result.put("details", prop);
        return result;
    }

    public FileDto.Response scanFile(FileDto.Request fileDtoRequest) {
        try {
            // Decode Base64 file data and save temporarily
            byte[] fileData = Base64.getDecoder().decode(fileDtoRequest.getFileData());
            File tempFile = File.createTempFile("scan_", fileDtoRequest.getFileName());
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                fos.write(fileData);
            }

            // Perform scan
            int ret = V3Scanner.scanFile(tempFile.getAbsolutePath());
            String message = getMessageForReturnCode(ret);

            // Delete temporary file
            tempFile.delete();

            return FileDto.Response.builder()
                    .fileName(fileDtoRequest.getFileName())
                    .returnCode(ret)
                    .message(message)
                    .build();
        } catch (Exception e) {
            return FileDto.Response.builder()
                    .fileName(fileDtoRequest.getFileName())
                    .returnCode(-1)
                    .message("File processing failed: " + e.getMessage())
                    .build();
        }
    }

    private String getMessageForReturnCode(int ret) {
        switch (ret) {
            case V3Const.RET_AUTH_FAILED:
                return "인증 실패";
            case V3Const.RET_CLIENT_TIMEOUT:
                return "검사 요청 클라이언트 TIMEOUT";
            case V3Const.RET_NETWORK_ERROR:
                return "네트워크 장애";
            case V3Const.RET_CLIENT_FAIL:
                return "검사 요청 클라이언트 오류";
            case V3Const.RET_CANNOT_SCAN:
                return "검사 실패";
            case V3Const.RET_NO_MALWARE:
                return "악성코드 없음";
            case V3Const.RET_MALWARE_FOUND:
                return "악성코드 발견";
            case V3Const.RET_CLEAN_MODIFY_SUCCESS:
                return "수정 치료 성공";
            case V3Const.RET_CLEAN_MODIFY_FAIL:
                return "수정 치료 실패(삭제 권고)";
            case V3Const.RET_CLEAN_DEL_SUCCESS:
                return "삭제 치료 성공";
            case V3Const.RET_CLEAN_DEL_FAIL:
                return "삭제 치료 실패(삭제 권고)";
            case V3Const.RET_CLEAN_DEL_FAIL_BYCONF:
                return "삭제 치료 실패(검사 서버 옵션)";
            default:
                return "알 수 없음";
        }
    }
}
