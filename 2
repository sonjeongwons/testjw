📌 [PR 개요]

🔹 리팩토링: FunctionLogService 코드 개선 및 클린 코드 적용

이번 PR에서는 FunctionLogService 클래스의 코드 품질을 개선하고, 유지보수성을 향상시키기 위해 리팩토링 및 클린 코드 적용을 진행했습니다.
주요 개선 사항으로는 중복 코드 제거, 예외 처리 강화, JSON 데이터 처리 최적화, 가독성 향상, 단일 책임 원칙(SRP) 적용이 포함됩니다.


---

📌 [개발 내용]

✅ 주요 개선 사항

1. 중복 코드 제거 및 메소드 분리

JSON 데이터 추출 로직을 extractLogData() 및 extractPodList() 메소드로 분리하여 단일 책임 원칙(SRP)을 적용.

HTTP 연결 설정을 establishLetheConnection() 메소드로 분리하여 재사용성을 증가.



2. 가독성 향상을 위한 리팩토링

StringBuilder 대신 String.format()을 활용하여 가독성을 개선.

retrieveRawJSON() 메소드에서 Collectors.joining()을 사용하여 더 간결한 코드 구현.



3. 명확한 예외 처리 및 로깅 개선

HTTP_OK가 아닐 경우 IOException을 발생시키도록 변경하여 예외 상황을 명확하게 처리.

IllegalArgumentException을 활용하여 더 명확한 예외 메시지 제공.



4. 하드코딩된 문자열 상수화

"user-container", "status", "resultType" 등의 문자열을 상수화하여 유지보수성을 향상.

QUERY_FORMAT을 String.format()을 활용하여 보다 가독성 높은 쿼리 생성 방식 적용.





---

📌 [메소드별 변경점 및 개선 사항]

1️⃣ makeLogQueryString()

💡 개선 전 문제점:

pod == null || pod.isEmpty()를 체크하는 if-else 구문이 가독성을 저하시킴.

StringBuilder 대신 String.format()을 사용하면 더 직관적인 코드로 변환 가능.


💡 개선 후 변경 사항:

String.format()을 활용하여 더 직관적인 쿼리 문자열 생성 방식 적용.

Integer.parseInt(time)을 활용하여 Calendar 계산 시 "-" 문자열 연산을 제거하고 가독성 향상.


✅ 개선 후 코드:

private String makeLogQueryString(String functionKey, String time, String pod) {
    Function function = functionRepository.findByFunctionKey(functionKey)
            .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 펑션입니다."));

    String functionName = (pod == null || pod.isEmpty()) ? function.getName().concat(".*") : pod;

    long queryEndTime = System.currentTimeMillis() / 1000L; // 현재 시각 타임스탬프
    long queryStartTime = (System.currentTimeMillis() - (Integer.parseInt(time) * 3600L * 1000L)) / 1000L; // time 시간 전 타임스탬프 계산

    return String.format(QUERY_FORMAT, function.getName(), functionName, queryStartTime, queryEndTime);
}

📌 개선 효과:

가독성 향상: StringBuilder 대신 String.format()을 사용하여 더 깔끔한 코드로 변환.

불필요한 Calendar 객체 제거: System.currentTimeMillis()를 직접 활용하여 코드 단순화.



---

2️⃣ getLetheLogData()

💡 개선 전 문제점:

HTTP_OK가 아닐 경우 null을 반환하는 방식 → 예외 발생 시 적절한 오류 메시지를 제공하지 않음.


💡 개선 후 변경 사항:

HTTP_OK가 아닐 경우 IOException을 던져서 에러 발생 시 원인을 명확히 알 수 있도록 변경.


✅ 개선 후 코드:

private String getLetheLogData(String query) throws IOException {
    HttpURLConnection connection = establishLetheConnection(query);

    if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
        throw new IOException("Lethe 로그 요청 실패: HTTP 상태 코드 " + connection.getResponseCode());
    }

    String jsonResponse = retrieveRawJSON(connection);
    return extractInformationFromRawJSON(jsonResponse);
}

📌 개선 효과:

예외 상황을 명확하게 처리하여 문제 발생 시 디버깅이 쉬워짐.

HTTP 상태 코드 확인 후 예외 처리 적용 → null을 반환하는 방식 대신, 적절한 예외를 던져 디버깅 가능.



---

3️⃣ retrieveRawJSON()

💡 개선 전 문제점:

StringBuffer 대신 멀티스레딩이 필요 없는 환경에서는 StringBuilder가 성능이 더 좋음.

BufferedReader의 데이터를 더 직관적으로 처리할 수 있는 방법이 존재.


💡 개선 후 변경 사항:

Collectors.joining()을 활용하여 더 간결한 코드로 변환.


✅ 개선 후 코드:

private String retrieveRawJSON(HttpURLConnection connection) throws IOException {
    try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
        return bufferedReader.lines().collect(Collectors.joining());
    }
}

📌 개선 효과:

불필요한 while 루프 제거 → Collectors.joining()을 활용하여 더 간결한 코드로 변경.

try-with-resources 적용 → 리소스 누수를 방지.



---

4️⃣ extractInformationFromRawJSON()

💡 개선 전 문제점:

JSON 데이터를 처리하는 로직이 하나의 메소드에서 너무 많은 역할을 수행.

"time"과 "log" 키만 추출하는 부분을 별도의 메소드로 분리하는 것이 바람직함.


💡 개선 후 변경 사항:

extractLogData() 및 extractPodList() 메소드를 생성하여 단일 책임 원칙(SRP) 적용.


✅ 개선 후 코드:

private String extractInformationFromRawJSON(String jsonResponse) {
    JSONObject jsonObject = new JSONObject(jsonResponse);
    JSONObject dataObject = jsonObject.getJSONObject("data");
    JSONArray resultArray = dataObject.getJSONArray("result");

    JSONArray extractedArray = extractLogData(resultArray);
    List<String> podList = extractPodList(resultArray);

    JSONObject extractedJson = new JSONObject();
    extractedJson.put("status", jsonObject.getString("status"));
    extractedJson.put("data", new JSONObject()
            .put("resultType", dataObject.getString("resultType"))
            .put("pods", podList)
            .put("result", extractedArray));

    return extractedJson.toString();
}

📌 개선 효과:

각 역할을 메소드 단위로 분리하여 코드 가독성 향상.

중복 코드 제거 및 단일 책임 원칙(SRP) 적용.



---

📌 [결론]

이 PR을 통해 코드 가독성, 유지보수성, 예외 처리, 중복 코드 제거 등을 개선했습니다.
📍 주요 개선 효과:
✅ 중복 코드 제거 및 책임 분리 → extractLogData(), extractPodList() 분리
✅ 가독성 향상 → String.format()을 활용하여 가독성을 개선
✅ 예외 처리 강화 → IOException을 활용하여 오류 발생 시 명확한 메시지 제공
✅ 불필요한 객체 제거 → System.currentTimeMillis()를 활용하여 코드 단순화

이제 더 직관적이고 유지보수하기 쉬운 코드 구조를 갖추게 되었습니다! 🚀✨

