/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net"
	"net/http"
	"time"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	servingv1 "knative.dev/serving/pkg/apis/serving/v1"
	modulev1 "scf.scp.samsungsds.com/crd/api/v1"
)

// ScfWatcherReconciler reconciles a ScfWatcher object
type ScfWatcherReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// Function Status JSON Data
type FunctionStatusData struct {
	functionStatus string
}

const (
	StatusTrue      = "True"
	StatusFalse     = "False"
	StatusUnknown   = "Unkown"
	StatusActive    = "Active"
	StatusSuccess   = "Success"
	StatusFail      = "Fail"
	StatusReady     = "READY"
	StatusNotReady  = "NOT_READY"
	StatusDeploying = "DEPLOYING"
)

const ManagerEndpoint = "http://cp-scf-manager.scf-manager-cp:8080/api/v2/function/status/"
const LBHealthCheckMaxRetryCount = 5
const DNSLookupMaxRetryCount = 5

//+kubebuilder:rbac:groups=module.scf.scp.samsungsds.com,resources=scfwatchers,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=module.scf.scp.samsungsds.com,resources=scfwatchers/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=module.scf.scp.samsungsds.com,resources=scfwatchers/finalizers,verbs=update
//+kubebuilder:rbac:groups=serving.knative.dev,resources=services,verbs=get;list;watch;update;patch
//+kubebuilder:rbac:groups=core,resources=configmaps,verbs=get;list;watch

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the ScfWatcher object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *ScfWatcherReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	logger := log.FromContext(ctx)
	logger.Info("Reconcile 시작")
	returnStatus := StatusDeploying
	statusMessage := map[string]string{"functionStatus": returnStatus}



	// TODO(user): your logic here
	// 1. ScfWatcher CR 객체 가져오기
	var scfWatcher modulev1.ScfWatcher
	if err := r.Get(ctx, req.NamespacedName, &scfWatcher); err != nil {
		logger.Error(err, "Unable to fetch ScfWatcher")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}


	// 2-1 관련된 Knative Service 가져오기
	var ksvc servingv1.Service
	if err := r.Get(ctx, client.ObjectKey{Namespace: scfWatcher.Spec.KsvcNamespace, Name: scfWatcher.Spec.KsvcName}, &ksvc); err != nil {
		logger.Error(err, "Unable to fetch Knative Service")
		return ctrl.Result{}, err
	}

	// 현재 상태와 이전 상태를 비교합니다.
	currentStatus := getStatusFromKsvc(ksvc)
	logger.Info("기존 Knative Service 상태 : " + scfWatcher.Status.LastKsvcStatus)
	logger.Info("신규 Knative Service 상태" + currentStatus)

	if scfWatcher.Status.LastKsvcStatus != currentStatus {
		// 상태에 변화있으면 재시도 횟수 초기화
		scfWatcher.Status.LoadBalancerHealthCheckRetryCount = 0
		scfWatcher.Status.DnsLookupRetryCount = 0
		_ = r.Status().Update(ctx, &scfWatcher)
	}

	// ConfigMap 정보 불러오기
	var configMap corev1.ConfigMap
	if err := r.Get(ctx, client.ObjectKey{Namespace: "scf-watcher", Name: scfWatcher.Spec.KsvcName}, &configMap); err != nil {
		logger.Error(err, "Unable to fetch Watcher ConfigMap")
		return ctrl.Result{}, err
	}
	
	logger.Info("함수 URL 정보 ConfigMap 불러오기")
	// ConfigMap으로 부터 함수 URL 정보 불러오기
	functionUrlEnabled := configMap.Data["FUNCTION_URL_ENABLED"]
	functionUrlEndpoint := configMap.Data["FUNCTION_URL_ENDPOINT"]
	lbApiEndpoint := configMap.Data["LOADBALANCER_API_ENDPOINT"]
	loadbalancerId := configMap.Data["LOADBALANCER_ID"]
	//lbHealthCheckMaxRetryCount := configMap.Data["LOADBALANCER_HEALTHCHECK_MAX_RETRY_COUNT"]
	//lbHealthCheckIntervalSecond := configMap.Data["LOADBALANCER_HEALTHCHECK_INTERVAL_SECOND"]
	//dnsLookupMaxRetryCount := configMap.Data["DNS_LOOKUP_MAX_RETRY_COUNT"]
	//dnsLookupIntervalSecond := configMap.Data["DNS_LOOKUP_INTERVAL_SECOND"]
	
	if functionUrlEnabled == "" {
		logger.Error(nil, "FUNCTION_URL_ENABLED not found in ConfigMap")
		return ctrl.Result{}, fmt.Errorf("FUNCTION_URL_ENABLED not found in ConfigMap")
	}
	// 2-2 LB Health 상태 조회
	lbHealthStatus, err := getLBHealthStatus(ctx, lbApiEndpoint, loadbalancerId)
	if err != nil || lbHealthStatus != StatusActive{
		logger.Error(err, "Error getting LB health status: %v")
		
		// LB헬스체크 ScfWatcher의 상태를 업데이트
		scfWatcher.Status.LoadBalancerHealthStatus = lbHealthStatus
		if err := r.Client.Status().Update(ctx, &scfWatcher); err != nil {
			logger.Error(err, "Unable to update ScfWatcher status")
			return ctrl.Result{}, err
		}

		logger.Info("ScfWatcher CR LB헬스체크 Status 업데이트 완료")
		logger.Info("ScfWatcher CR Status 업데이트 값 : ", "LB헬스체크 : ", lbHealthStatus)

		// 재시도 횟수 초과 확인
		if scfWatcher.Status.LoadBalancerHealthCheckRetryCount >= LBHealthCheckMaxRetryCount {
			logger.Info("최대 재시도 횟수 초과. Requeue 중지")
			statusMessage = map[string]string{"functionStatus": StatusNotReady}
			if err := sendStatusToManager(ctx, ManagerEndpoint, statusMessage, scfWatcher.Spec.KsvcName); err != nil {
				logger.Error(err, "Failed to send status update to manager")
				return ctrl.Result{}, err
			}
			logger.Info("상태전송", "status", returnStatus)
			return ctrl.Result{}, nil
		}

		// 재시도 횟수 증가
		scfWatcher.Status.LoadBalancerHealthCheckRetryCount++
		_ = r.Status().Update(ctx, &scfWatcher)

		return ctrl.Result{RequeueAfter: 60 * time.Second}, nil
	}

	// 정상 동작 시 재시도 횟수 초기화
	if scfWatcher.Status.LoadBalancerHealthCheckRetryCount > 0 {
		scfWatcher.Status.LoadBalancerHealthCheckRetryCount = 0
		_ = r.Status().Update(ctx, &scfWatcher)
	}

	logger.Info("LB 헬스체크 상태 값 : " + lbHealthStatus)

	// LB헬스체크 ScfWatcher의 상태를 업데이트
	scfWatcher.Status.LoadBalancerHealthStatus = lbHealthStatus
	if err := r.Client.Status().Update(ctx, &scfWatcher); err != nil {
		logger.Error(err, "Unable to update ScfWatcher status")
		return ctrl.Result{}, err
	}

	logger.Info("ScfWatcher CR LB헬스체크 Status 업데이트 완료")
	logger.Info("ScfWatcher CR Status 업데이트 값 : ", "LB헬스체크 : ", lbHealthStatus)

	// 2-3 LB DNS연결 여부 조회
	lbDnsConnectivity, err := checkLBDnsConnectivity(ctx, functionUrlEndpoint)
	if err != nil {
		logger.Error(err, "Error getting DNS Connectivity: %v")

		// 재시도 횟수 초과 확인
		if scfWatcher.Status.DnsLookupRetryCount >= DNSLookupMaxRetryCount {
			logger.Info("최대 재시도 횟수 초과. Requeue 중지")
			statusMessage = map[string]string{"functionStatus": StatusNotReady}
			if err := sendStatusToManager(ctx, ManagerEndpoint, statusMessage, scfWatcher.Spec.KsvcName); err != nil {
				logger.Error(err, "Failed to send status update to manager")
				return ctrl.Result{}, err
			}
			logger.Info("상태전송", "status", returnStatus)
			return ctrl.Result{}, nil
		}

		// 재시도 횟수 증가
		scfWatcher.Status.DnsLookupRetryCount++
		_ = r.Status().Update(ctx, &scfWatcher)

		return ctrl.Result{RequeueAfter: 60 * time.Second}, nil
	}

	// 정상 동작 시 재시도 횟수 초기화
	if scfWatcher.Status.DnsLookupRetryCount > 0 {
		scfWatcher.Status.DnsLookupRetryCount = 0
		_ = r.Status().Update(ctx, &scfWatcher)
	}

	logger.Info("DNS 연결 여부 : " + lbDnsConnectivity)

	// DNS연결 ScfWatcher의 상태를 업데이트
	scfWatcher.Status.LoadBalancerEndpointDnsConnectivity = lbDnsConnectivity
	if err := r.Client.Status().Update(ctx, &scfWatcher); err != nil {
		logger.Error(err, "Unable to update ScfWatcher status")
		return ctrl.Result{}, err
	}
	logger.Info("ScfWatcher CR DNS Lookup Status 업데이트 완료")
	logger.Info("ScfWatcher CR Status 업데이트 값 : ", "DNS연결 : ", lbDnsConnectivity)

	// 3. 현재 상태와 이전 상태를 비교

	if scfWatcher.Status.LastKsvcStatus == StatusTrue && currentStatus == StatusTrue && lbHealthStatus == StatusActive && lbDnsConnectivity == StatusSuccess {
		// 상태에 변화가 없으면 Reconcile을 반복하지 않음
		logger.Info("Knative상태, LB헬스체크 상태, DNS Lookup 이상없음")
		return ctrl.Result{}, nil
	}
	logger.Info("상태비교 끝")

	// 4. scf-manager에게 상태 업데이트 전송
	// Function URL 기능 활성화 여부 검사
	if functionUrlEnabled == StatusTrue {
		if currentStatus == StatusTrue && lbHealthStatus == StatusActive && lbDnsConnectivity == StatusSuccess {
			returnStatus = StatusReady
		} else if currentStatus == StatusFail || lbHealthStatus != StatusActive || lbDnsConnectivity == StatusFail {
			returnStatus = StatusNotReady
		}
	} else {
		if currentStatus == StatusTrue {
			returnStatus = StatusReady
		} else if currentStatus == StatusFail {
			returnStatus = StatusNotReady
		}
	}

	statusMessage = map[string]string{"functionStatus": returnStatus}
	if err := sendStatusToManager(ctx, ManagerEndpoint, statusMessage, scfWatcher.Spec.KsvcName); err != nil {
		logger.Error(err, "Failed to send status update to manager")
		return ctrl.Result{}, err
	}
	logger.Info("상태전송", "status", returnStatus)

	// 5. ksvc 상태 관련 ScfWatcher의 상태를 업데이트
	scfWatcher.Status.LastKsvcStatus = currentStatus
	scfWatcher.Status.LastReportedTime = metav1.Now()
	if err := r.Client.Status().Update(ctx, &scfWatcher); err != nil {
		logger.Error(err, "Unable to update ScfWatcher status")
		return ctrl.Result{}, err
	}
	logger.Info("ScfWatcher CR Knative Status 업데이트 완료")
	logger.Info("ScfWatcher CR Knative Status 업데이트 값 : " + currentStatus)
	return ctrl.Result{}, nil
}

// getStatusFromKsvc 함수는 Knative 서비스의 현재 상태를 확인
func getStatusFromKsvc(ksvc servingv1.Service) string {
	for _, condition := range ksvc.Status.Conditions {
		if condition.Type == "Ready" {
			if condition.Status == corev1.ConditionTrue {
				return StatusTrue
			} else if condition.Status == corev1.ConditionFalse {
				return StatusFail
			} else {
				return StatusUnknown
			}
		}
	}
	return StatusUnknown
}

// sendStatusToManager 함수는 상태를 Manager endpoint로 전송
func sendStatusToManager(ctx context.Context, endpoint string, status map[string]string, ksvcName string) error {
	logger := log.FromContext(ctx)
	statusJSON, err := json.Marshal(status)
	if err != nil {
		return err
	}
	//resp, err := http.Post(endpoint+":"+ksvcName, "application/json", bytes.NewBuffer(statusJSON))
	req, err := http.NewRequest(http.MethodPut, endpoint+ksvcName, bytes.NewBuffer(statusJSON))
	log.Log.Info("Here is endpoint : " + endpoint + ksvcName)
	//log.Log.Info("Here is JsonBody : "+statusJSON)
	if err != nil {
		logger.Error(err, "Failed to make Request")
		return err
	}

	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)

	if err != nil {
		logger.Error(err, "Failed to send API to Manager")
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to report status: %v", resp.Status)
	}
	return nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *ScfWatcherReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&modulev1.ScfWatcher{}).                                                                       // ScfWatcher 리소스를 관찰
		Watches(&servingv1.Service{}, handler.EnqueueRequestsFromMapFunc(r.findObjectsForKnativeService)). // Knative Service 리소스를 관찰
		Complete(r)
}

func (r *ScfWatcherReconciler) findObjectsForKnativeService(ctx context.Context, obj client.Object) []reconcile.Request {
	scfWatchers := &modulev1.ScfWatcherList{}
	err := r.List(ctx, scfWatchers)
	if err != nil {
		return []reconcile.Request{}
	}

	var requests []reconcile.Request
	for _, scfWatcher := range scfWatchers.Items {
		if scfWatcher.Spec.KsvcName == obj.GetName() && scfWatcher.Spec.KsvcNamespace == obj.GetNamespace() {
			requests = append(requests, reconcile.Request{
				NamespacedName: types.NamespacedName{
					Name:      scfWatcher.Name,
					Namespace: scfWatcher.Namespace,
				},
			})
		}
	}
	return requests
}

// LB 상태를 가져오는 함수 (LB API 호출 시뮬레이션)
func getLBHealthStatus(ctx context.Context, lbApiEndpoint string, lbId string) (string, error) {
	logger := log.FromContext(ctx)
	// 여기에 LB API 호출 코드를 넣으면 됨.
	// 지금은 예시로, API 호출한 결과를 받아오는 부분을 시뮬레이션

	// 실제 구현에서는 HTTP 요청하거나 SDK 클라이언트 호출하는 식으로 작성.
	req, err := http.NewRequest(http.MethodGet, lbApiEndpoint+"/"+lbId, nil)
	if err != nil {
		logger.Error(err, "Failed to make Request")
		return "", err
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		logger.Error(err, "Failed to send API to LB")
		return "", err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("failed to get LB health status: %v", resp.Status)
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	return string(bodyBytes), nil
}

// LB DNS 등록 확인 함수
func checkLBDnsConnectivity(ctx context.Context, urlEndpoint string) (string, error) {
	logger := log.FromContext(ctx)
	// nslookup 대체로 net.LookupHost 사용
	_, err := net.LookupHost(urlEndpoint)
	if err != nil {
		logger.Error(err, "Failed to connext DNS")
		return StatusFail, err
	}
	return StatusSuccess, nil
}



/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ScfWatcherSpec defines the desired state of ScfWatcher
type ScfWatcherSpec struct {
	// ksvcName은 감시할 Knative 서비스의 이름
	// KsvcName is the name of the Knative Service to watch
	KsvcName string `json:"ksvcName,omitempty"`

	// ksvcNamespace는 해당 Knative 서비스가 속한 네임스페이스
	// KsvcNamespace is the namespace of the Knative Service
	KsvcNamespace string `json:"ksvcNamespace,omitempty"`
}

// ScfWatcherStatus defines the observed state of ScfWatcher
type ScfWatcherStatus struct {
	// lastKsvcStatus는 마지막으로 감지된 Knative 서비스의 상태
	// KsvcStatus represents the current status of the watched Knative Service
	LastKsvcStatus string `json:"lastKsvcStatus,omitempty"`

	// lastReportedTime은 마지막으로 상태가 보고된 시간
	// LastUpdated is the timestamp of the last status update
	LastReportedTime metav1.Time `json:"lastReportedTime,omitempty"`

	// 추가: LB 헬스 상태 (Active, Creating, Error 등)
	LoadBalancerHealthStatus string `json:"loadBalancerHealthStatus,omitempty"`

	// 추가: LB 엔드포인트 DNS통신 연결 성공 여부 (Success, Fail)
	LoadBalancerEndpointDnsConnectivity string `json:"loadBalancerEndpointDnsConnectivity,omitempty"`

	// 추가: LB헬스체크 재시도 횟수 추적
	LoadBalancerHealthCheckRetryCount int `json:"loadBalancerHealthCheckRetryCount,omitempty"`

	// 추가: DNS Lookup 재시도 횟수 추적
	DnsLookupRetryCount int `json:"dnsLookupRetryCount,omitempty"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// ScfWatcher is the Schema for the scfwatchers API
type ScfWatcher struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ScfWatcherSpec   `json:"spec,omitempty"`
	Status ScfWatcherStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// ScfWatcherList contains a list of ScfWatcher
type ScfWatcherList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScfWatcher `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ScfWatcher{}, &ScfWatcherList{})
}




[root@d2-krw1a-cp-scf-manager-01 j1.son]# curl -vs -X GET   -H "X-Auth-Token: gAAAAABoHD_-x2AI1xZnpESFafqS2cnoafD1veJPcmTsnQxUvX7kV_TIkO4M_3iSxef1zpq8g7u-aEIOKEfqIBcMRPmRe6eIOcGDlh8Vtkbeuj7WlMF537dVt9oYLoosxmIO8yBH_MRrwsmzhMburxZ-
SXkxEMpvtk4Ly7_zmnVUB6EsYzK2JqM" "https://loadbalancer-i.kr-west1.dev2.samsungsdscloud.com/v1/loadbalancers/9c61c5c01dc64d3bb53af8608b488d28"
*   Trying 198.18.2.52...
* TCP_NODELAY set
* Connected to loadbalancer-i.kr-west1.dev2.samsungsdscloud.com (198.18.2.52) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
  CApath: none
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Certificate (11):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, CERT verify (15):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Finished (20):
* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.3 (OUT), TLS handshake, [no content] (0):
* TLSv1.3 (OUT), TLS handshake, Finished (20):
* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384
* ALPN, server accepted to use h2
* Server certificate:
*  subject: C=KR; ST=Seoul; O=Samsung SDS Co.,Ltd.; CN=*.kr-west1.dev2.samsungsdscloud.com
*  start date: Aug  2 00:00:00 2024 GMT
*  expire date: Sep  2 23:59:59 2025 GMT
*  subjectAltName: host "loadbalancer-i.kr-west1.dev2.samsungsdscloud.com" matched cert's "*.kr-west1.dev2.samsungsdscloud.com"
*  issuer: C=GB; ST=Greater Manchester; L=Salford; O=Sectigo Limited; CN=Sectigo RSA Organization Validation Secure Server CA
*  SSL certificate verify ok.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* TLSv1.3 (OUT), TLS app data, [no content] (0):
* TLSv1.3 (OUT), TLS app data, [no content] (0):
* TLSv1.3 (OUT), TLS app data, [no content] (0):
* Using Stream ID: 1 (easy handle 0x55805c78a6b0)
* TLSv1.3 (OUT), TLS app data, [no content] (0):
> GET /v1/loadbalancers/9c61c5c01dc64d3bb53af8608b488d28 HTTP/2
> Host: loadbalancer-i.kr-west1.dev2.samsungsdscloud.com
> User-Agent: curl/7.61.1
> Accept: */*
> X-Auth-Token: gAAAAABoHD_-x2AI1xZnpESFafqS2cnoafD1veJPcmTsnQxUvX7kV_TIkO4M_3iSxef1zpq8g7u-aEIOKEfqIBcMRPmRe6eIOcGDlh8Vtkbeuj7WlMF537dVt9oYLoosxmIO8yBH_MRrwsmzhMburxZ-SXkxEMpvtk4Ly7_zmnVUB6EsYzK2JqM
> 
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* TLSv1.3 (IN), TLS app data, [no content] (0):
* Connection state changed (MAX_CONCURRENT_STREAMS == 128)!
* TLSv1.3 (OUT), TLS app data, [no content] (0):
* TLSv1.3 (IN), TLS app data, [no content] (0):
* TLSv1.3 (IN), TLS app data, [no content] (0):
< HTTP/2 200 
< date: Thu, 08 May 2025 05:24:38 GMT
< content-type: application/json
< content-length: 782
< x-openstack-request-id: req-b31c3f4b-ac78-4c7c-a8b1-febdf1fd5dff
< 
{"loadbalancer":{"account_id":"33b532c466824bcf9324101a3c6f3015","created_at":"2025-04-01T11:34:24.898463Z","created_by":"d69cba773b3e4419b0f3ed9045a8e679","description":"","firewall_id":"4810b89631184c3a85169d06b4796c8d","firewal
l_name":"FW_LB_scfsub3","health_check_ip":["198.19.35.186","198.19.33.65"],"id":"9c61c5c01dc64d3bb53af8608b488d28","layer_type":"L7","modified_at":"2025-04-01T11:34:47.009393Z","modified_by":"d69cba773b3e4419b0f3ed9045a8e679","nam
e":"scf-function-lb","public_nat_ip":"42.14.6.91","public_nat_state":"ACTIVE","service_ip":"198.19.32.13","source_nat_ip":"198.19.32.32","state":"ACTIVE","subnet_cidr":"198.19.32.0/22","subnet_id":"e430781ba086436ab580029425c5e3cf
","subnet_name":"scfsub3","vpc_id":"a9ca9022243141d49300ca59585e1049","vpc_name":"scfvpc"}}
* TLSv1.3 (IN), TLS app data, [no content] (0):
* Connection #0 to host loadbalancer-i.kr-west1.dev2.samsungsdscloud.com left intact
