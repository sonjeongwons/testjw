package com.scf.manager.mvc.service;

import com.scf.manager.common.enums.TypeEnums;
import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.mvc.domain.AllowIp;
import com.scf.manager.mvc.domain.Function;
import com.scf.manager.mvc.dto.AllowIpDTO;
import com.scf.manager.mvc.repository.AllowIpRepository;
import com.scf.manager.mvc.repository.FunctionRepository;
import io.fabric8.istio.client.DefaultIstioClient;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class AllowIpService {

    private final FunctionRepository functionRepository;
    private final AllowIpRepository allowIpRepository;
    private final IstioCallService istioCallService;
    private final DefaultIstioClient istioClient;

    public AllowIpDTO.Response registerAllowIp(AllowIpDTO.Register reqDto, Long functionSeq) {

        reqDto.setFunctionSeq(functionSeq);
        AllowIp allowIp = allowIpRepository.save(
                AllowIp.register(reqDto)
        );
        return allowIp.toDto();
    }

    @Transactional
    public AllowIpDTO.AllowIpResponse updateAllowIps(AllowIpDTO.AllowIpModify allowIpDtos, String functionKey) {

        Function function = functionRepository.findByFunctionKey(functionKey).orElseThrow(() -> new ResourceNotFoundException("데이터가 존재하지않습니다."));
        function.updatePublicAccessYn(allowIpDtos.getPublicAccessAclYn());

        List<AllowIp> allowIps = allowIpRepository.findByFunction(function);
        List<AllowIpDTO.Register> dbItems = allowIps.stream().map(f -> AllowIpDTO.Register.builder().name(f.getName()).build()).collect(Collectors.toList());

        //사용자 입력으로 전달된 허용 IP 리스트 정렬
        this.sortFunctionIp(allowIpDtos.getAllowIps());
        //현재 DB에 저장된 허용 IP 리스트 정렬
        this.sortFunctionIp(dbItems);

        if (isChangeObject(allowIpDtos.getAllowIps(), dbItems)) {
            allowIps.stream().forEach((allowIp) -> allowIpRepository.delete(allowIp));
            allowIpDtos.getAllowIps().stream().forEach(allowIpDTO -> this.saveAllowIps(allowIpDTO, function));
        }

        //"Y" : publicAccessEndpointAcl 를 체크하고 IP를 입력하면 해당 IP만 허용
        //"Y" : publicAccessEndpointAcl 를 체크하고 IP를 입력 안하면 모두 막음
        //"N" : publicAccessEndpointAcl 을 체크를 해제 ("N") 하면 다 허용
        if (function.isReady()) {
            List<String> ips;

            if ("Y".equals(function.getPublicAccessAclYn())) {
                if (CollectionUtils.isEmpty(allowIpDtos.getAllowIps())) {
                    //전체차단
                    ips = new ArrayList<>();
                } else {
                    //IP리스트에 한해 허용
                    ips = allowIpDtos.getAllowIps().stream().map(ip -> ip.getName()).collect(Collectors.toList());
                }
                istioCallService.makeIstioPolicy(function.getName(), ips);
            } else if ("N".equals(function.getPublicAccessAclYn())) {
                istioClient.v1beta1().authorizationPolicies().inNamespace("istio-system").withName(function.getName()).delete();
            }
            else throw new RuntimeException("퍼블릭 액세스 여부를 선택해 주세요.");
        }
        AllowIpDTO.AllowIpResponse output = new AllowIpDTO.AllowIpResponse();
        List<AllowIpDTO.Response> collect = allowIpRepository.findByFunction(function).stream().map(AllowIp::toDto).collect(Collectors.toList());
        output.setPublicAccessAclYn(function.getPublicAccessAclYn());
        output.setAllowIps(collect);

        return output;
    }

    private void saveAllowIps(AllowIpDTO.Register allowIpDTO, Function function) {
        allowIpDTO.setFunctionSeq(function.getFunctionSeq());
        this.allowIpRepository.save(AllowIp.register(allowIpDTO));
    }


    // 사용자가 입력한 IP허용 리스트와, 현재 DB에 있는 IP 허용리스트를 비교하기 위한 리스트 정렬
    private void sortFunctionIp(List<AllowIpDTO.Register> items) {
        Collections.sort(items, (o1, o2) -> new CompareToBuilder().append(o1.getName(), o2.getName()).toComparison());
    }

    private boolean isChangeObject(List<AllowIpDTO.Register> reqItems, List<AllowIpDTO.Register> dbItems) {
        if (reqItems.size() != dbItems.size()) {
            return true;
        } else {
            for (int i = 0; i < reqItems.size(); i++) {
                if (!StringUtils.equals(reqItems.get(i).getName(), dbItems.get(i).getName())) {
                    return true;
                }
            }
        }
        return false;
    }
}
