GitHub Pull Request (PR) 작성 예시


---

PR 제목:

🔧 FunctionCronService 리팩토링 - 코드 품질 및 유지보수성 개선


---

PR 개요

이번 PR에서는 FunctionCronService 클래스의 코드 품질을 향상시키고 유지보수성을 개선하였습니다.
기존 코드에서 발견된 중복 코드 제거, Magic String 제거, 단일 책임 원칙(SRP) 준수, 예외 처리 개선, 로깅 강화 등의 사항을 반영하여 코드의 가독성과 확장성을 향상시켰습니다.


---

개발 내용

1. 중복 코드 제거 및 메소드 분리

functionKey 검증을 validateFunctionKey()로 분리.

Function 객체 조회를 findValidFunction()으로 통합하여 중복 로직 제거.

PingSource 생성 로직을 buildPingSource()로 분리하여 가독성을 높이고 재사용성 강화.



2. Magic String 제거 및 상수화

"Asia/Seoul", "application/json", "* * * * *" 등의 값을 DEFAULT_TIMEZONE, CONTENT_TYPE_JSON, DEFAULT_SCHEDULE 등의 상수로 변경하여 하드코딩 제거.



3. 로깅 개선

기존 log.info("결과상태 확인" + patch.getStatus().getConditions())를 logPingSourceStatus() 메소드로 분리하여 가독성을 높이고 일관된 로깅을 적용.



4. 예외 처리 개선

RuntimeException을 IllegalArgumentException 및 ResourceNotFoundException으로 변경하여 더 명확한 예외 처리.



5. 불필요한 @Transactional 제거

DB 트랜잭션이 필요하지 않은 deletePingSource() 메서드에서 @Transactional 제거.





---

📌 메소드별 변경점 및 개선 사항


---

1. registerCron(FunctionDTO.Register reqDto)

✅ 변경 사항

functionKey 검증을 validateFunctionKey(reqDto.getFunctionKey())로 분리.

함수 조회를 findValidFunction(reqDto.getFunctionKey())로 처리.

makePingSource() 대신 createOrUpdatePingSource() 호출.

하드코딩된 Magic String 제거 및 상수 사용.


✅ 개선 이유

함수 조회 및 검증을 분리하여 중복을 제거하고 유지보수성을 높임.



---

2. modifyCron(FunctionDTO.Modify reqDto, String functionKey)

✅ 변경 사항

validateFunctionKey(functionKey)를 호출하여 입력 검증.

findValidFunction(functionKey)를 사용해 함수 존재 여부 확인.

PingSource를 createOrUpdatePingSource()로 업데이트.


✅ 개선 이유

registerCron()과 동일한 코드 중복 제거.

PingSource 업데이트 로직을 재사용 가능하도록 분리.



---

3. deleteCron(String functionKey)

✅ 변경 사항

validateFunctionKey(functionKey)로 functionKey 검증.

findValidFunction(functionKey)로 함수 조회.

PingSource 삭제 로직을 deletePingSource(function);로 별도 메소드화.


✅ 개선 이유

registerCron(), modifyCron()과 동일한 코드 중복 제거.

PingSource 삭제를 명확한 책임으로 분리.



---

4. createOrUpdatePingSource(String functionName, String timezone, String schedule)

✅ 변경 사항

buildPingSource()를 호출하여 PingSource 객체를 생성하도록 분리.

기존 PingSource 삭제 후 새로운 PingSource를 서버 사이드 패치(SERVER_SIDE_APPLY) 방식으로 적용.

logPingSourceStatus()를 호출하여 상태를 로깅.


✅ 개선 이유

PingSource 생성 로직을 재사용 가능하도록 분리.

PingSource 상태를 명확히 로깅하여 디버깅 용이.


📌 기술 설명

Server-Side Apply (SSA):

PatchContext.of(PatchType.SERVER_SIDE_APPLY)를 사용하여 PingSource를 적용하면 기존 리소스를 부분적으로 갱신하면서 불필요한 변경을 방지할 수 있음.

Kubernetes Server-Side Apply 공식 문서 참고.




---

5. buildPingSource(String functionName, String timezone, String schedule)

✅ 변경 사항

PingSource 객체 생성을 별도 메소드로 분리.

하드코딩된 "Asia/Seoul", "application/json" 등을 DEFAULT_TIMEZONE, CONTENT_TYPE_JSON 상수로 변경.


✅ 개선 이유

PingSource 생성을 한 곳에서 관리하여 유지보수성을 향상.

Magic String 제거로 코드 가독성 및 확장성 향상.



---

6. logPingSourceStatus(PingSource patchedSource)

✅ 변경 사항

PingSource의 상태를 로깅하는 로직을 log.info("PingSource 상태: {}", patchedSource.getStatus().getConditions());로 변경.


✅ 개선 이유

기존 "결과상태 확인"이라는 불분명한 로그를 명확한 형식으로 변경하여 디버깅을 쉽게 함.



---

7. deletePingSource(Function function)

✅ 변경 사항

PingSource 삭제 후 log.info("PingSource 삭제 완료: {}", function.getName()); 로그 추가.


✅ 개선 이유

PingSource가 정상적으로 삭제되었는지 확인하기 위해 로깅 추가.



---

8. findValidFunction(String functionKey)

✅ 변경 사항

함수 조회 로직을 별도 메소드로 분리.

조회 실패 시 ResourceNotFoundException을 던지도록 변경.


✅ 개선 이유

registerCron(), modifyCron(), deleteCron()에서 중복된 코드 제거.



---

9. validateFunctionKey(String functionKey)

✅ 변경 사항

functionKey가 null이거나 빈 값이면 IllegalArgumentException을 던지도록 변경.


✅ 개선 이유

코드 중복 제거 및 일관된 예외 처리 적용.



---

결론

이번 PR을 통해 다음과 같은 코드 품질 향상을 달성하였습니다.
✅ 중복 코드 제거 및 유지보수성 향상
✅ Magic String 제거로 가독성 개선
✅ 로깅 일관성 강화
✅ 단일 책임 원칙(SRP) 적용
✅ 불필요한 @Transactional 제거로 성능 개선

이러한 개선으로 인해 코드의 재사용성 증가, 확장성 향상, 디버깅 및 유지보수 용이성 강화 효과를 기대할 수 있습니다. 🚀


---

📢 리뷰 요청

해당 변경 사항에 대해 추가적인 개선점이나 논의할 부분이 있으면 의견 부탁드립니다!
특히 PingSource 패치 로직에 대한 의견이 있다면 공유해 주세요! 🙌

