📌 PR 개요
제목:
KnativeService 코드 리팩토링 - 중복 코드 제거 및 유지보수성 개선

설명:
이번 PR에서는 KnativeService의 유지보수성과 가독성을 높이기 위해 중복 코드 제거, 책임 분리, Magic String 제거, ServiceBuilder 최적화 등의 개선을 진행하였습니다.
Fabric8 Knative API의 ServiceBuilder 사용 방식 오류를 수정하고, 런타임별 ServiceBuilder 처리 로직을 최적화하여 코드의 일관성을 유지하도록 했습니다.
또한, 잘못된 getOrDefault() 예외 처리 방식도 Optional.ofNullable()을 활용하여 해결했습니다.

📌 개발 내용
1️⃣ 중복 코드 제거 및 책임 분리

makeIstioResource와 callIstioAndKnative에서 Istio 관련 로직을 **configureIstioPolicy**와 **handleIstioToken**으로 분리
callFunction의 Knative 서비스 배포 로직을 **deployFunction**과 **createKnativeService**로 분리하여 모듈화
2️⃣ Fabric8 Knative API 사용 오류 수정

기존 코드에서 withTimeoutSeconds(timeout)을 ServiceBuilder에서 직접 호출하는 방식이었으나,
Knative의 timeoutSeconds는 RevisionSpec 내부에서 설정해야 함
(.withNewSpec().withNewTemplate().withNewSpec().withTimeoutSeconds(timeout)로 변경)
3️⃣ Magic String 제거

"Y", "N", "token" 등의 문자열을 상수화 (YES, NO, TOKEN_TYPE) 하여 유지보수성을 높임
4️⃣ ServiceBuilder 최적화 및 Go 런타임 처리 개선

Go 런타임과 다른 런타임의 ServiceBuilder 처리 차이를 반영
Go 런타임의 경우 InitContainer를 활용하도록 설정
다른 런타임은 일반 Container만 실행하도록 최적화
5️⃣ 예외 처리 개선 (generateManagerFileName 오류 수정)

getOrDefault()에서 throw 문을 직접 사용하는 방식에서 Optional.ofNullable()을 활용한 방식으로 변경
기존 코드의 throw new RuntimeException(...)을 orElseThrow()로 처리하여 코드 간결화 및 예외 처리 방식 개선
📌 메소드별 변경점 및 개선 사항
1️⃣ makeIstioResource 개선
📌 문제점

callIstioAndKnative와 중복되는 Istio 정책 등록 및 삭제 로직이 포함됨
✅ 개선 사항

Istio 정책 설정을 configureIstioPolicy 메소드로 분리
Istio 토큰 등록을 handleIstioToken으로 분리하여 가독성 및 유지보수성 향상
📌 변경 코드

java
복사
편집
public void makeIstioResource(Function function) {
    FunctionEnvironment functionEnvironment = getFunctionEnvironment(function);
    configureIstioPolicy(function, functionEnvironment);
}
2️⃣ callIstioAndKnative 개선
📌 문제점

makeIstioResource와 동일한 Istio 정책 로직이 중복되어 있음
함수 호출(callFunction)까지 포함하여 단일 책임 원칙(SRP) 위반
✅ 개선 사항

Istio 설정을 configureIstioPolicy 메소드로 분리
함수 실행을 callFunction에서 처리하도록 변경
📌 변경 코드

java
복사
편집
public void callIstioAndKnative(Function function) throws IOException, ParseException {
    FunctionEnvironment functionEnvironment = getFunctionEnvironment(function);
    configureIstioPolicy(function, functionEnvironment);
    callFunction(function.getFunctionKey());
}
3️⃣ deployFunction 개선 (Fabric8 API 오류 수정)
📌 문제점

withTimeoutSeconds(timeout)을 ServiceBuilder에서 직접 호출 → Fabric8 API에서 지원하지 않음
timeoutSeconds는 Knative의 RevisionSpec 내부에서 설정해야 함
✅ 개선 사항

.withNewSpec().withNewTemplate().withNewSpec().withTimeoutSeconds(timeout)을 사용하여 RevisionSpec 내부에서 설정
long 타입의 timeout을 int로 변환하여 오류 방지
📌 변경 코드

java
복사
편집
private void deployFunction(Function function, FunctionDTO.Register reqDto) {
    long timeout = Long.parseLong(reqDto.getLimitTimeMinute()) * 60L +
                   Long.parseLong(reqDto.getLimitTimeSecond());

    Service service = new ServiceBuilder()
            .withNewMetadata()
                .withName(function.getName())
                .withNamespace(function.getName())
            .endMetadata()
            .withNewSpec()
                .withNewTemplate()
                    .withNewMetadata()
                        .withAnnotations(annotations)
                    .endMetadata()
                    .withNewSpec()
                        .withTimeoutSeconds((int) timeout) // ✅ Fabric8 API에 맞게 수정
                        .addNewContainer()
                            .withImage(repository.concat("/scf-")
                                    .concat(reqDto.getRuntime().split(":")[0].toLowerCase())
                                    .concat(":").concat(reqDto.getRuntime().split(":")[1]))
                        .endContainer()
                    .endSpec()
                .endTemplate()
            .endSpec()
            .build();

    kn.services().inNamespace(function.getName()).withName(function.getName()).delete();
    kn.services().withName(function.getName()).patch(PatchContext.of(PatchType.SERVER_SIDE_APPLY), service);
}
📌 기술적 근거

출처: Fabric8 Knative API 문서
4️⃣ generateManagerFileName 개선
📌 문제점

getOrDefault()에서 throw 문을 직접 사용하여 문법 오류 발생
예외 발생 시 return 타입과 맞지 않는 문제 존재
✅ 개선 사항

Optional.ofNullable()을 활용하여 예외 발생 처리
가독성을 높이고 유지보수성을 향상
📌 변경 코드

java
복사
편집
private String generateManagerFileName(FunctionDTO.Register reqDto) {
    return Optional.ofNullable(MANAGER_FILE_MAP.get(reqDto.getRuntime()))
            .orElseThrow(() -> new RuntimeException("지원하지 않는 런타임입니다."));
}
📌 기술적 근거

출처: Java Optional 공식 문서
📌 최종 개선 요약
변경 사항	적용 이유 및 효과
중복 코드 제거	configureIstioPolicy, handleIstioToken, deployFunction으로 분리
Magic String 제거	"Y", "N", "token" 등을 YES, NO, TOKEN_TYPE 상수화
Fabric8 API 오류 수정	withTimeoutSeconds 위치를 RevisionSpec 내부로 이동
Go 런타임과 다른 런타임의 ServiceBuilder 차별화 적용	InitContainer를 Go 런타임에만 적용
예외 처리 방식 개선	Optional.ofNullable()을 활용한 generateManagerFileName 수정
📌 결론
이번 리팩토링을 통해 중복 코드가 제거되고, Knative API를 올바르게 활용하며, 유지보수성이 높아지는 코드로 개선되었습니다.
이제 Fabric8 API 오류 없이 timeoutSeconds를 정상적으로 설정할 수 있으며, 각 메소드의 역할이 명확해지고 가독성이 향상되었습니다. 🚀

PR 리뷰 요청:

ServiceBuilder 개선 사항 검토
generateManagerFileName에서 Optional.ofNullable() 활용 방식 검토
deployFunction에서 withTimeoutSeconds(timeout)이 올바르게 적용되었는지 확인
🔥 리뷰 부탁드립니다! 🔥
