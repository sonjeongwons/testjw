@Transactional
public void scanFunctionCodeFile(FunctionCodeDTO.Register reqDto, String functionKey) throws IOException {
    Function function = functionRepository.findByFunctionKeyAndDelYn(functionKey, "N")
            .orElseThrow(() -> new ResourceNotFoundException("존재하지 않는 펑션입니다."));

    CodeFile codeFile = codeFileRepository.findByFunctionCode(
            functionCodeRepository.findByFunction(function)
                    .orElseThrow(() -> new ResourceNotFoundException("코드 정보가 존재하지 않습니다."))
    );

    if (codeFile == null) {
        throw new ResourceNotFoundException("파일 기반의 코드가 존재하지 않습니다.");
    }

    // 파일 경로 구성
    String filePath = "/mnt/" + functionKey + "/" + codeFile.getFileName();
    File file = new File(filePath);
    if (!file.exists()) {
        throw new FileNotFoundException("스캔 대상 파일이 존재하지 않습니다: " + filePath);
    }

    // 멀티파트 요청 구성
    String scanUrl = "https://cvc.private.kr-west1.dev2.samsungsdscloud.com/api/v1/scanner/multipart-scan";

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.MULTIPART_FORM_DATA);
    headers.set("X-Subject-Token", tokenScheduler.getAccessToken());

    MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
    body.add("file", new FileSystemResource(file));

    HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

    RestTemplate restTemplate = new RestTemplate();
    ResponseEntity<String> response = restTemplate.postForEntity(scanUrl, requestEntity, String.class);

    if (response.getStatusCode().is2xxSuccessful()) {
        log.info("악성코드 검사 요청 성공: {}", response.getBody());
    } else {
        log.warn("악성코드 검사 요청 실패: {}", response.getStatusCode());
        throw new RuntimeException("악성코드 검사 요청 실패: " + response.getStatusCode());
    }
}