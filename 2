package com.scf.manager.mvc.service;

import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.common.util.AppUtil;
import com.scf.manager.mvc.domain.*;
import com.scf.manager.mvc.dto.FunctionDTO;
import com.scf.manager.mvc.repository.*;
import io.fabric8.istio.client.DefaultIstioClient;
import io.fabric8.knative.client.DefaultKnativeClient;
import io.fabric8.knative.serving.v1.Service;
import io.fabric8.knative.serving.v1.ServiceBuilder;
import io.fabric8.kubernetes.api.model.*;
import io.fabric8.kubernetes.client.dsl.base.PatchContext;
import io.fabric8.kubernetes.client.dsl.base.PatchType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.util.CollectionUtils;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.PosixFilePermission;
import java.text.ParseException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Base64;

import static com.scf.manager.common.constants.ExceptionConst.FILE_TYPE_EXCEPTION;
import static com.scf.manager.common.util.AppUtil.getSourceCodeFromFile;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class KnativeService {

    @Value("${config.repository}")
    private String repository;
    private final String BASE_URL = "samsungsdscloud.com";

    // NFS 접근을 위한 사용자 함수 볼륨
    private final String volumeName = "serverless-storage-user";

    // Init Container <-> User Container 간 파일 공유를 위한 임시 스토리지 볼륨 (EmptyDir)
    private final String sharedVolumeName = "share-vol";


    private final DefaultKnativeClient kn;
    private final FunctionEnvironmentRepository functionEnvironmentRepository;
    private final AllowIpRepository allowIpRepository;
    private final IstioCallService istioCallService;
    private final DefaultIstioClient istioClient;
    private final KeyManagerRepository keyManagerRepository;
    private final FunctionRepository functionRepository;

    private final SourceFileRepository sourceFileRepository;

    private final static String nodejsManagerCode = Base64.getEncoder().encodeToString(getSourceCodeFromFile("codetemplates/handler/nodejs/manager.js").getBytes());
    private final static String pythonManagerCode = Base64.getEncoder().encodeToString(getSourceCodeFromFile("codetemplates/handler/python/manager.py").getBytes());
    private final static String phpManagerCode = Base64.getEncoder().encodeToString(getSourceCodeFromFile("codetemplates/handler/php/index.php").getBytes());
    private final static String golangManagerCode = Base64.getEncoder().encodeToString(getSourceCodeFromFile("codetemplates/handler/golang/manager.go").getBytes());

    public void makeIstioResource(Function function) throws IOException, ParseException {

        //펑션 토큰 확인
        FunctionEnvironment functionEnvironment = functionEnvironmentRepository.findByFunction(function).stream().filter(h -> h.getType().equals("token")).findFirst().orElseThrow(()->new RuntimeException("토큰정보를 확인해주십시오."));
        log.info("functionEnvironment = " + functionEnvironment);
        //istio ip등록
        List<AllowIp> allowIps = allowIpRepository.findByFunction(function);

        if ("Y".equals(function.getPublicAccessAclYn())) {
            List<String> ips = new ArrayList<>();
            if(CollectionUtils.isEmpty(allowIps)){
                //전체차단
                ips = new ArrayList<>();
            }else{
                ips = allowIps.stream().map(ip -> ip.getName()).collect(Collectors.toList());
            }
            istioCallService.makeIstioPolicy(function.getName(), ips);
        } else  if ("N".equals(function.getPublicAccessAclYn())) {
            istioClient.v1beta1().authorizationPolicies().inNamespace("istio-system").withName(function.getName()).delete();
        }
        //istio jwk등록
        if("Y".equals(functionEnvironment.getValue())){
            log.info("functionEnvironment = " + functionEnvironment);
            KeyManager keyManagerOptional = keyManagerRepository.findByFunctionAndDelYn(function,"N").orElseThrow(() -> new ResourceNotFoundException("키매니저 정보를 확인해주십시오."));

            String token = function.getToken();

            istioCallService.enrollIstioToken(function.getName(),"{'keys':["+keyManagerOptional.getJwk()+"]}", token);
        }else if("N".equals(functionEnvironment.getValue())) {
            istioClient.v1beta1()
                    .requestAuthentications()
                    .inNamespace(function.getName())
                    .withName(function.getName()).delete();
            istioClient.v1beta1()
                    .authorizationPolicies()
                    .inNamespace(function.getName())
                    .withName(function.getName()).delete();
        }
    }



    public void callIstioAndKnative(Function function) throws IOException, ParseException {

        //펑션 토큰 확인
        FunctionEnvironment functionEnvironment = functionEnvironmentRepository.findByFunction(function).stream().filter(h -> h.getType().equals("token")).findFirst().orElseThrow(()->new RuntimeException("토큰정보를 확인해주십시오."));
        log.info("functionEnvironment = " + functionEnvironment);
        //istio ip등록
        List<AllowIp> allowIps = allowIpRepository.findByFunction(function);

        if ("Y".equals(function.getPublicAccessAclYn())) {
            List<String> ips = new ArrayList<>();
            if(CollectionUtils.isEmpty(allowIps)){
                //전체차단
                ips = new ArrayList<>();
            }else{
                ips = allowIps.stream().map(ip -> ip.getName()).collect(Collectors.toList());
            }
            istioCallService.makeIstioPolicy(function.getName(), ips);
        } else  if ("N".equals(function.getPublicAccessAclYn())) {
            istioClient.v1beta1().authorizationPolicies().inNamespace("istio-system").withName(function.getName()).delete();
        }
        //istio jwk등록
        if("Y".equals(functionEnvironment.getValue())){
            log.info("functionEnvironment = " + functionEnvironment);
            KeyManager keyManagerOptional = keyManagerRepository.findByFunctionAndDelYn(function,"N").orElseThrow(() -> new ResourceNotFoundException("키매니저 정보를 확인해주십시오."));

            String token = function.getToken();

            istioCallService.enrollIstioToken(function.getName(),"{'keys':["+keyManagerOptional.getJwk()+"]}", token);
        }else if("N".equals(functionEnvironment.getValue())) {
            istioClient.v1beta1()
                    .requestAuthentications()
                    .inNamespace(function.getName())
                    .withName(function.getName()).delete();
            istioClient.v1beta1()
                    .authorizationPolicies()
                    .inNamespace(function.getName())
                    .withName(function.getName()).delete();
        }
        //함수호출
        this.callFunction(function.getFunctionKey());
    }

    private String generateManagerFileName(FunctionDTO.Register reqDto) {
        if (reqDto.getRuntime().startsWith("Node.js")) {
            return "manager.js";
        } else if (reqDto.getRuntime().startsWith("Python")) {
            return "manager.py";
        } else if (reqDto.getRuntime().startsWith("PHP")) {
            return "index.php";
        } else if (reqDto.getRuntime().startsWith("Java")) {
            return "manager.jar";
        } else if (reqDto.getRuntime().startsWith("Go")) {
            return "manager.go";
        } else {
            throw new RuntimeException(FILE_TYPE_EXCEPTION);
        }
    }

    private String generateFunctionFileName(FunctionDTO.Register reqDto) {
        if (reqDto.getRuntime().startsWith("Node.js")) {
            return "nodefunction.js";
        } else if (reqDto.getRuntime().startsWith("Python")) {
            return "pythonfunction.py";
        } else if (reqDto.getRuntime().startsWith("PHP")) {
            return "phpfunction.php";
        } else if (reqDto.getRuntime().startsWith("Java")) {
            return "javafunction.jar";
        } else if (reqDto.getRuntime().startsWith("Go")) {
            return "gofunction.go";
        } else {
            throw new RuntimeException(FILE_TYPE_EXCEPTION);
        }
    }

    private void setFunctionEnvironment(FunctionEnvironment functionEnvironment, List<EnvVar> envVars, FunctionDTO.Register reqDto) {
        if ("coldStartYn".equals(functionEnvironment.getType())) {
            reqDto.setColdStartYn(functionEnvironment.getValue());
        }
        else if ("env".equals(functionEnvironment.getType())) {
            envVars.add(new EnvVar(functionEnvironment.getKey(), functionEnvironment.getValue(), null));
        }
        else if ("memory".equals(functionEnvironment.getType())) {
            reqDto.setMemory(functionEnvironment.getValue() + "Mi");
        }
        else if ("limit".equals(functionEnvironment.getType())) {
            if ("minute".equals(functionEnvironment.getKey())) {
                reqDto.setLimitTimeMinute(functionEnvironment.getValue());
            }
            else if ("second".equals(functionEnvironment.getKey())) {
                reqDto.setLimitTimeSecond(functionEnvironment.getValue());
            }
        }
    }

    private void generateFileInfo(String fileName, String subPath, String functionContent, String runtime) throws IOException {
        //사용자 경로
        String path = "/mb_scf/serverless" + "/"
                + subPath;

        log.info("path = " + path);
        AppUtil.createDirectory(path);

        if (runtime.equals("Java")) { // Runtime: Java
            // 해당 파일이 없을 경우 함수명의 파일 생성
            Path functionFile = Paths.get(path.concat("/").concat(fileName));

            Set<PosixFilePermission> defaultPosixPermissions = new HashSet<>();

            defaultPosixPermissions.add(PosixFilePermission.OWNER_READ);
            defaultPosixPermissions.add(PosixFilePermission.OWNER_WRITE);
            defaultPosixPermissions.add(PosixFilePermission.GROUP_READ);
            defaultPosixPermissions.add(PosixFilePermission.OTHERS_READ);

            Path downloadFile = Paths.get(path.concat("/").concat("download.jar"));
            if (Files.exists(downloadFile)) {
                Files.move(downloadFile, functionFile, StandardCopyOption.REPLACE_EXISTING);
            } else {
                log.info("download.jar가 존재하지 않습니다.");
            }
            Files.setPosixFilePermissions(functionFile, defaultPosixPermissions);  //Assure the permissions again after the file is created
        } else { // Runtime: Node.js, Python, PHP, Go
            // 해당 파일이 없을 경우 함수명의 파일 생성
            Path functionFile = Paths.get(path.concat("/").concat(fileName));

            // Go 런타임 모듈 구성을 위한 하위 디렉토리 구성
            if (runtime.equals("Go") && fileName.equals("gofunction.go")) {
                String goPath = path + "/gofunction";
                AppUtil.createDirectory(goPath);
                functionFile = Paths.get(goPath.concat("/").concat(fileName));
            }

            if(Files.exists(functionFile)){
                Files.delete(functionFile);
            }
            if (!Files.exists(functionFile)) {
                Set<PosixFilePermission> defaultPosixPermissions = new HashSet<>();

                defaultPosixPermissions.add(PosixFilePermission.OWNER_READ);
                defaultPosixPermissions.add(PosixFilePermission.OWNER_WRITE);
                defaultPosixPermissions.add(PosixFilePermission.GROUP_READ);
                defaultPosixPermissions.add(PosixFilePermission.OTHERS_READ);

                Files.createFile(functionFile);
                Files.setPosixFilePermissions(functionFile, defaultPosixPermissions);  //Assure the permissions again after the file is created
                // 사용자 인풋 값 추가
                ArrayList<String> messageList = new ArrayList<>();
                byte[] decodedBytes = java.util.Base64.getDecoder().decode(functionContent.getBytes());
                messageList.add(new String(decodedBytes, StandardCharsets.UTF_8));

                Files.write(functionFile, messageList, StandardCharsets.UTF_8);
            }
        }
    }

    public void callFunction(String functionKey) throws IOException {
        List<EnvVar> envVars = new ArrayList<>();
        HashMap<String, String> annoMap = new HashMap<>();

        Long timeout = 0L;
        Function function = functionRepository.findByFunctionKey(functionKey).orElseThrow(() -> new ResourceNotFoundException("펑션키를 확인해주세요"));

        List<FunctionEnvironment> environments = functionEnvironmentRepository.findByFunction(function);
        //해당 환경을 기준으로 옵션을 셋팅함.
        FunctionDTO.Register reqDto = new FunctionDTO.Register();
        if (CollectionUtils.isEmpty(environments)) {
            //디폴트값으로 세팅
            throw new RuntimeException("환경구성 새로 저장해주세요.");
        } else {
            reqDto.setRuntime(function.getRuntime());
            environments.stream().forEach(functionEnvironment -> setFunctionEnvironment(functionEnvironment, envVars, reqDto));
        }
        log.info(reqDto.toString());
        timeout=Long.parseLong(reqDto.getLimitTimeMinute())*60L+Long.parseLong(reqDto.getLimitTimeSecond());
        log.info("timeout print : "+timeout);

        /* 클라우드 로깅용 어노테이션 추가 */
        if ("Y".equals(function.getLogEnableYn())) {
            annoMap.put(BASE_URL + "/functionKey", functionKey);
        }

        if ("Y".equals(reqDto.getColdStartYn())) {
            annoMap.put("autoscaling.knative.dev/minScale", "1");
        }
        String managerFileName = generateManagerFileName(reqDto);
        String functionFileName = generateFunctionFileName(reqDto);
        String image = "";
        String mountPath = "";
        String execPath = "";
        String subPath = "";
        ContainerPort containerPorts = null;

        String[] runtimeSlice;
        String strRuntimeName = reqDto.getRuntime();
        if (strRuntimeName.contains(":") == false) {
            throw new RuntimeException("유효하지 않은 런타임 형식입니다.");
        } else {
            runtimeSlice = reqDto.getRuntime().split(":");

            if(runtimeSlice.length != 2) {
                throw new RuntimeException("유효하지 않은 런타임 형식입니다.");
            }
            else if(runtimeSlice[0].isEmpty() || runtimeSlice[1].isEmpty()){
                throw new RuntimeException("런타임 이름 혹은 버전이 지정되지 않았습니다.");
            }
        }

        Collection<String> commands = new ArrayList<>();
        Collection<String> initCommands = new ArrayList<>();

        switch (runtimeSlice[0]) {
            case "Node.js":
                image = "scf-nodejs:" + runtimeSlice[1];
                commands.add("node");
                commands.add("/usr/src/serverless/function/" + managerFileName);
                mountPath = "/usr/src/serverless/function";
                break;
            case "Python":
                image = "scf-python:" + runtimeSlice[1];
                commands.add("python");
                commands.add("/usr/src/serverless/" + managerFileName);
                mountPath = "/usr/src/serverless";
                break;
            case "PHP":
                image = "scf-php:" + runtimeSlice[1];
                mountPath = "/var/www/html";
                break;
            case "Java":
                image = "scf-java:" + runtimeSlice[1];
                commands.add("java");
                commands.add("-jar");
                commands.add("/usr/lib/" + managerFileName); // API Controller <-> Handler 분리
                mountPath = "/usr/src/serverless";

                // CLASS_NAME, METHOD_NAME 환경변수에 추가
                SourceFile sourceFile = sourceFileRepository.findByFunction(function).orElseThrow(() -> new ResourceNotFoundException("유효한 소스파일 데이터가 존재하지 않습니다."));
                envVars.add(new EnvVar("CLASS_NAME", sourceFile.getClassName(), null));
                envVars.add(new EnvVar("METHOD_NAME", sourceFile.getMethodName(), null));
                break;
            case "Go":
                image = "scf-go:" + runtimeSlice[1];
                initCommands.add("/bin/bash");
                initCommands.add("-c");
                initCommands.add("/usr/src/test.sh");
                commands.add("/bin/bash");
                commands.add("-c");
                commands.add("/usr/src/serverless/manager");
                mountPath = "/usr/src/functioncode";
                execPath = "/usr/src/serverless";
                break;
            default:
                throw new RuntimeException("지원하지 않는 런타임입니다.");
        }
        
        subPath = function.getName();
        containerPorts = new ContainerPortBuilder()
                .withContainerPort(8080)
                .build();

        Collection<String> dropCap = new ArrayList<>();
        dropCap.add("all");

        log.info("image = " + image);
        log.info("repository = " + repository);
        log.info("commands = " + repository.concat("/").concat(image));
        log.info("commands = " + reqDto);
        log.info("envVars = " + envVars);
        log.info("timeout = " +timeout);

        Service service = new Service();

        if (runtimeSlice[0].equals("Go")) { // Go 런타임 (Init Container 기반)
            service = new ServiceBuilder()
                    .withNewMetadata()
                    .withName(function.getName())
                    .withNamespace(function.getName())
                    .endMetadata()
                    .withNewSpec()
                    .withNewTemplate()
                    .withNewMetadata()
                    .withAnnotations(annoMap)
                    .endMetadata()
                    .withNewSpec()
                    .withTimeoutSeconds(timeout)
                    .addNewInitContainer() // Start InitContainer
                    .withImage(repository.concat("/").concat(image))
                    .withNewSecurityContext()
                    .withRunAsUser(0L)
                    .endSecurityContext()
                    .addAllToCommand(initCommands)
                    .addNewVolumeMount().withName(volumeName)
                    .withMountPath(mountPath)
                    .withSubPath(subPath)
                    .endVolumeMount()
                    .addNewVolumeMount().withName(sharedVolumeName)
                    .withMountPath(execPath)
                    .endVolumeMount()
                    .endInitContainer() // End InitContainer
                    .addNewContainer()
                    .withImage(repository.concat("/").concat(image))
                    .withEnv(envVars)
                    .withNewResources()
                    .addToLimits("memory", new Quantity(reqDto.getMemory()))
                    .addToRequests("memory", new Quantity(reqDto.getMemory()))
                    .endResources()
                    .withNewSecurityContext()
                    .withNewCapabilities()
                    .addAllToDrop(dropCap)
                    .endCapabilities()
                    .withRunAsUser(61000L) // functionUser (UID)
                    .withRunAsNonRoot(true)
                    .endSecurityContext()
                    .addAllToCommand(commands)
                    .addNewVolumeMount().withName(sharedVolumeName)
                    .withMountPath(execPath)
                    .endVolumeMount()
                    .withPorts(containerPorts)
                    .endContainer()
                    .addNewVolume().withName(volumeName)
                    .withNewPersistentVolumeClaim()
                    .withClaimName(volumeName)
                    .withReadOnly(false)
                    .endPersistentVolumeClaim()
                    .and()
                    .addNewVolume().withName(sharedVolumeName)
                    .withNewEmptyDir()
                    .endEmptyDir()
                    .and()
                    .endSpec()
                    .endTemplate()
                    .endSpec()
                    .build();
        } else { // Node.js, Python, PHP, Java 런타임
            service = new ServiceBuilder()
                    .withNewMetadata()
                    .withName(function.getName())
                    .withNamespace(function.getName())
                    .endMetadata()
                    .withNewSpec()
                    .withNewTemplate()
                    .withNewMetadata()
                    .withAnnotations(annoMap)
                    .endMetadata()
                    .withNewSpec()
                    .withTimeoutSeconds(timeout)
                    .addNewContainer()
                    .withImage(repository.concat("/").concat(image))
                    .withEnv(envVars)
                    .withNewResources()
                    .addToLimits("memory", new Quantity(reqDto.getMemory()))
                    .addToRequests("memory", new Quantity(reqDto.getMemory()))
                    .endResources()
                    .withNewSecurityContext()
                    .withNewCapabilities()
                    .addAllToDrop(dropCap)
                    .endCapabilities()
                    .withRunAsUser(61000L) // functionUser (UID)
                    .withRunAsNonRoot(true)
                    .endSecurityContext()
                    .addAllToCommand(commands)
                    .addNewVolumeMount().withName(volumeName)
                    .withMountPath(mountPath)
                    .withReadOnly(true)
                    .withSubPath(subPath)
                    .endVolumeMount()
                    .withPorts(containerPorts)
                    .endContainer()
                    .addNewVolume().withName(volumeName)
                    .withNewPersistentVolumeClaim()
                    .withClaimName(volumeName)
                    .withReadOnly(true)
                    .endPersistentVolumeClaim()
                    .and()
                    .endSpec()
                    .endTemplate()
                    .endSpec()
                    .build();
        }

        log.debug("Working Directory = " + System.getProperty("user.home"));

        // 2023.11.28 gyeongyeol
        // 함수 코드가 없는 Java Runtime인 경우에 대해서 코드 조회를 skip하도록 분기 로직 추가
        if (StringUtils.isEmpty(function.getContent()) && !function.getRuntime().startsWith("Java")) {
            throw new RuntimeException("코드 입력후 펑션호출이 필요합니다.");
        }

        // 2024.03.05 gyeongyeol
        // 런타임 핸들러 메소드 분리 - Manager Code File 생성
        String managerFileContent = generateManagerFileContent(runtimeSlice[0]);
        generateFileInfo(managerFileName, subPath, managerFileContent, runtimeSlice[0]);
        // Handler Function Code File 생성
        generateFileInfo(functionFileName, subPath, function.getContent(), runtimeSlice[0]);

        // Go 런타임 - 함수 실행 파일 초기화
        if (runtimeSlice[0].equals("Go")) {
            //사용자 경로
            String path = "/mb_scf/serverless" + "/"
                    + subPath + "/"
                    + "manager";

            log.info("path = " + path);

            AppUtil.deleteFile(path);
        }

        log.info("함수실행");
        log.info(service + "");
        kn.services().inNamespace(function.getName()).withName(function.getName()).delete();
        Service patch = kn.services().withName(function.getName()).patch(PatchContext.of(PatchType.SERVER_SIDE_APPLY), service);
        if(patch.getStatus()!=null){
            log.info("결과상태 확인" + patch.getStatus().getConditions());
        }
    }

    private String generateManagerFileContent(String runtime) {
        if (runtime.equals("Node.js")) {
            return nodejsManagerCode;
        } else if (runtime.equals("Python")) {
            return pythonManagerCode;
        } else if (runtime.equals("PHP")) {
            return phpManagerCode;
        } else if (runtime.equals("Java")) {
            return ""; // DO NOT ANYTHING...
        } else if (runtime.equals("Go")) {
            return golangManagerCode;
        } else {
            throw new RuntimeException(FILE_TYPE_EXCEPTION);
        }
    }
}
