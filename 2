package com.scf.manager.mvc.service;

import com.nimbusds.jwt.SignedJWT;
import io.fabric8.istio.api.security.v1beta1.*;
import io.fabric8.istio.api.type.v1beta1.WorkloadSelectorBuilder;
import io.fabric8.istio.client.DefaultIstioClient;
import io.fabric8.istio.client.IstioClient;
import io.fabric8.kubernetes.client.dsl.base.PatchContext;
import io.fabric8.kubernetes.client.dsl.base.PatchType;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONObject;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Slf4j
@Service
public class IstioCallService {
    public void makeIstioPolicy(String functionName, List<String> ipAddress) {


        List<Condition> remoteIpsConditions = new ArrayList<>();
        remoteIpsConditions.add(new ConditionBuilder()
                .withKey("request.headers[Host]")
                .withValues(functionName + "*")
                .build());
        if (!CollectionUtils.isEmpty(ipAddress)) {
            remoteIpsConditions.add(new ConditionBuilder()
                    .withKey("remote.ip")
                    .withNotValues(ipAddress)
                    .build());
        }


        //펑션을 업데이트 한후 istio 에 구성
        IstioClient istioClient = new DefaultIstioClient();
        AuthorizationPolicy service = new AuthorizationPolicyBuilder()
                .withNewMetadata()
                .withName(functionName)
                .withNamespace("istio-system")
                .endMetadata()
                .withNewSpec()

                .withSelector(new WorkloadSelectorBuilder().withMatchLabels(
                        Collections.singletonMap("istio", "ingressgateway")).build())
                .withAction(AuthorizationPolicyAction.DENY)
                .withRules(new RuleBuilder()
                        .withWhen(remoteIpsConditions)
                        .build())
                .endSpec()
                .build();
        //기본적으로 삭제하고 다시 생성하는 정책
        istioClient.v1beta1().authorizationPolicies().inNamespace("istio-system").withName(functionName).delete();

        AuthorizationPolicy aDefault = istioClient.v1beta1()
                .authorizationPolicies()
                .inNamespace("istio-system")
                .withName(functionName)
                .patch(PatchContext.of(PatchType.SERVER_SIDE_APPLY), service);
    }

    public void enrollIstioToken(String functionName, String jwk, String jwt) throws ParseException {

        //펑션을 업데이트 한후 istio 에 구성
        IstioClient istioClient = new DefaultIstioClient();

        JWTRule jwtRule = new JWTRule();
        jwtRule.setIssuer("https://scp.com");
        jwtRule.setJwks(jwk);

        RequestAuthentication service = new RequestAuthenticationBuilder()
                .withNewMetadata()
                .withName(functionName)
                .withNamespace(functionName)
                .endMetadata()
                .withNewSpec()
                .withSelector(new WorkloadSelectorBuilder().withMatchLabels(
                        Collections.singletonMap("serving.knative.dev/service", functionName)).build())
                .withJwtRules(jwtRule).endSpec().build();

        istioClient.v1beta1()
                .requestAuthentications()
                .inNamespace(functionName)
                .withName(functionName)
                .patch(PatchContext.of(PatchType.SERVER_SIDE_APPLY), service);
        //헬스 체크 용도

        AuthorizationPolicy healthAllowPolicy = new AuthorizationPolicyBuilder()
                .withNewMetadata()
                .withName(functionName)
                .withNamespace(functionName)
                .endMetadata()
                .withNewSpec()
                .withSelector(new WorkloadSelectorBuilder().withMatchLabels(
                        Collections.singletonMap("serving.knative.dev/service", functionName)).build())
                .withRules(
                        new RuleBuilder()
                                .withFrom(
                                        new RuleFromBuilder()
                                                .withSource(new SourceBuilder().withRequestPrincipals("*").build())
                                                .build()
                                ).build(),
                        new RuleBuilder()
                                .withTo(
                                        new RuleToBuilder().withOperation(new OperationBuilder().withPaths("/healthz").build()).build(),
                                        new RuleToBuilder().withOperation(new OperationBuilder().withPaths("/metrics").build()).build()
                                )
                                .build()
                )
                .endSpec()
                .build();

        AuthorizationPolicy aDefault = istioClient.v1beta1()
                .authorizationPolicies()
                .inNamespace(functionName)
                .withName(functionName)
                .patch(PatchContext.of(PatchType.SERVER_SIDE_APPLY), healthAllowPolicy);
        log.info("aDefault = " + aDefault);
    }

    public void deleteIstioPolicy(String functionName) {
        IstioClient istioClient = new DefaultIstioClient();
        istioClient.v1beta1().authorizationPolicies().inNamespace("istio-system").withName(functionName).delete();
        istioClient.v1beta1().authorizationPolicies().inNamespace(functionName).withName(functionName).delete();
        istioClient.v1beta1().requestAuthentications().inNamespace(functionName).withName(functionName).delete();
    }
}
