[PR] Istio Policy 및 인증 관련 코드 리팩토링

📌 개요

이번 PR에서는 IstioCallService 클래스의 코드 품질을 향상시키기 위해 리팩토링 및 클린 코드 적용을 수행하였습니다.
기존 코드에서 발생할 수 있는 메모리 누수 방지, 코드 중복 제거, 단일 책임 원칙 준수, 가독성 및 유지보수성 개선을 주요 목표로 하였습니다.

🔧 개발 내용

1. try-with-resources를 사용하여 IstioClient의 안전한 사용 보장 (메모리 누수 방지)

IstioClient는 네트워크 연결을 사용하므로, 명시적으로 닫아줘야 합니다.

기존 코드에서는 new DefaultIstioClient()를 직접 생성하고 사용 후 닫지 않아 메모리 누수(memory leak) 가능성이 있었습니다.

try-with-resources를 사용하여 자동으로 리소스를 해제하도록 개선하였습니다.

출처: Java 공식 문서 - Try-with-resources



2. 중복 코드 제거 및 재사용 가능하도록 메서드 분리

정책(AuthorizationPolicy, RequestAuthentication) 삭제 로직이 makeIstioPolicy, enrollIstioToken, deleteIstioPolicy에서 반복되고 있었습니다.

deleteIstioPolicy() 및 deleteRequestAuthentication()를 별도 메서드로 분리하여 중복 제거.

정책을 적용하는 로직 또한 applyAuthorizationPolicy(), applyRequestAuthentication()로 추출하여 재사용성을 높임.



3. 단일 책임 원칙(SRP) 적용

makeIstioPolicy(), enrollIstioToken()에서 여러 역할을 수행하고 있었음.

역할을 분리하여 다음과 같이 개선하였음:

createRemoteIpConditions() → IP 기반 AuthorizationPolicy 조건 생성

createAuthorizationPolicy() → AuthorizationPolicy 객체 생성

createRequestAuthentication() → RequestAuthentication 객체 생성

createHealthCheckPolicy() → 헬스 체크 관련 AuthorizationPolicy 객체 생성




4. 매직 스트링 및 매직 넘버 제거

"istio-system", "serving.knative.dev/service" 등의 문자열을 private static final String으로 선언하여 가독성과 유지보수성 향상.





---

📢 메서드별 변경점 및 개선 사항

1️⃣ makeIstioPolicy(String functionName, List<String> ipAddress)

🔹 변경점

try-with-resources를 사용하여 IstioClient를 안전하게 관리하도록 개선.

createRemoteIpConditions()와 createAuthorizationPolicy()를 분리하여 코드 가독성을 높이고 단일 책임 원칙(SRP) 준수.

정책을 적용하는 로직을 applyAuthorizationPolicy()로 통합하여 중복 제거.


✅ 개선 이유

메모리 누수 방지

중복 코드 제거 및 가독성 향상

단일 책임 원칙 준수



---

2️⃣ createRemoteIpConditions(String functionName, List<String> ipAddress)

🔹 변경점

기존 makeIstioPolicy() 내에서 직접 List<Condition>을 생성하던 부분을 별도 메서드로 분리.


✅ 개선 이유

재사용성 증가: 동일한 조건이 필요한 경우 다른 곳에서도 쉽게 사용 가능.

가독성 향상: makeIstioPolicy() 내에서 로직이 간결해짐.



---

3️⃣ createAuthorizationPolicy(String functionName, List<Condition> conditions)

🔹 변경점

AuthorizationPolicy 객체를 생성하는 로직을 별도 메서드로 분리.


✅ 개선 이유

책임 분리: makeIstioPolicy()에서 정책 생성과 적용을 분리하여 단일 책임 원칙 준수.

재사용성 증가: 동일한 패턴의 정책이 필요할 때 쉽게 확장 가능.



---

4️⃣ enrollIstioToken(String functionName, String jwk)

🔹 변경점

try-with-resources를 사용하여 IstioClient를 안전하게 사용하도록 개선.

JWT 인증 관련 객체를 createRequestAuthentication()에서 생성하도록 분리.

/healthz, /metrics를 허용하는 AuthorizationPolicy를 createHealthCheckPolicy()로 분리.

applyRequestAuthentication()와 applyAuthorizationPolicy()를 사용하여 코드 중복 제거.


✅ 개선 이유

메모리 누수 방지

코드 중복 제거 및 유지보수성 향상

SRP 적용으로 역할 분리



---

5️⃣ createRequestAuthentication(String functionName, String jwk)

🔹 변경점

JWT 인증 관련 객체(RequestAuthentication) 생성을 별도의 메서드로 분리.


✅ 개선 이유

재사용성 증가: 다른 서비스에도 동일한 JWT 인증 적용 가능.

가독성 향상: enrollIstioToken() 내에서 JWT 인증 관련 로직이 분리됨.



---

6️⃣ createHealthCheckPolicy(String functionName)

🔹 변경점

/healthz, /metrics 엔드포인트에 대한 접근을 허용하는 AuthorizationPolicy 생성 로직을 분리.


✅ 개선 이유

가독성 향상 및 역할 분리

재사용 가능: 헬스 체크 정책이 필요할 경우 쉽게 사용 가능.



---

7️⃣ applyAuthorizationPolicy(IstioClient istioClient, String namespace, AuthorizationPolicy policy)

🔹 변경점

istioClient를 사용하여 AuthorizationPolicy를 적용하는 공통 메서드로 분리.


✅ 개선 이유

중복 코드 제거

가독성 향상 및 재사용성 증가



---

8️⃣ applyRequestAuthentication(IstioClient istioClient, String namespace, RequestAuthentication auth)

🔹 변경점

RequestAuthentication을 적용하는 로직을 별도의 메서드로 분리.


✅ 개선 이유

재사용성 증가: 여러 곳에서 JWT 인증을 적용할 때 쉽게 사용 가능.

중복 코드 제거 및 유지보수성 향상



---

9️⃣ deleteIstioPolicy(String functionName)

🔹 변경점

try-with-resources를 사용하여 IstioClient를 안전하게 닫도록 변경.

deleteIstioPolicy(istioClient, namespace, policyName) 및 deleteRequestAuthentication(istioClient, namespace, authName)를 사용하여 중복 제거.


✅ 개선 이유

메모리 누수 방지

중복 코드 제거 및 유지보수성 향상



---

🔟 deleteIstioPolicy(IstioClient istioClient, String namespace, String policyName)

🔹 변경점

AuthorizationPolicy 삭제 로직을 별도의 메서드로 분리.


✅ 개선 이유

재사용성 증가

코드 가독성 향상



---

1️⃣1️⃣ deleteRequestAuthentication(IstioClient istioClient, String namespace, String authName)

🔹 변경점

RequestAuthentication 삭제 로직을 별도의 메서드로 분리.


✅ 개선 이유

재사용성 증가

가독성 향상 및 코드 유지보수 용이



---

📌 마무리

이번 리팩토링을 통해 코드의 가독성, 유지보수성, 재사용성을 향상시켰습니다.
또한, try-with-resources를 사용하여 메모리 누수 방지를 구현하였고, 중복 코드 제거 및 SRP 원칙 적용으로 더 클린한 코드 구조를 만들었습니다. 🚀

PR 검토 후 추가 의견 있으면 언제든지 피드백 부탁드립니다! 😊

