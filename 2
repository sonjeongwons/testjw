package com.scf.manager.mvc.service;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;
import com.scf.manager.base.domain.FunctionCode;
import com.scf.manager.base.repository.FunctionCodeRepository;
import com.scf.manager.common.enums.TypeEnums;
import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.common.util.AppUtil;
import com.scf.manager.common.util.UrlUtil;
import com.scf.manager.mvc.domain.AllowIp;
import com.scf.manager.mvc.domain.Function;
import com.scf.manager.mvc.domain.FunctionEnvironment;
import com.scf.manager.mvc.domain.KeyManager;
import com.scf.manager.mvc.dto.*;
import com.scf.manager.mvc.repository.*;
import io.fabric8.istio.api.security.v1beta1.*;
import io.fabric8.istio.api.type.v1beta1.WorkloadSelectorBuilder;
import io.fabric8.istio.client.DefaultIstioClient;
import io.fabric8.istio.client.IstioClient;
import io.fabric8.knative.client.DefaultKnativeClient;
import io.fabric8.knative.client.KnativeClient;
import io.fabric8.knative.serving.v1.Service;
import io.fabric8.knative.serving.v1.ServiceBuilder;
import io.fabric8.knative.serving.v1.ServiceList;
import io.fabric8.knative.sources.v1.PingSource;
import io.fabric8.knative.sources.v1.PingSourceBuilder;
import io.fabric8.kubernetes.api.model.ContainerPort;
import io.fabric8.kubernetes.api.model.ContainerPortBuilder;
import io.fabric8.kubernetes.api.model.EnvVar;
import io.fabric8.kubernetes.api.model.Quantity;
import io.fabric8.kubernetes.client.dsl.base.PatchContext;
import io.fabric8.kubernetes.client.dsl.base.PatchType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.text.ParseException;
import java.util.*;
import java.util.stream.Collectors;

import static com.scf.manager.common.constants.ExceptionConst.FILE_HANDLE_EXCEPTION;
import static com.scf.manager.common.constants.ExceptionConst.FILE_TYPE_EXCEPTION;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class FunctionCronService {

    private final FunctionRepository functionRepository;
    private final DefaultKnativeClient kn;

    @Transactional
    public FunctionDTO.Response registerCron(FunctionDTO.Register reqDto) {

        /* TODO:
            1. Cron Trigger를 위한 Domain, DTO 설정 (공통)
            2. inputDTO 내용을 토대로 Cron 데이터 insert (into DB)
            3. inputDTO 내용을 토대로 PingSource 리소스 생성
         */

        if (StringUtils.isEmpty(reqDto.getFunctionKey())) {
            throw new RuntimeException("펑션키를 입력해주세요.");
        }

        Function function = functionRepository.findByFunctionKeyAndDelYnAndFunctionStatus(reqDto.getFunctionKey(), "N", TypeEnums.FunctionStatus.READY).orElseThrow(() -> new ResourceNotFoundException("유효한 펑션이 존재하지않습니다."));

        this.makePingSource(function.getName(), "Asia/Seoul", "* * * * *");

        FunctionDTO.Response response = new FunctionDTO.Response();
        response.setFunctionKey(reqDto.getFunctionKey());

        return response;
    }

    @Transactional
    public FunctionDTO.Response modifyCron(FunctionDTO.Modify reqDto, String functionKey) {

        /* TODO:
            1. Cron Trigger를 위한 Domain, DTO 설정 (공통)
            2. inputDTO 의 functionKey로 함수 상태 체크한 후 Cron 데이터 Update (from DB)
            3. inputDTO 내용을 토대로 PingSource 리소스 업데이트
         */

        Function function = functionRepository.findByFunctionKeyAndDelYnAndFunctionStatus(functionKey, "N", TypeEnums.FunctionStatus.READY).orElseThrow(() -> new ResourceNotFoundException("유효한 펑션이 존재하지않습니다."));

        this.makePingSource(function.getName(), "Asia/Seoul", "* * * * *"   );

        FunctionDTO.Response response = new FunctionDTO.Response();
        response.setFunctionKey(reqDto.getFunctionKey());

        return response;
    }

    @Transactional
    public void deleteCron(String functionKey) {
        /* TODO:
            1. Cron Trigger를 위한 Domain, DTO 설정 (공통)
            2. inputDTO 의 functionKey로 함수 상태 체크한 후 Cron 데이터 Delete (from DB)
            3. PingSource 리소스 삭제
         */

        Function function = functionRepository.findByFunctionKeyAndDelYnAndFunctionStatus(functionKey, "N", TypeEnums.FunctionStatus.READY).orElseThrow(() -> new ResourceNotFoundException("유효한 펑션이 존재하지않습니다."));
        this.deletePingSource(function);
    }



    public void makePingSource(String functionName, String timezone, String schedule) {
        PingSource pingSource = new PingSourceBuilder()
                .withNewMetadata()
                .withName(functionName)
                .withNamespace(functionName)
                .endMetadata()
                .withNewSpec()
                .withSchedule(schedule)
                .withTimezone(timezone)
                .withContentType("application/json")
                .withData("{\"message\": \"Hello World from Ping!\"}")
                .withNewSink()
                .withNewRef()
                .withApiVersion("serving.knative.dev/v1")
                .withKind("Service")
                .withName(functionName)
                .endRef()
                .endSink()
                .endSpec()
                .build();


        kn.pingSources().inNamespace(functionName).withName(functionName).delete();
        PingSource patch = kn.pingSources().withName(functionName).patch(PatchContext.of(PatchType.SERVER_SIDE_APPLY), pingSource);

        if (patch.getStatus() != null) {
            log.info("결과상태 확인" + patch.getStatus().getConditions());
        }

    }


    public void deletePingSource(Function function) {
        kn.pingSources().inNamespace(function.getName()).withName(function.getName()).delete();
    }

}
