package com.scf.manager.mvc.api;

import com.scf.manager.mvc.dto.FileManagerDTO;
import com.scf.manager.mvc.service.FileManagerService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.List;

@Slf4j
@Tag(name = "파일매니저 관리 API",description = "파일매니저 관리 API")
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/v1/filemanager")
public class FileManagerApiController {
	private final FileManagerService fileManagerService;

    @PostMapping("")
    @Operation(summary = "파일매니저 단건 등록", description = "파일매니저 단건을 등록합니다")
    public ResponseEntity<FileManagerDTO.Response> registerFileManager(@Valid @RequestBody FileManagerDTO.Register reqDto) {
        FileManagerDTO.Response response = fileManagerService.registerFileManager(reqDto);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @GetMapping("")
    @Operation(summary = "파일매니저 전체 목록 조회", description = "파일매니저 전체 목록을 조회합니다")
    public ResponseEntity<Page<FileManagerDTO.Response>> searchAllFileManager(FileManagerDTO.Search reqDto) {
        Page<FileManagerDTO.Response> response = fileManagerService.searchAllFileManager(reqDto);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @GetMapping("/{fileSeq}")
    @Operation(summary = "파일매니저 단건 조회", description = "파일매니저 단건을 조회합니다")
    @Parameters({
            @Parameter(name = "fileSeq", description = "파일 일련번호", required = true, example = "1"),
    })
    public ResponseEntity<FileManagerDTO.Response> searchFileManager(@PathVariable("fileSeq") Long fileSeq) {
        FileManagerDTO.Response response = fileManagerService.searchFileManager(fileSeq);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @PutMapping("/{fileSeq}")
    @Operation(summary = "파일매니저 단건 수정", description = "파일매니저 단건을 수정합니다")
    @Parameters({
            @Parameter(name = "fileSeq", description = "파일 일련번호", required = true, example = "1"),
    })
    public ResponseEntity<FileManagerDTO.Response> modifyFileManager(@PathVariable("fileSeq") Long fileSeq
                                          , @Valid @RequestBody FileManagerDTO.Modify reqDto) {
        FileManagerDTO.Response response = fileManagerService.modifyFileManager(fileSeq, reqDto);
        return ResponseEntity.status(HttpStatus.RESET_CONTENT).body(response);
    }

    @PostMapping("multiple")
    @Operation(summary = "파일 다건 등록", description = "파일을 다건으로 등록합니다")
    public ResponseEntity<List<FileManagerDTO.Response>> saveImage(@RequestPart("files") List<MultipartFile> files) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        return ResponseEntity.status(HttpStatus.OK).body(fileManagerService.uploadFiles(files));
    }
    @PostMapping("single")
    @Operation(summary = "파일 단건 등록", description = "파일을 다건으로 등록합니다")
    public ResponseEntity<FileManagerDTO.Response> saveImage(@RequestPart("file") MultipartFile file) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        return ResponseEntity.status(HttpStatus.OK).body(fileManagerService.uploadFile(file));
    }
}
