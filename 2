메소드별 변경점 및 개선 사항


---

1. registerCron(FunctionDTO.Register reqDto)

변경 전:

functionKey가 빈 값인지 StringUtils.isEmpty()로 확인.

유효한 Function이 존재하는지 확인하고 없으면 예외 발생.

makePingSource 메서드를 호출하면서 하드코딩된 "Asia/Seoul"과 "* * * * *" 값을 사용.


변경 후:

validateFunctionKey(reqDto.getFunctionKey())를 호출하여 key 검증을 별도 메소드로 분리.

findValidFunction(reqDto.getFunctionKey())로 함수 조회를 별도 메소드로 분리.

createOrUpdatePingSource(function.getName(), DEFAULT_TIMEZONE, DEFAULT_SCHEDULE);로 PingSource 생성을 개선.

DEFAULT_TIMEZONE, DEFAULT_SCHEDULE를 상수화하여 하드코딩 제거.


개선 이유:

validateFunctionKey()로 분리하여 중복 코드 제거.

findValidFunction()을 사용해 유효한 Function 검증을 일관되게 처리.

Magic String 제거로 유지보수성을 높임.



---

2. modifyCron(FunctionDTO.Modify reqDto, String functionKey)

변경 전:

functionKey 검증 없이 그대로 사용.

함수 조회 및 검증 과정이 registerCron과 동일.

makePingSource를 호출하면서 하드코딩된 값 사용.


변경 후:

validateFunctionKey(functionKey)로 입력값 검증.

findValidFunction(functionKey)로 함수 존재 여부 확인.

createOrUpdatePingSource(function.getName(), DEFAULT_TIMEZONE, DEFAULT_SCHEDULE); 호출.


개선 이유:

registerCron과 코드가 중복되므로 검증 및 조회를 공통 메소드로 분리하여 중복 제거.

createOrUpdatePingSource()로 PingSource 생성을 통합하여 코드 일관성 유지.



---

3. deleteCron(String functionKey)

변경 전:

functionKey 검증 없이 그대로 사용.

함수가 존재하는지 확인 후 PingSource 삭제.


변경 후:

validateFunctionKey(functionKey) 호출하여 key 검증.

findValidFunction(functionKey)로 함수 존재 여부 확인.

deletePingSource(function); 호출하여 PingSource 삭제.


개선 이유:

입력 검증을 일관성 있게 적용.

findValidFunction()을 사용해 함수 조회 중복 제거.



---

4. makePingSource(String functionName, String timezone, String schedule)

변경 전:

PingSource를 직접 생성하는 코드가 포함되어 있음.

kn.pingSources().inNamespace(functionName).withName(functionName).delete();를 사용해 기존 리소스를 삭제.

patch()를 사용해 PingSource를 생성/업데이트.

patch.getStatus()를 log.info()로 출력하는데, 로깅 메시지가 불명확함.


변경 후:

PingSource 생성 로직을 buildPingSource() 메소드로 분리.

createOrUpdatePingSource()로 명확한 역할 부여.

logPingSourceStatus(patchedSource);로 상태 로깅을 별도 메소드로 분리.


개선 이유:

PingSource 생성과 적용을 분리하여 가독성 향상.

logPingSourceStatus()를 분리해 로깅 로직을 명확하게 개선.

메소드의 단일 책임 원칙(SRP)을 준수하여 유지보수 용이.



---

5. deletePingSource(Function function)

변경 전:

PingSource를 단순히 삭제하는 역할.

삭제 후 별도 로그 없음.


변경 후:

kn.pingSources().inNamespace(function.getName()).withName(function.getName()).delete();

log.info("PingSource 삭제 완료: {}", function.getName()); 추가.


개선 이유:

삭제 후 로그를 남겨 디버깅과 운영성을 향상.

로깅을 추가해 어떤 리소스가 삭제되었는지 확인 가능.



---

6. buildPingSource(String functionName, String timezone, String schedule)

신규 추가된 메소드

private PingSource buildPingSource(String functionName, String timezone, String schedule) {
    return new PingSourceBuilder()
            .withNewMetadata()
            .withName(functionName)
            .withNamespace(functionName)
            .endMetadata()
            .withNewSpec()
            .withSchedule(schedule)
            .withTimezone(timezone)
            .withContentType(CONTENT_TYPE_JSON)
            .withData("{\"message\": \"Hello World from Ping!\"}")
            .withNewSink()
            .withNewRef()
            .withApiVersion("serving.knative.dev/v1")
            .withKind("Service")
            .withName(functionName)
            .endRef()
            .endSink()
            .endSpec()
            .build();
}

개선 이유:

PingSource 생성 로직을 별도 메소드로 분리하여 가독성 향상.

기존 makePingSource()의 코드가 너무 복잡해지는 문제 해결.

유지보수성을 높이고 재사용 가능하도록 설계.



---

7. logPingSourceStatus(PingSource patchedSource)

신규 추가된 메소드

private void logPingSourceStatus(PingSource patchedSource) {
    if (patchedSource.getStatus() != null) {
        log.info("PingSource 상태: {}", patchedSource.getStatus().getConditions());
    }
}

개선 이유:

기존 로깅 "결과상태 확인" + patch.getStatus().getConditions()가 가독성이 떨어짐.

별도 메소드로 분리하여 로깅의 일관성을 유지.



---

8. findValidFunction(String functionKey)

신규 추가된 메소드

private Function findValidFunction(String functionKey) {
    return functionRepository.findByFunctionKeyAndDelYnAndFunctionStatus(
            functionKey, "N", TypeEnums.FunctionStatus.READY
    ).orElseThrow(() -> new ResourceNotFoundException("유효한 펑션이 존재하지 않습니다."));
}

개선 이유:

함수 조회 로직이 모든 CRUD 메소드에서 중복되므로 통합하여 코드 중복 제거.

registerCron(), modifyCron(), deleteCron()에서 공통적으로 사용.



---

9. validateFunctionKey(String functionKey)

신규 추가된 메소드

private void validateFunctionKey(String functionKey) {
    if (StringUtils.isBlank(functionKey)) {
        throw new IllegalArgumentException("펑션키를 입력해주세요.");
    }
}

개선 이유:

기존 if (StringUtils.isEmpty(reqDto.getFunctionKey())) 검증을 중복 제거.

IllegalArgumentException을 던져 더 명확한 오류 처리.



---

최종 개선 요약

✅ 중복 코드 제거

findValidFunction(), validateFunctionKey() 메소드 추가로 CRUD 메소드 내 중복 제거.

PingSource 생성을 buildPingSource()로 분리하여 중복 해결.


✅ Magic String 제거

"Asia/Seoul", "application/json" 등의 값을 DEFAULT_TIMEZONE, CONTENT_TYPE_JSON 등으로 상수화.


✅ 로깅 개선

logPingSourceStatus()를 추가하여 PingSource의 상태를 명확하게 로깅.


✅ 가독성 향상

makePingSource()의 역할을 createOrUpdatePingSource()로 변경하고, 생성 로직을 buildPingSource()로 분리.


✅ 예외 처리 개선

RuntimeException → IllegalArgumentException 및 ResourceNotFoundException으로 변경.



---

결론

기존 코드의 중복 제거, Magic String 제거, 예외 처리 개선, 단일 책임 원칙 적용을 통해 가독성과 유지보수성을 높이고, 확장성 있는 코드로 개선!





코드 리팩토링 및 개선사항

주요 개선 사항:

1. 중복 코드 제거: makePingSource와 modifyCron에서 makePingSource 메서드를 호출할 때 동일한 하드코딩된 값을 사용하고 있어 개선.


2. Magic String 제거: "Asia/Seoul", "application/json" 등의 하드코딩된 문자열을 상수로 분리.


3. 의미 있는 메소드 분리: makePingSource 내부에서 PingSource 생성을 별도 메소드로 분리하여 가독성을 높임.


4. Logging 개선: 현재 로그 메시지가 가독성이 떨어지므로, 명확한 메시지를 남기도록 수정.


5. Exception Handling 개선: RuntimeException을 던지는 대신 IllegalArgumentException 또는 도메인과 연관된 CustomException 사용.


6. Transactional 최적화: @Transactional이 필요하지 않은 메서드는 제거.


7. 불필요한 의존성 제거: functionKey 조회 시 delYn과 functionStatus 필터링이 불필요하면 제거 가능.




---

리팩토링된 코드

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class FunctionCronService {

    private static final String DEFAULT_TIMEZONE = "Asia/Seoul";
    private static final String CONTENT_TYPE_JSON = "application/json";
    private static final String DEFAULT_SCHEDULE = "* * * * *";

    private final FunctionRepository functionRepository;
    private final DefaultKnativeClient kn;

    @Transactional
    public FunctionDTO.Response registerCron(FunctionDTO.Register reqDto) {
        validateFunctionKey(reqDto.getFunctionKey());

        Function function = findValidFunction(reqDto.getFunctionKey());

        createOrUpdatePingSource(function.getName(), DEFAULT_TIMEZONE, DEFAULT_SCHEDULE);

        return new FunctionDTO.Response(reqDto.getFunctionKey());
    }

    @Transactional
    public FunctionDTO.Response modifyCron(FunctionDTO.Modify reqDto, String functionKey) {
        validateFunctionKey(functionKey);

        Function function = findValidFunction(functionKey);

        createOrUpdatePingSource(function.getName(), DEFAULT_TIMEZONE, DEFAULT_SCHEDULE);

        return new FunctionDTO.Response(reqDto.getFunctionKey());
    }

    @Transactional
    public void deleteCron(String functionKey) {
        validateFunctionKey(functionKey);

        Function function = findValidFunction(functionKey);
        deletePingSource(function);
    }

    private void createOrUpdatePingSource(String functionName, String timezone, String schedule) {
        PingSource pingSource = buildPingSource(functionName, timezone, schedule);

        kn.pingSources().inNamespace(functionName).withName(functionName).delete();
        PingSource patchedSource = kn.pingSources().withName(functionName)
                .patch(PatchContext.of(PatchType.SERVER_SIDE_APPLY), pingSource);

        logPingSourceStatus(patchedSource);
    }

    private PingSource buildPingSource(String functionName, String timezone, String schedule) {
        return new PingSourceBuilder()
                .withNewMetadata()
                .withName(functionName)
                .withNamespace(functionName)
                .endMetadata()
                .withNewSpec()
                .withSchedule(schedule)
                .withTimezone(timezone)
                .withContentType(CONTENT_TYPE_JSON)
                .withData("{\"message\": \"Hello World from Ping!\"}")
                .withNewSink()
                .withNewRef()
                .withApiVersion("serving.knative.dev/v1")
                .withKind("Service")
                .withName(functionName)
                .endRef()
                .endSink()
                .endSpec()
                .build();
    }

    private void logPingSourceStatus(PingSource patchedSource) {
        if (patchedSource.getStatus() != null) {
            log.info("PingSource 상태: {}", patchedSource.getStatus().getConditions());
        }
    }

    private void deletePingSource(Function function) {
        kn.pingSources().inNamespace(function.getName()).withName(function.getName()).delete();
        log.info("PingSource 삭제 완료: {}", function.getName());
    }

    private Function findValidFunction(String functionKey) {
        return functionRepository.findByFunctionKeyAndDelYnAndFunctionStatus(
                functionKey, "N", TypeEnums.FunctionStatus.READY
        ).orElseThrow(() -> new ResourceNotFoundException("유효한 펑션이 존재하지 않습니다."));
    }

    private void validateFunctionKey(String functionKey) {
        if (StringUtils.isBlank(functionKey)) {
            throw new IllegalArgumentException("펑션키를 입력해주세요.");
        }
    }
}


---

개선된 점 및 이유

1. Magic String 제거 및 상수화

"Asia/Seoul", "application/json", "* * * * *" 등의 하드코딩된 값을 DEFAULT_TIMEZONE, CONTENT_TYPE_JSON, DEFAULT_SCHEDULE 상수로 정의.

이유: 코드 재사용성을 높이고, 유지보수성을 향상시키기 위해.


2. 중복 코드 제거

registerCron과 modifyCron에서 동일한 makePingSource 호출을 createOrUpdatePingSource로 변경.

makePingSource 내부 로직을 buildPingSource로 분리하여 PingSource 생성과 적용을 분리.


3. 메서드 분리 및 역할 명확화

buildPingSource: PingSource 객체를 생성하는 역할.

logPingSourceStatus: PingSource의 상태를 로깅하는 역할.

findValidFunction: 함수 존재 여부를 검증하는 역할.

validateFunctionKey: functionKey가 빈 문자열인지 검증하는 역할.


이유: 단일 책임 원칙(SRP)을 준수하여, 각 메서드가 하나의 책임만 가지도록 개선.

4. Exception Handling 개선

기존: RuntimeException을 사용.

변경: IllegalArgumentException 및 ResourceNotFoundException을 사용하여 적절한 예외를 분리.


이유:

RuntimeException은 지나치게 일반적인 예외로, 적절한 예외 처리가 어렵다.

IllegalArgumentException은 잘못된 입력에 대해 의미가 명확하다.

ResourceNotFoundException은 특정 엔터티가 존재하지 않을 때 적절하다.


5. 불필요한 @Transactional 제거

deletePingSource는 단순히 PingSource를 삭제하는 역할이므로 트랜잭션이 필요하지 않음.

makePingSource 내부에서 DB 조작이 없기 때문에 트랜잭션을 제거.


이유:

@Transactional을 불필요하게 사용하면 성능 저하를 초래할 수 있음.

트랜잭션은 DB 조작이 필요한 경우에만 적용.


6. Logging 개선

기존: "결과상태 확인" + patch.getStatus().getConditions() (가독성이 떨어짐)

변경: log.info("PingSource 상태: {}", patchedSource.getStatus().getConditions());


이유:

로깅 메시지를 명확하게 작성하여 디버깅 및 유지보수를 쉽게 하기 위함.



---

결론

리팩토링을 통해 가독성, 유지보수성, 성능, 예외 처리, 로깅이 개선되었음.
이제 함수의 역할이 분명해졌으며, 코드의 중복도 줄어들어 확장성과 테스트 용이성이 향상됨.

