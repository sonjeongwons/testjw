package com.scf.manager.mvc.service;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.JWSSigner;
import com.nimbusds.jose.crypto.RSASSASigner;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import com.scf.manager.common.enums.TypeEnums;
import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.common.util.UrlUtil;
import com.scf.manager.mvc.domain.Function;
import com.scf.manager.mvc.domain.FunctionEnvironment;
import com.scf.manager.mvc.dto.FunctionDTO;
import com.scf.manager.mvc.dto.FunctionEnvironmentDTO;
import com.scf.manager.mvc.dto.TokenDTO;
import com.scf.manager.mvc.dto.UrlDTO;
import com.scf.manager.mvc.repository.FunctionEnvironmentRepository;
import com.scf.manager.mvc.repository.FunctionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.text.ParseException;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class FunctionEnvironmentService {
    private static final long YEAR_SIZE_100 = 60L * 1000 * 60 * 24 * 365 * 100;
    private static final int MAX_ENV_COUNT = 50;
    private static final int MIN_MEMORY_VALUE = 128;

    private static final int MAX_KEY_LENGTH = 50;
    private static final int MAX_VALUE_LENGTH = 50;

    private final FunctionRepository functionRepository;
    private final FunctionEnvironmentRepository functionEnvironmentRepository;
    private final FunctionService functionService;
    private final KnativeService knativeService;

    @Transactional
    public FunctionDTO.Response registerFunctionToken(String functionKey) throws ParseException, JOSEException {
        Function function = functionRepository.findByFunctionKey(functionKey).orElseThrow(() -> new ResourceNotFoundException("펑션키가 존재하지않습니다."));

        TokenDTO.Register reqDto = new TokenDTO.Register();
        reqDto.setFunction(function);
        reqDto.setKeyId(function.getFunctionKey());

        RSAKey rsaJWK = RSAKey.parse(functionService.registerJWK(reqDto));

        JWTClaimsSet claimsSet = new JWTClaimsSet.Builder()
                .subject(function.getName())
                .issuer("https://scp.com")
                .expirationTime(new Date(new Date().getTime() + YEAR_SIZE_100))
                .build();

        SignedJWT signedJWT = createSignedJWT(claimsSet, rsaJWK);
        String token = signedJWT.serialize();
        function.updateToken(token);

        return function.toDto();
    }

    private SignedJWT createSignedJWT(JWTClaimsSet claimsSet, RSAKey rsaJWK) throws JOSEException {
        JWSSigner signer = new RSASSASigner(rsaJWK);

        SignedJWT signedJWT = new SignedJWT(
                new JWSHeader.Builder(JWSAlgorithm.RS256).keyID(rsaJWK.getKeyID()).build(),
                claimsSet);
        // Compute the RSA signature
        signedJWT.sign(signer);

        return signedJWT;
    }

    public FunctionEnvironmentDTO.Response registerFunctionEnvironment(FunctionEnvironmentDTO.Register reqDto, Function function,AtomicInteger envCountChecker) {

        checkEnvironmentColdStart(reqDto);
        checkEnvironmentEnv(reqDto, envCountChecker);
        checkEnvironmentMemory(reqDto);
        checkEnvironmentLimit(reqDto);
        checkEnvironmentUrl(reqDto);
        checkEnvironmentToken(reqDto);

        reqDto.setFunctionSeq(function.getFunctionSeq());
        FunctionEnvironment functionEnvironment = functionEnvironmentRepository.save(FunctionEnvironment.register(reqDto));

        return functionEnvironment.toDto();
    }

    private static void checkEnvironmentToken(FunctionEnvironmentDTO.Register reqDto) {
        if ("token".equals(reqDto.getType())) {
            if("Y".equals(reqDto.getValue()) && StringUtils.isEmpty(reqDto.getKey())){
                throw new RuntimeException("토큰값이 Y 인경우 키를 입력해주십시오.");
            }

            if("N".equals(reqDto.getValue()) && StringUtils.isNotEmpty(reqDto.getKey())){
                throw new RuntimeException("토큰값이 N 인경우 키를 입력할 수 없습니다.");
            }

            if(!"Y".equals(reqDto.getValue()) && !"N".equals(reqDto.getValue())) {
                throw new RuntimeException("토큰사용여부 값을 확인해주십시오.");
            }
        }
    }

    private static void checkEnvironmentUrl(FunctionEnvironmentDTO.Register reqDto) {
        if ("url".equals(reqDto.getType())) {
            if (!"http".equals(reqDto.getKey()) && !"https".equals(reqDto.getKey()))
                throw new RuntimeException("키의 허용값은 http 또는 https 입니다.");
            if (StringUtils.isEmpty(reqDto.getValue())) throw new RuntimeException("함수 주소값이 입력되지않았습니다.");
        }
    }

    private static void checkEnvironmentLimit(FunctionEnvironmentDTO.Register reqDto) {
        if ("limit".equals(reqDto.getType())) {
            if (!"minute".equals(reqDto.getKey()) && !"second".equals(reqDto.getKey()))
                throw new RuntimeException("제한시간의 key는 minute 과 second 로 입력해야합니다.");
            if (!StringUtils.isNumeric(reqDto.getValue())) throw new RuntimeException("제한시간을 숫자타입으로 입력해주세요.");
        }
    }

    private static void checkEnvironmentMemory(FunctionEnvironmentDTO.Register reqDto) {
        if ("memory".equals(reqDto.getType())) {
            if (!StringUtils.isNumeric(reqDto.getValue())) throw new RuntimeException("메모리의 값을 숫자타입으로 입력해주십시오.");
            if (Integer.parseInt(reqDto.getValue()) < MIN_MEMORY_VALUE) {
                throw new RuntimeException("메모리의 값을 128이상 입력해주십시오");
            }
        }
    }

    private static void checkEnvironmentEnv(FunctionEnvironmentDTO.Register reqDto, AtomicInteger envCountChecker) {
        if ("env".equals(reqDto.getType())) {
            envCountChecker.getAndIncrement();
            log.info("envCountChecker = " + envCountChecker);
            if (StringUtils.isEmpty(reqDto.getKey())) {
                throw new RuntimeException("환경변수의 키는 공백일 수 없습니다.");
            }
            if(reqDto.getKey().contains(" ")){
                throw new RuntimeException("환경변수의 키는 공백을 포함할 수 없습니다.");
            }
            String first = reqDto.getKey().substring(0,1);

            if (Pattern.matches("^[\\d]$", first)) {
                throw new RuntimeException("환경변수의 키는 숫자로 시작할 수 없습니다.");
            }
            if(!Pattern.matches("^[a-zA-Z0-9._-]*$", reqDto.getKey())){
                throw new RuntimeException("환경변수는 영문 a-z,A-Z, 숫자0-9, 특수문자._- 만 입력할 수 있습니다.");
            }

            if(reqDto.getKey().length() > MAX_KEY_LENGTH){
                throw new RuntimeException("키의 길이는 50자를 넘을수 없습니다.");
            }
            if(StringUtils.isNotEmpty(reqDto.getValue()) && reqDto.getValue().length()>MAX_VALUE_LENGTH){
                throw new RuntimeException("value 의 길이는 50자를 넘을수 없습니다.");
            }
        }
    }

    private static void checkEnvironmentColdStart(FunctionEnvironmentDTO.Register reqDto) {
        if ("coldStartYn".equals(reqDto.getType())) {
            if (!"Y".equals(reqDto.getValue()) && !"N".equals(reqDto.getValue()))
                throw new RuntimeException("콜드스타트여부는 Y 또는 N으로 입력해주세요");
        }
    }


    @Transactional
    public List<FunctionEnvironmentDTO.Response> registerAll(List<FunctionEnvironmentDTO.Register> reqDto, String functionKey) throws IOException, ParseException {
        // id가 update ,없으면 insert
        // update시 변경여부가 있는체크해야함.
        // 기존 구성과 전체 내역을 비교해서 변경건이 있는지를 체크해야함
        Function function = functionRepository.findByFunctionKey(functionKey).orElseThrow(() -> new RuntimeException("펑션키를 입력해주세요"));
        List<FunctionEnvironment> functions = functionEnvironmentRepository.findByFunction(function);

        List<FunctionEnvironmentDTO.Register> dbItems = functions.stream().map(f -> FunctionEnvironmentDTO.Register.builder().key(f.getKey()).value(f.getValue()).type(f.getType()).functionSeq(function.getFunctionSeq()).build()).collect(Collectors.toList());
        //화면에서는 url값 따로 안넘겨줌. #신승훈프로와 협의
        List<UrlDTO> urlDTOs = UrlUtil.generateUrl(function.getName(), function.getRegion(),"none");
        urlDTOs.stream().forEach(urlDTO -> reqDto.add(FunctionEnvironmentDTO.Register.builder().type("url").key(urlDTO.getProtocol()).value(urlDTO.getUrl()).build()));

        sortFunctionEnvironment(reqDto);
        sortFunctionEnvironment(dbItems);

        if (checkEnvironmentKeyValueUpdate(reqDto, dbItems)) {
            functionEnvironmentRepository.deleteByFunction(function);
            AtomicInteger counter = new AtomicInteger(0);


            reqDto.stream().forEach(dto -> registerFunctionEnvironment(dto, function,counter));
            if(counter.get() > MAX_ENV_COUNT) {
                throw new RuntimeException("환경변수는 50개를 초과할 수 없습니다.");
            }

            //20240827. gyeongyeol
            //구성 수정 시에도 ksvc가 만들어져야함. 단 READY 상태가 아니라면 만들어지면 안됨.
            // 함수 재배포 시, 함수 상태를 다시 DEPLOYING으로 업데이트
            if(function.isReady()) {
                function.setFunctionStatus(TypeEnums.FunctionStatus.DEPLOYING);
                functionRepository.save(function);
                // 환경 변수 적용에 따른 함수 재배포
                knativeService.callIstioAndKnative(function);
            }
        }

        functions = functionEnvironmentRepository.findByFunction(function);

        return functions.stream().map(FunctionEnvironment::toDto).collect(Collectors.toList());
    }

    private boolean checkEnvironmentKeyValueUpdate(List<FunctionEnvironmentDTO.Register> reqItems, List<FunctionEnvironmentDTO.Register> dbItems) {
        if (reqItems.size() != dbItems.size()) {
            return true;
        }

        for (int i = 0; i < reqItems.size(); i++) {
            if (!StringUtils.equals(reqItems.get(i).getType(), dbItems.get(i).getType()) ||
                    !StringUtils.equals(reqItems.get(i).getKey(), dbItems.get(i).getKey())||
                    !StringUtils.equals(reqItems.get(i).getValue(), dbItems.get(i).getValue())
            ) {
                return true;
            }
        }
        return false;
    }


    private void sortFunctionEnvironment(List<FunctionEnvironmentDTO.Register> items) {
        Collections.sort(items, new Comparator<FunctionEnvironmentDTO.Register>() {
            @Override
            public int compare(FunctionEnvironmentDTO.Register p1, FunctionEnvironmentDTO.Register p2) {
                return new CompareToBuilder().append(p1.getType(), p2.getType()).append(p1.getKey(), p2.getKey()).append(p1.getValue(), p2.getValue()).toComparison();
            }
        });
    }

    public List<FunctionEnvironmentDTO.Response> searchFunctionEnvironment(String functionKey) {
        Function function = functionRepository.findByFunctionKey(functionKey).orElseThrow(() -> new RuntimeException("펑션키를 입력해주세요"));
        List<FunctionEnvironment> environments = functionEnvironmentRepository.findByFunction(function);
        return environments.stream().map(FunctionEnvironment::toDto).collect(Collectors.toList());
    }
}
