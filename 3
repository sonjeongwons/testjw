아래 V3ScannerController.java 코드와 TokenServie.java 를 작성했어. 외부사용자가 /multipart-scan API를 헤더에 X-Subject-Token을 추가하여 호출하게되면, 이 Java어플리케이션에서는 TokenService에 작성된 로직에 따라 API를 호출하기위한 토큰이 유효한지 검사하게돼. 토큰이 유효한지 검사하고, 토큰의 권한이 "Admin"이 맞는지 확인하고싶어. 나는 Admin 권한을 가진 토큰 요청에 대해서만 API 사용 인가를 할거야. 내 요구사항에 맞춰 TokenService 및 Contoller 코드 수정을해서 개선해봐.
ㄴㄴ
package com.cvc.scanner.controller;

import com.cvc.scanner.dto.FileDto;
import com.cvc.scanner.service.TokenService;
import com.cvc.scanner.service.V3ScannerService;
import com.sun.net.httpserver.HttpsServer;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.InputStream;
import java.util.Random;

import org.springframework.http.HttpStatus;
import jakarta.validation.Valid;
import org.springframework.web.multipart.MultipartFile;

import java.util.Map;

@RestController
@RequestMapping("/api/v1/scanner")
public class V3ScannerController {

    private static final Logger logger = LoggerFactory.getLogger(V3ScannerController.class);

    @Autowired
    private V3ScannerService v3ScannerService;
    @Autowired
    private TokenService tokenService;

    @GetMapping("/simple")
    public ResponseEntity<Map<String, Object>> simpleScan(@RequestHeader("X-Subject-Token") String Token, @RequestParam String fileName) {
        logger.info("Simple scan requested. Filename: {}, API Key: {}", fileName, Token);
//        if (v3ScannerService.validateToken(Token)) {
//            logger.warn("Unauthorized access attempt with API Key: {}", Token);
//            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
//        }
        return ResponseEntity.ok(v3ScannerService.simpleScan(fileName));
    }

    @GetMapping("/remote")
    public ResponseEntity<Map<String, Object>> remoteScan(@RequestHeader("X-Subject-Token") String Token, @RequestParam String fileName) {
        logger.info("Remote scan requested. Filename: {}, API Key: {}", fileName, Token);
//        if (v3ScannerService.validateToken(Token)) {
//            logger.warn("Unauthorized access attempt with API Key: {}", Token);
//            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
//        }
        return ResponseEntity.ok(v3ScannerService.remoteScan(fileName));
    }

    @GetMapping("/detail")
    public ResponseEntity<Map<String, Object>> detailScan(@RequestHeader("X-Subject-Token") String Token, @RequestParam String fileName) {
        logger.info("Detail scan requested. Filename: {}, API Key: {}", fileName, Token);
//        if (v3ScannerService.validateToken(Token)) {
//            logger.warn("Unauthorized access attempt with API Key: {}", Token);
//            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
//        }
        return ResponseEntity.ok(v3ScannerService.detailScan(fileName));
    }


    @PostMapping("/base64-scan")
    public ResponseEntity<FileDto.Response> scanFile(
            @RequestHeader("X-Subject-Token") String Token,
            @Valid @RequestBody FileDto.Request fileDtoRequest) {
        logger.info("File scan requested. Filename: {}, API Key: {}", fileDtoRequest.getFileName(), Token);
//        if (v3ScannerService.validateToken(Token)) {
//            logger.warn("Unauthorized access attempt with API Key: {}", Token);
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
//                    FileDto.Response.builder()
//                            .fileName(fileDtoRequest.getFileName())
//                            .returnCode(HttpStatus.UNAUTHORIZED.value())
//                            .message("Unauthorized: Invalid API Key")
//                            .build()
//            );
//        }
        FileDto.Response response = v3ScannerService.scanBase64File(fileDtoRequest);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @PostMapping(value = "/multipart-scan", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<FileDto.Response> scanMultipartFile(
            @RequestHeader("X-Subject-Token") String token,
            @RequestPart("file") MultipartFile file) {

        logger.info("Multipart file scan requested. Filename: {}, User Token: {}", file.getOriginalFilename(), token);
        boolean isValid = tokenService.validateToken(token);
        if(!isValid){
            logger.info("인증 토큰이 유효하지 않습니다.");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FileDto.Response.builder()
                            .fileName(file.getOriginalFilename())
                            .returnCode(HttpStatus.UNAUTHORIZED.value())
                            .message("인증 토큰이 유효하지 않습니다.")
                            .build());
        }
        FileDto.Response response = v3ScannerService.scanMultipartFile(file);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @PostMapping(value = "/binary-scan", consumes = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public ResponseEntity<FileDto.Response> scanBinaryFile(
            @RequestHeader("X-Subject-Token") String Token,
            @RequestHeader("File-Name") String fileName,
            HttpServletRequest request) {

//        if (v3ScannerService.validateToken(Token)) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
//                    FileDto.Response.builder()
//                            .fileName(fileName)
//                            .returnCode(HttpStatus.UNAUTHORIZED.value())
//                            .message("Unauthorized: Invalid API Key")
//                            .build()
//            );
//        }

        try (InputStream inputStream = request.getInputStream()) {
            FileDto.Response response = v3ScannerService.scanBinaryFile(fileName, inputStream);
            return ResponseEntity.status(HttpStatus.OK).body(response);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                    FileDto.Response.builder()
                            .fileName(fileName)
                            .returnCode(-1)
                            .message("Error processing file: " + e.getMessage())
                            .build()
            );
        }
    }

    @PostMapping(value = "/upload-chunk", consumes = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public ResponseEntity<String> uploadChunk(
            @RequestHeader("File-Id") String fileId,  // 파일 ID
            @RequestHeader("Chunk-Index") int chunkIndex,  // 청크 인덱스
            @RequestHeader("Total-Chunks") int totalChunks,  // 전체 청크 개수
            @RequestBody byte[] chunkData) {  // 청크 데이터

        try {
            v3ScannerService.saveChunk(fileId, chunkIndex, chunkData);
            return ResponseEntity.ok("Chunk uploaded successfully.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Chunk upload failed: " + e.getMessage());
        }
    }

    /**
     * 병합 및 스캔 엔드포인트
     */
    @PostMapping("/merge-chunks")
    public ResponseEntity<FileDto.Response> mergeChunksAndScan(
            @RequestHeader("File-Id") String fileId,  // 파일 ID
            @RequestHeader("File-Name") String fileName) {  // 원래 파일 이름

        try {
            FileDto.Response response = v3ScannerService.mergeChunksAndScan(fileId, fileName);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                    FileDto.Response.builder()
                            .fileName(fileName)
                            .returnCode(-1)
                            .message("Failed to merge and scan chunks: " + e.getMessage())
                            .build()
            );
        }
    }

    @GetMapping("/status")
    public ResponseEntity<FileDto.Response> getStatus() {
        logger.info("API status requested.");
        String[] fileNames = {"TestFile", "TestFolder","TestZip","Wow","Hello"};
        Random random = new Random();
        String fileName=fileNames[random.nextInt(fileNames.length)];
        return ResponseEntity.status(HttpStatus.OK).body(
                FileDto.Response.builder()
                        .fileName(fileName)
                        .returnCode(0)
                        .message("API is running")
                        .build()
        );
    }

    @PostMapping("/status")
    public ResponseEntity<FileDto.Response> modifyStatus(
            @RequestHeader("File-Id") String fileId,  // 파일 ID
            @RequestHeader("File-Name") String fileName) {
        logger.info("Post메소드가 호출되었습니다.");
        String[] numbers = {"0","1"};
        Random random = new Random();
        String number=numbers[random.nextInt(numbers.length)];
        return ResponseEntity.status(HttpStatus.OK).body(
                FileDto.Response.builder()
                        .fileName(fileName)
                        .returnCode(Integer.parseInt(number))
                        .message("File ID is : " + fileId)
                        .build()
        );
    }

    @GetMapping("/test")
    public ResponseEntity<FileDto.Response> callTest(
            @RequestHeader("File-Id") String fileId,  // 파일 ID
            @RequestHeader("File-Name") String fileName) {
        logger.info("TEST API is Called. 파일ID는 " + fileId +" 이고, 파일이름은 " + fileName + " 입니다.");
        return ResponseEntity.status(HttpStatus.OK).body(
                FileDto.Response.builder()
                        .fileName(fileName)
                        .returnCode(-1)
                        .message("마지막으로 파일ID는 " + fileId)
                        .build()
        );
    }
}



package com.cvc.scanner.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;

@Service
public class TokenService {

    @Value("${cvc.service.id}")
    private String cvcServiceId;

    @Value("${cvc.service.pw}")
    private String cvcServicePw;

    @Value("${iam.api.endpoint}")
    private String iamApiEndpoint;

    private final RestTemplate restTemplate;

    public TokenService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public String getCvcAdminToken() {
        //String url = iamApiEndpoint + "/v3/auth/tokens?nocatalog=null";
        String url = iamApiEndpoint;

        Map<String, Object> body = Map.of(
                "auth", Map.of(
                        "identity", Map.of(
                                "methods", List.of("password"),
                                "password", Map.of(
                                        "user", Map.of(
                                                "name", cvcServiceId,
                                                "domain", Map.of("name", "service"),
                                                "password", cvcServicePw
                                        )
                                )
                        )
                )
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, request, String.class);
        return response.getHeaders().getFirst("X-Subject-Token");
    }
    public boolean validateToken(String userToken) {
        //String url = iamApiEndpoint + "/v3/auth/tokens?nocatalog=null";
        String url = iamApiEndpoint;
        String adminToken = getCvcAdminToken();

        HttpHeaders headers = new HttpHeaders();
        headers.set("X-Auth-Token", adminToken);
        headers.set("X-Subject-Token", userToken);

        HttpEntity<Void> request = new HttpEntity<>(headers);

        try {
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, request, String.class);
            return response.getStatusCode().is2xxSuccessful();
        } catch (HttpClientErrorException | HttpServerErrorException e) {
            return false;
        }
    }
}


