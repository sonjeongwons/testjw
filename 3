특정 태그명을 가진 EC2 인스턴스를 삭제하지 않도록 필터링하는 기능을 추가했다. EXCLUDED_EC2_TAG_KEY와 EXCLUDED_EC2_TAG_VALUE를 정의하고, 해당 태그를 가진 인스턴스는 삭제 대상에서 제외하도록 수정했다.

import boto3

# 제외할 서비스 목록
EXCLUDED_SERVICES = [
    "iam", "organizations", "sso", "billing", "cost-explorer", "support",
    "cloudwatch", "cloudtrail"
]

# CleanupLambda 함수 정보
CLEANUP_LAMBDA_NAME = "CleanupLambda"
CLEANUP_LAMBDA_REGION = "ap-northeast-2"  # 서울 리전

# EC2 삭제 예외 태그 (해당 태그를 가진 인스턴스는 삭제하지 않음)
EXCLUDED_EC2_TAG_KEY = "DoNotDelete"
EXCLUDED_EC2_TAG_VALUE = "true"

# 모든 리전 조회
regions = [region['RegionName'] for region in boto3.client('ec2').describe_regions()['Regions']]


def delete_eks_clusters(region, session):
    eks = session.client('eks')
    clusters = eks.list_clusters().get("clusters", [])
    for cluster in clusters:
        try:
            print(f"[{region}] EKS 클러스터 삭제 시작: {cluster}")

            # 1️⃣ 노드 그룹 삭제
            node_groups = eks.list_nodegroups(clusterName=cluster).get("nodegroups", [])
            for node_group in node_groups:
                try:
                    eks.delete_nodegroup(clusterName=cluster, nodegroupName=node_group)
                    print(f"[{region}] EKS 노드 그룹 삭제: {node_group}")
                except Exception as e:
                    print(f"[{region}] EKS 노드 그룹 삭제 실패: {node_group}, {str(e)}")

            waiter = eks.get_waiter('nodegroup_deleted')
            for node_group in node_groups:
                try:
                    waiter.wait(clusterName=cluster, nodegroupName=node_group)
                    print(f"[{region}] EKS 노드 그룹 삭제 완료: {node_group}")
                except Exception as e:
                    print(f"[{region}] EKS 노드 그룹 삭제 대기 오류: {node_group}, {str(e)}")

            # 2️⃣ 클러스터 삭제
            eks.delete_cluster(name=cluster)
            print(f"[{region}] EKS 클러스터 삭제 요청 완료: {cluster}")

        except Exception as e:
            print(f"[{region}] EKS 클러스터 삭제 실패: {cluster}, {str(e)}")


def delete_ec2_instances(region, session):
    ec2 = session.client('ec2')
    instances = ec2.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running', 'stopped']}])
    
    instance_ids = []
    for reservation in instances["Reservations"]:
        for instance in reservation["Instances"]:
            instance_id = instance["InstanceId"]
            tags = {tag["Key"]: tag["Value"] for tag in instance.get("Tags", [])}

            # 특정 태그가 있는 경우 삭제 제외
            if tags.get(EXCLUDED_EC2_TAG_KEY) == EXCLUDED_EC2_TAG_VALUE:
                print(f"[{region}] EC2 인스턴스 삭제 제외: {instance_id} (태그: {EXCLUDED_EC2_TAG_KEY}={EXCLUDED_EC2_TAG_VALUE})")
                continue

            instance_ids.append(instance_id)

    if instance_ids:
        ec2.terminate_instances(InstanceIds=instance_ids)
        print(f"[{region}] EC2 인스턴스 삭제: {instance_ids}")


def delete_resources(region):
    session = boto3.session.Session(region_name=region)

    # EC2 인스턴스 삭제 (특정 태그 제외)
    delete_ec2_instances(region, session)

    # S3 버킷 삭제
    s3 = session.client('s3')
    buckets = s3.list_buckets().get("Buckets", [])
    for bucket in buckets:
        try:
            s3.delete_bucket(Bucket=bucket["Name"])
            print(f"[{region}] S3 버킷 삭제: {bucket['Name']}")
        except:
            pass  

    # RDS 인스턴스 삭제
    rds = session.client('rds')
    rds_instances = rds.describe_db_instances().get("DBInstances", [])
    for db in rds_instances:
        try:
            rds.delete_db_instance(DBInstanceIdentifier=db["DBInstanceIdentifier"], SkipFinalSnapshot=True, DeleteAutomatedBackups=True)
            print(f"[{region}] RDS 인스턴스 삭제: {db['DBInstanceIdentifier']}")
        except:
            pass

    # Lambda 함수 삭제 (CleanupLambda 제외)
    lambda_client = session.client('lambda')
    functions = lambda_client.list_functions().get("Functions", [])
    for function in functions:
        function_name = function["FunctionName"]
        if region == CLEANUP_LAMBDA_REGION and function_name == CLEANUP_LAMBDA_NAME:
            print(f"[{region}] {CLEANUP_LAMBDA_NAME} 함수는 삭제 대상에서 제외됨")
            continue
        try:
            lambda_client.delete_function(FunctionName=function_name)
            print(f"[{region}] Lambda 삭제: {function_name}")
        except:
            pass

    # EKS 클러스터 삭제
    delete_eks_clusters(region, session)

    # DynamoDB 테이블 삭제
    dynamodb = session.client('dynamodb')
    tables = dynamodb.list_tables().get("TableNames", [])
    for table in tables:
        try:
            dynamodb.delete_table(TableName=table)
            print(f"[{region}] DynamoDB 테이블 삭제: {table}")
        except:
            pass

    print(f"[{region}] 모든 과금 리소스 삭제 완료")


# 모든 리전에 대해 실행
for region in regions:
    delete_resources(region)

변경된 사항

1. EC2 삭제 로직 개선

delete_ec2_instances() 함수 추가.

인스턴스를 조회한 후 특정 태그 (DoNotDelete=true) 가 있는 경우 삭제하지 않음.

태그를 체크한 후 삭제할 인스턴스 리스트를 terminate_instances()로 삭제.



2. 전체 리소스 삭제 함수에서 EC2 삭제 로직 분리

delete_resources()에서 직접 EC2를 삭제하는 대신 delete_ec2_instances() 호출.




이제 특정 태그 (DoNotDelete=true)가 설정된 EC2 인스턴스는 삭제되지 않는다.

