[PPT 제목]: [CR] 최종 보고서(25년 1차수)
[발표자] : SCP Platform아키텍처그룹(클라우드아키텍처팀) 손정원

[슬라이드1]
AGENDA :
1) 혁신활동
 (1) [상] 리팩토링
 (2) [중] DOGETHER 커뮤니티 기고
 (3) [하] 코드리뷰 기준 수립
2) 과정을 마치며
 (1) 소감 및 향후계획
 
[슬라이드2]
[상] Refactoring :
  대제목 : 가독성, 유지보수성, 확장성, 일관성을 고려한 코드 개선 진행
  중제목 : 클린 코드를 위한 리팩토링
  내용 : 
   1) 어려웠던 점
    (1) 리팩토링 기준 부재 
      - 기능 개선과 리팩토링을 병행하니 시간 배분이 쉽지 않음. 우선순위를 두고 일정 안배를 어떻게 할지 팀 내에서 고민이 필요했음
      - 리팩토링이 필요하다는 것은 알지만 어떤 기준으로 얼마만큼 고칠지 모호했음
    (2) 팀원별 역량과 코딩스타일이 각기 다름
      - 같은 기능이라도 구현 방식이나 네이밍에서 팀원 간 의견이 갈리는 경우가 많아서 합의점을 찾기 위해 논의 시간이 길어졌음
      - 리팩토링 대상 코드의 작성 의도를 명확히 이해하지못해서 무작정 고치다가 오히려 사이드 이펙트를 만든 적이 있었음
   2) 좋았던 점
    (1) 코드에 대한 이해도 상승
      - 리팩토링을 하면서 코드 흐름을 다시 보게 되고, 동작 원리를 정확히 이해할 수 있었음
    (2) 팀원 간 협업 강화
      - 서로의 코드 스타일을 이해하게 되고, 소통하면서 리뷰 기준도 맞추어감으로써 협업 역량이 자연스럽게 올라감
    (3) 리팩토링 습관화
      - “작은 단위로 고친다”, “기능 변경 없이 구조만 개선“ 같은 습관이 생기면서 실무에서도 자연스럽게 적용할 수 있는 기반이 생김
   3) 성과
    (1) 정량적 성과
      - SAM지표 상승 (최초 4.32 → 최종 4.45)
      - 전체 코드 라인 수 감소 (최초 11,318 → 최종 10,766 약 5% 감소)
      - 리팩토링 활동 전/후 설문조사 지표 향상 (최초 3.95 → 최종 4.53)
    (2) 정성적 성과
      - 가독성 향상 : 함수 분리, 네이밍 개선을 통해 처음 보는 사람도 쉽게 이해할 수 있는 구조로 변경
      - 중복 제거 : 공통 로직을 유틸 클래스나 공통 모듈로 추출함으로써 재사용성을 높임
      - SOLID 원칙 적용 : 주로 SRP 적용하여 기능 최소화 및 유연한 구조로 개선
      - 리팩토링을 하며 코드 작성 습관이 바뀌었고, 함수 분리, 네이밍, 설계에 대한 감각이 확연히 성장
      - 페어 리팩토링 등을 통해 소통이 활발해졌고, 자연스럽게 협업능력 향상

[슬라이드3]
[중] DOgether 기고 :
  대제목 : 단순 교육 과제를 넘어 조직 내 협업 문화 개선 및 코드리뷰 문화 개선에 직접 기여 
  중제목 : 타 사 코드리뷰 사례 전파, 클린코드 원칙 소개, 테스트코드 작성 방법 등 공유
  내용 : 
   1) 어려웠던 점
    (1) 콘텐츠의 정확성과 깊이에 대한 부담
      - 잘못된 정보나 얕은 지식을 전달하면 신뢰도가 떨어질까봐 부담이 컸음
      - “내용은 알겠는데 실무에서 적용하기 어렵다” 는 반응을 피하기 위해 실제 경험과 예제를 녹이는 데 시간이 많이 들었음
    (2) 전달 방식 고민
      - 너무 기술적이면 초급자는 어렵고, 너무 쉽게 쓰면 시니어는 지루해할까봐 균형 잡기가 어려웠음
      - 사람마다 코드 스타일도 다르고, 생각이 다른 부분도 있어서 “절대적인 기준처럼 비춰지지 않게“ 표현을 조심함
   2) 좋았던 점
    (1) 사내 코드리뷰 기술문화 확산 기여
      - “우리 조직도 이렇게 할 수 있다“ 는 분위기 형성에 기여
      - 사내에서 코드리뷰나 테스트 관련 지식이 필요하지만 다양하게 올라오는게 없어서 공백을 메운다는 느낌으로 코드리뷰 사례나 클린코드 소개 등 기초적인 자료부터 게시함
    (2) 콘텐츠 정리를 통해 나의 지식이 체계화됨
      - 자료 정리, 예시 추출, 개념 정리를 반복하면서 내가 가진 지식도 더 구조적으로 정리되고 단단해짐
      - 단위 테스트, mocking 관련 주제는 풀어쓰면서 개념과 목적이 더 명확해짐
   3) 성과
    (1) 조직 내 코드리뷰 문화 인식 제고
      - 코드리뷰 관련 글과 다른 회사 사례 공유로 인해, “우리도 리뷰 문화가 필요하다＂는 인식을 확산시킴
    (2) 협업에 필요한 공감과 배려 문화 확산
      - “인간답게 리뷰하는 방법“ 게시글은 기술뿐 아니라 정서적 리더십까지 보여줌
      - 기술 커뮤니케이션에서의 감정 고려, 피드백 방식 개선 등의 인식을 심어줌
    (3) 재사용 가능한 콘텐츠 확보
      - 클린코드, 코드리뷰 방식, 테스트 작성법 등을 다룬 일련의 콘텐츠는 일회성 이벤트가 아니라 반복적으로 회자되고 개선될 수 있는 “기초 문서“ 역할을 수행
      - 글, 예제 코드, 설명 문서 등이 문서화되어 조직 내 “표준 리뷰 가이드라인”이나 “코딩 컨벤션” 제정 시 레퍼런스로 활용될 가능성이 있음
    (4) 기타
      - DOgether 1월 우수 글 선정 “클린코드를 작성하기 위한 원칙과 실무 팁“
      - 클라우드개발실 전체 임직원 메일 발송 “예제로 알아보는 테스트코드＂

[슬라이드4]
[하] 코드리뷰 기준 수립 :
  대제목 : 실무와 교육을 넘나들며 팀 전체 코드리뷰 문화 성숙도 향상
  중제목 : 지속적인 코드리뷰 기준 개선을 통해 코드리뷰 문화 정착 기여
  내용 : 
   1) 어려웠던 점
    (1) 객관적이고 보편적인 기준을 만드는 데 어려움
      - 팀 내 개발자의 스타일, 성향, 경험치가 달라 “이건 클린한가?”에 대한 판단이 처음엔 주관적이었음
    (2) PR템플릿 설계 시 사용자의 행동을 예측하기 어려움
      - PR템플릿은 만들었지만 실제 리뷰 시에는 같은 항목을 서로 다른 내용으로 채우거나, 무시하고 PR을 날리는 경우도 있었음
      - 리뷰문화가 익숙하지 않은 팀원들에게 강제보다는 습관화를 위한 유도가 필요했음
   2) 좋았던 점
    (1) 팀에 실질적인 ‘공통 언어＇가 생김
      - ”이건 PR템플릿대로 작성해줘“, “이건 리뷰 기준 A-2에 해당하니까 수정해줘“ 라는 식으로 합의된 기준이 생김
      - 이전처럼 “각자 스타일대로＂하던 문화에서 조율된 협업으로 발전했음
    (2) 리뷰의 생산성과 품질이 올라감
      - 기준을 만들고, 개선 회의까지 거치며 계속 다듬다보니 불필요한 논쟁이 줄고, 실제로 코드 개선에 집중할 수 있게 됨
      - 코드가 팀 자산이라는 인식이 자리잡으면서, 리뷰를 통해 다른 사람의 코드를 관심 있게 보기 시작하고, 개발자 간에 “학습의 기회“로 리뷰를 바라봄
   3) 성과
    (1) 조직적 성과
      - 명확한 기준 & 전략 공유 덕분에 일관된 리뷰 흐름을 가짐
      - PR 템플릿, Git 전략, Merge 룰 등으로 개발 생산성과 품질 모두 향상됨
      - 반복되는 코드 smell, 안티패턴이 제거되고, 가독성 좋고 유지보수 쉬운 코드가 늘어남. 그래서 클린코드 원칙이 적용됨으로써 코드의 일관성이 확보됨
    (2) 문화적 성과
      - 코드리뷰 = 감정적 평가 → “같이 성장하는 과정” 으로 인식이 바뀜
      - 리뷰가 피해야 할 게 아니라 서로 돕는 문화로 자리잡음
      - “배운 걸 정리해서 나눈다”는 문화가 점차 자리잡음
      - 리뷰 회의, 룰 개선 회의 등을 거치며 대화와 피드백 루프가 생김


[슬라이드5]
소감 및 향후 계획 : 
  내용 : 
   1) 소감
    (1) 형설지공(螢雪之功)
      - 반딧불과 눈에서 반사되는 빛으로 글을 읽는 노력처럼, 작은 실천이 모여 큰 성과를 이루다
   2) 향후계획
    (1) 코드리뷰 문화 확산
      - 교육을 통해 수립한 룰과 전략을 기반으로, 타 팀 또는 신규 프로젝트에도 적용 가능한 표준 가이드 문서 제작
      - 정기적인 코드리뷰 회고 및 룰 개선을 위한 분기별 리뷰 정비 세션 운영
      - 리팩토링을 통한 코드 품질 향상 및 SAM 지표 개선
    (2) 클린코드/테스트 코드 전파
      - 테스트 코드 샘플과 리뷰 사례를 기반으로 한 클린코드 내재화 Workshop 기획
    (3) 코드리뷰 관련 기고 및 사내 커뮤니티 활성화
      - DOgether 게시판을 지속적으로 활용해 월간 코드리뷰 칼럼 연재
