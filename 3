✅ 1단계: docker-compose를 위한 systemd 서비스 파일 생성
예를 들어, /etc/systemd/system/cvc.service 라는 이름으로 유닛 파일을 만든다고 하자.

bash
복사
편집
sudo vi /etc/systemd/system/cvc.service
그리고 아래 내용을 입력해줘:

ini
복사
편집
[Unit]
Description=CVC Docker Compose App
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/cvc
ExecStart=/usr/local/bin/docker-compose up -d
ExecStop=/usr/local/bin/docker-compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
✅ WorkingDirectory는 실제 docker-compose.yaml이 있는 디렉토리로 지정해줘야 하고
✅ ExecStart 경로에 있는 docker-compose 바이너리 경로도 확인해봐. which docker-compose로 실제 경로를 확인해서 수정해줘야 할 수도 있어.

✅ 2단계: 서비스 등록 및 활성화
bash
복사
편집
# systemd 데몬 리로드
sudo systemctl daemon-reexec
sudo systemctl daemon-reload

# 서비스 시작
sudo systemctl start cvc.service

# 재부팅 시 자동 시작되도록 설정
sudo systemctl enable cvc.service
✅ 3단계: 서버 재부팅 테스트
이제 reboot 명령어로 서버 재시작한 후, VM이 다시 살아났을 때 자동으로 서비스가 정상 기동되는지 확인해보면 돼.

bash
복사
편집
sudo reboot
부팅 후:

bash
복사
편집
docker ps
✅ 추가 팁
만약 docker compose (공백 있는 새 버전) 를 사용 중이라면, docker-compose 대신 docker compose 명령으로 바꿔줘.

로그 확인은 다음 명령으로 가능:

bash
복사
편집
journalctl -u cvc.service -f
이 방식은 docker-compose로 배포된 서비스가 안정적으로 재부팅 후에도 다시 살아날 수 있게 만들어줘. 이걸 두 VM 모두에 설정하면 LB 뒤에서 항상 최소 한 개 이상의 인스턴스가 살아 있게 보장할 수 있어.

