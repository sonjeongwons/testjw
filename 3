📌 PR 1 코드 리뷰 - 티키타카 스타일로 심층 피드백!

PR 작성자와 리뷰어가 적극적으로 의견을 주고받으며 더 나은 코드를 만들어가는 과정입니다! 🚀


---

🔹 1. registerFunction의 역할 분리 개선

💬 리뷰어(나):

> 프로님, registerFunction의 리팩토링이 깔끔하게 진행된 게 보이네요! 🎉
역할을 나누면서 가독성이 좋아졌어요.

그런데 initializeFunction 내부에서 Allow IP 등록과 트리거 생성이 함께 처리되고 있는데,
이 부분도 메소드 분리하면 유지보수가 더 편해질 것 같아요.

예를 들면 이렇게요!

private void initializeFunction(Function function, FunctionDTO.Register reqDto) {
    setEnvironment(function);
    registerAllowIps(reqDto.getAllowIps(), function.getFunctionSeq());
    createDefaultTrigger(function);
    registerJavaSourceFileIfNeeded(function);
}

이렇게 하면 나중에 Allow IP 로직을 변경하거나 트리거 처리 방식을 수정할 때,
initializeFunction을 건드리지 않고 해당 메소드만 수정하면 되니까 더 좋지 않을까요? 😊



📝 PR 작성자(팀원):

> 오! 프로님 말씀 듣고 보니 확실히 더 나눠야 할 필요가 있네요. 😮
initializeFunction이 여전히 너무 많은 책임을 갖고 있었어요.

근데 registerAllowIps에서 reqDto.getAllowIps()가 null일 수도 있어서,
CollectionUtils.isEmpty() 체크를 여기서 해줘야 할까요?



💬 리뷰어(나):

> 좋은 포인트입니다, 프로님! 🔥
CollectionUtils.isEmpty() 체크를 registerAllowIps 내부에서 처리하면,
호출하는 쪽에서는 신경 안 써도 돼서 더 깔끔할 것 같아요!

즉, 이렇게요!

private void registerAllowIps(List<String> allowIps, Long functionSeq) {
    if (CollectionUtils.isEmpty(allowIps)) return;
    allowIps.forEach(ip -> allowIpService.registerAllowIp(ip, functionSeq));
}

이렇게 하면 initializeFunction에서 null 체크 안 해도 되고,
코드가 더 단순하고 직관적으로 유지될 것 같아요. 🚀



📝 PR 작성자(팀원):

> 와… 역시 프로님! 😍
확실히 registerAllowIps가 더 유연하게 처리될 수 있겠네요.
바로 반영하겠습니다! 🙌




---

🔹 2. validateFunctionRequest의 유효성 검사 개선

💬 리뷰어(나):

> 프로님, validateFunctionRequest에 StringUtils.isAnyEmpty() 적용한 거 센스 최고예요! 🔥

그런데 혹시 functionKey 같은 값이 특정 패턴을 따라야 한다면,
유효성 검사를 좀 더 세분화하면 어떨까요?

예를 들면, 이런 식으로 나누면 유지보수성이 더 좋아질 것 같아요!

private void validateFunctionRequest(FunctionDTO.Register reqDto) {
    checkRequiredFields(reqDto);
    checkFunctionKeyFormat(reqDto.getFunctionKey());
    checkDisplayNameFormat(reqDto.getDisplayName());
}

이렇게 분리하면 새로운 유효성 검사 규칙이 추가될 때,
기존 코드를 건드리지 않고 해당 검증 메소드만 수정하면 되니까 더 깔끔하지 않을까요? 😊



📝 PR 작성자(팀원):

> 오, 프로님 좋은 아이디어네요! 👏
지금까지는 단순 isEmpty() 체크만 했는데,
말씀하신 대로 functionKey는 특정 패턴을 따라야 할 수도 있으니
미리 checkFunctionKeyFormat 같은 검증 메소드를 만들어 두면 확장성도 올라가겠어요!



💬 리뷰어(나):

> 맞습니다! 🚀
예를 들어, functionKey가 영문 소문자로 시작해야 하고, 63자 이하여야 한다면
정규식을 활용해서 검증하면 좋을 것 같아요.

예제 코드:

private void checkFunctionKeyFormat(String functionKey) {
    if (!functionKey.matches("^[a-z][a-z0-9-]{0,63}$")) {
        throw new InvalidFunctionRequestException("FunctionKey 형식이 올바르지 않습니다.");
    }
}

이렇게 하면 유효성 검사 코드가 한 곳에 모여 있어서 유지보수가 훨씬 쉬워질 거예요! 🚀



📝 PR 작성자(팀원):

> 이거 완전 좋은 방법이네요, 프로님! 😆
functionKey가 이상하게 들어오는 걸 미리 방지할 수도 있고,
규칙이 추가될 때 기존 코드를 안 건드려도 되니까 정말 깔끔할 것 같아요!

바로 반영하겠습니다! 🎯




---

🔹 3. deleteFunction의 관련 리소스 삭제 최적화

💬 리뷰어(나):

> 프로님, deleteFunction 메소드에서 관련 리소스 삭제하는 방식이 직관적이네요! 💡

그런데 혹시 대량 데이터 삭제 성능 최적화를 고려해봤을까요?

deleteAll() 대신 deleteAllInBatch()를 활용하면 성능이 더 좋아질 수 있어요!

예제 코드:

private void deleteRelatedResources(Function function) {
    allowIpRepository.deleteAllInBatch(allowIpRepository.findByFunction(function));
    functionEnvironmentRepository.deleteAllInBatch(functionEnvironmentRepository.findByFunction(function));
    keyManagerRepository.findByFunctionAndDelYn(function, "N").ifPresent(keyManagerRepository::delete);
    sourceFileRepository.findByFunction(function).ifPresent(sourceFileRepository::delete);
}

이렇게 하면 데이터 양이 많아도 한 번의 쿼리로 처리돼서 DB 부하를 줄일 수 있을 것 같아요! 🚀



📝 PR 작성자(팀원):

> 와… 프로님 이건 몰랐던 꿀팁이네요! 🤩

deleteAllInBatch()가 여러 개의 데이터를 한 번에 삭제하는 거라면,
대량 데이터 처리할 때 성능 차이가 꽤 날 것 같아요!



💬 리뷰어(나):

> 맞아요!
deleteAll()은 개별적으로 DELETE 쿼리를 실행하지만,
deleteAllInBatch()는 한 번에 쿼리를 묶어서 실행하니까 훨씬 빠를 수 있어요!

특히, AllowIp나 FunctionEnvironment처럼 다량의 데이터가 삭제될 가능성이 있는 테이블에서는
확실한 성능 최적화를 기대할 수 있습니다. 🚀



📝 PR 작성자(팀원):

> 완전 공감합니다, 프로님! 🔥

나중에 대량 삭제가 필요할 수도 있으니까 미리 적용해 두면 좋겠어요.
이건 무조건 반영해야겠네요! 😆




---

🎯 PR 1 코드 리뷰 요약

✅ 역할 분리 및 가독성 개선 (initializeFunction 분리 & registerAllowIps 최적화)
✅ 유효성 검사 모듈화 (validateFunctionRequest 개선 & 정규식 활용)
✅ 삭제 로직 최적화 (deleteAllInBatch() 활용으로 성능 향상)
✅ 사전 오류 방지 및 확장성을 고려한 코드 개선

🎉 프로님 덕분에 코드가 한층 더 업그레이드되었습니다! 🚀
PR 2 코드 리뷰도 시작해볼까요? 😊

