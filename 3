-}
-
-func (r *NamespaceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
-       logger := ctrl.LoggerFrom(ctx).WithValues("namespace", req.Namespace)
-
-       namespace := &corev1.Namespace{}
-       err := r.Client.Get(ctx, req.NamespacedName, namespace)
-       if err != nil {
-               return ctrl.Result{}, client.IgnoreNotFound(err)
-       }
-
-       if !namespace.DeletionTimestamp.IsZero() {
-               return ctrl.Result{}, nil
-       }
-
-       logger.Info("Reconciling Namespace")
-
-       if err := r.annotateIngressesInNamespace(ctx, req.Namespace); err != nil {
-               return ctrl.Result{}, fmt.Errorf("failed to annotateIngressesInNamespace: %w", err)
-       }
-
-       logger.Info("Reconciled Namespace successfully")
-       return ctrl.Result{}, nil
-}
-
-func (r *NamespaceReconciler) annotateIngressesInNamespace(ctx context.Context, namespace string) error {
-       var ingressList networkingv1.IngressList
-
-       if err := r.List(ctx, &ingressList, client.InNamespace(namespace)); err != nil {
-               return fmt.Errorf("failed to list ingresses: %w", err)
-       }
-
-       for _, ing := range ingressList.Items {
-               if err := r.annotateIngress(ctx, ing); err != nil {
-                       return fmt.Errorf("failed to annotateIngress: %w", err)
-               }
-       }
-
-       return nil
-}
-
-func (r *NamespaceReconciler) annotateIngress(ctx context.Context, ing networkingv1.Ingress) error {
-       return retry.RetryOnConflict(retry.DefaultRetry, func() error {
-               if err := r.Get(ctx, client.ObjectKey{Name: ing.Name, Namespace: ing.Namespace}, &ing); err != nil {
-                       return fmt.Errorf("failed to get ingress %s/%s: %w", ing.Namespace, ing.Name, err)
-               }
-               if ing.Annotations == nil {
-                       ing.Annotations = make(map[string]string)
-               }
-               ing.Annotations[model.ReconcileKey] = "true"
-               if err := r.Update(ctx, &ing); err != nil {
-                       if apierrors.IsConflict(err) {
-                               return err
-                       }
-                       return fmt.Errorf("failed to update ingress %s/%s: %w", ing.Namespace, ing.Name, err)
-               }
-               return nil
-       })
-}
diff --git a/controllers/namespacecontroller/namespace_controller_test.go b/controllers/namespacecontroller/namespace_controller_test.go
deleted file mode 100644
index febebb6..0000000
--- a/controllers/namespacecontroller/namespace_controller_test.go
+++ /dev/null
@@ -1,151 +0,0 @@
-package namespacecontroller
-
-import (
-       "context"
-       "testing"
-       "time"
-
-       "github.com/jmnote/tester/testcase"
-       "github.com/stretchr/testify/assert"
-       "github.com/stretchr/testify/require"
-       corev1 "k8s.io/api/core/v1"
-       networkingv1 "k8s.io/api/networking/v1"
-       metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
-       "k8s.io/apimachinery/pkg/runtime"
-       "k8s.io/apimachinery/pkg/types"
-       ctrl "sigs.k8s.io/controller-runtime"
-
-       "github.com/kuoss/ingress-annotator/pkg/testutil/fakeclient"
-)
-
-func TestNamespaceReconciler_SetupWithManager(t *testing.T) {
-       client := fakeclient.NewClient(nil)
-       reconciler := &NamespaceReconciler{
-               Client: client,
-       }
-
-       err := reconciler.SetupWithManager(fakeclient.NewManager())
-       assert.NoError(t, err)
-}
-
-func TestNamespaceReconciler_Reconcile(t *testing.T) {
-       scheme := runtime.NewScheme()
-       require.NoError(t, corev1.AddToScheme(scheme))
-       require.NoError(t, networkingv1.AddToScheme(scheme))
-
-       tests := []struct {
-               namespace  *corev1.Namespace
-               clientOpts *fakeclient.ClientOpts
-               wantResult ctrl.Result
-               wantError  string
-       }{
-               {
-                       namespace:  &corev1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "test-namespace"}},
-                       wantResult: ctrl.Result{},
-               },
-               {
-                       namespace:  &corev1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "test-namespace", DeletionTimestamp: &metav1.Time{Time: time.Now()}, Finalizers: []string{"test-finalizer"}}},
-                       wantResult: ctrl.Result{},
-               },
-               {
-                       namespace:  &corev1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "test-namespace"}},
-                       clientOpts: &fakeclient.ClientOpts{GetNotFoundError: true},
-                       wantResult: ctrl.Result{},
-               },
-               {
-                       namespace:  &corev1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "test-namespace"}},
-                       clientOpts: &fakeclient.ClientOpts{GetError: "*"},
-                       wantResult: ctrl.Result{},
-                       wantError:  "mocked GetError",
-               },
-               {
-                       namespace:  &corev1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "test-namespace"}},
-                       clientOpts: &fakeclient.ClientOpts{ListError: true},
-                       wantResult: ctrl.Result{},
-                       wantError:  "failed to annotateIngressesInNamespace: failed to list ingresses: mocked ListError",
-               },
-               {
-                       namespace:  &corev1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: "test-namespace"}},
-                       clientOpts: &fakeclient.ClientOpts{UpdateError: true},
-                       wantResult: ctrl.Result{},
-                       wantError:  "failed to annotateIngressesInNamespace: failed to annotateIngress: failed to update ingress test-namespace/test-ingress: mocked UpdateError",
-               },
-       }
-
-       ingress := &networkingv1.Ingress{
-               ObjectMeta: ctrl.ObjectMeta{
-                       Namespace: "test-namespace",
-                       Name:      "test-ingress",
-               },
-       }
-       for i, tt := range tests {
-               t.Run(testcase.Name(i, tt.namespace), func(t *testing.T) {
-                       client := fakeclient.NewClient(tt.clientOpts, tt.namespace, ingress)
-                       r := &NamespaceReconciler{
-                               Client: client,
-                       }
-
-                       req := ctrl.Request{NamespacedName: types.NamespacedName{Name: "test-namespace"}}
-                       result, err := r.Reconcile(context.Background(), req)
-
-                       if tt.wantError == "" {
-                               assert.NoError(t, err)
-                       } else {
-                               assert.EqualError(t, err, tt.wantError)
-                       }
-                       assert.Equal(t, tt.wantResult, result)
-               })
-       }
-}
-
-func TestNamespaceReconciler_annotateIngress(t *testing.T) {
-       s := runtime.NewScheme()
-       require.NoError(t, corev1.AddToScheme(s))
-       require.NoError(t, networkingv1.AddToScheme(s))
-
-       tests := []struct {
-               name       string
-               ingress    *networkingv1.Ingress
-               clientOpts *fakeclient.ClientOpts
-               wantError  string
-       }{
-               {
-                       name:    "successful annotation",
-                       ingress: &networkingv1.Ingress{ObjectMeta: metav1.ObjectMeta{Name: "test-ingress", Namespace: "test-namespace"}},
-               },
-               {
-                       name:       "get error",
-                       ingress:    &networkingv1.Ingress{ObjectMeta: metav1.ObjectMeta{Name: "test-ingress", Namespace: "test-namespace"}},
-                       clientOpts: &fakeclient.ClientOpts{GetError: "*"},
-                       wantError:  "failed to get ingress test-namespace/test-ingress: mocked GetError",
-               },
-               {
-                       name:       "update error",
-                       ingress:    &networkingv1.Ingress{ObjectMeta: metav1.ObjectMeta{Name: "test-ingress", Namespace: "test-namespace"}},
-                       clientOpts: &fakeclient.ClientOpts{UpdateError: true},
-                       wantError:  "failed to update ingress test-namespace/test-ingress: mocked UpdateError",
-               },
-               {
-                       name:       "update conflict error",
-                       ingress:    &networkingv1.Ingress{ObjectMeta: metav1.ObjectMeta{Name: "test-ingress", Namespace: "test-namespace"}},
-                       clientOpts: &fakeclient.ClientOpts{UpdateConflictError: true},
-                       wantError:  `mocked UpdateConflictError: Operation cannot be fulfilled on ingresses.networking.k8s.io "test-ingress": the object has been modified; please apply your changes to the latest version and try again`,
-               },
-       }
-
-       for i, tt := range tests {
-               t.Run(testcase.Name(i, tt.name), func(t *testing.T) {
-                       client := fakeclient.NewClient(tt.clientOpts, tt.ingress)
-                       r := &NamespaceReconciler{
-                               Client: client,
-                       }
-
-                       err := r.annotateIngress(context.TODO(), *tt.ingress)
-                       if tt.wantError != "" {
-                               require.EqualError(t, err, tt.wantError)
-                       } else {
-                               require.NoError(t, err)
-                       }
-               })
-       }
-}
diff --git a/go.mod b/go.mod
index d9e842b..0a14479 100644
--- a/go.mod
+++ b/go.mod
@@ -5,6 +5,7 @@ go 1.22.5
 require (
        github.com/go-logr/logr v1.4.1
        github.com/jmnote/tester v0.1.2
+       github.com/kuoss/common v0.1.7
        github.com/onsi/ginkgo/v2 v2.17.1
        github.com/onsi/gomega v1.32.0
        github.com/stretchr/testify v1.9.0
diff --git a/go.sum b/go.sum
index 293c951..a82383c 100644
--- a/go.sum
+++ b/go.sum
@@ -84,6 +84,8 @@ github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/kuoss/common v0.1.7 h1:2ErvqIOMxp8IenXULaX7PiAiFHVFJwcBnr8rhtt5sUQ=
+github.com/kuoss/common v0.1.7/go.mod h1:u/JgnK5aSk4hv1aqy4/JCCKz3PZ1rkB7AN27cnTd95M=
 github.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=
 github.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
 github.com/matttproud/golang_protobuf_extensions v1.0.4 h1:mmDVorXM7PCGKw94cs5zkfA9PSy5pEvNWRP0ET0TIVo=
diff --git a/pkg/matcher/matcher.go b/pkg/matcher/matcher.go
new file mode 100644
index 0000000..693e3b5
--- /dev/null
+++ b/pkg/matcher/matcher.go
@@ -0,0 +1,77 @@
+package matcher
+
+import (
+       "path/filepath"
+       "strings"
+
+       networkingv1 "k8s.io/api/networking/v1"
+
+       "github.com/kuoss/ingress-annotator/pkg/model"
+       "github.com/kuoss/ingress-annotator/pkg/rulesstore"
+)
+
+type Matcher struct {
+       rulesStore rulesstore.IRulesStore
+}
+
+func New(rulesStore rulesstore.IRulesStore) *Matcher {
+       return &Matcher{rulesStore: rulesStore}
+}
+
+func (m *Matcher) GetAnnotationsForIngress(ingress *networkingv1.Ingress) model.Annotations {
+       rules := m.rulesStore.GetRules()
+       result := model.Annotations{}
+       for _, rule := range rules {
+               if matchSelector(rule.Selector, ingress) {
+                       for key, value := range rule.Annotations {
+                               result[key] = value
+                       }
+               }
+       }
+       return result
+}
+
+func matchSelector(selector model.Selector, ingress *networkingv1.Ingress) bool {
+       // Check Include
+       included := false
+       includePatterns := strings.Split(selector.Include, ",")
+       for _, pattern := range includePatterns {
+               if matchPattern(pattern, ingress) {
+                       included = true
+                       break
+               }
+       }
+       if !included {
+               return false
+       }
+
+       // Check Exclude
+       excludePatterns := strings.Split(selector.Exclude, ",")
+       for _, pattern := range excludePatterns {
+               if matchPattern(pattern, ingress) {
+                       return false
+               }
+       }
+
+       return true
+}
+
+func matchPattern(pattern string, ingress *networkingv1.Ingress) bool {
+       parts := strings.Split(pattern, "/")
+       if len(parts) == 2 {
+               namespacePattern, namePattern := parts[0], parts[1]
+               return matchString(namespacePattern, ingress.Namespace) && matchString(namePattern, ingress.Name)
+       } else if len(parts) == 1 {
+               namespacePattern := parts[0]
+               return matchString(namespacePattern, ingress.Namespace)
+       }
+       return false
+}
+
+func matchString(pattern, str string) bool {
+       matched, err := filepath.Match(pattern, str)
+       if err != nil {
+               return false
+       }
+       return matched
+}
diff --git a/pkg/matcher/matcher_test.go b/pkg/matcher/matcher_test.go
new file mode 100644
index 0000000..f5d5273
--- /dev/null
+++ b/pkg/matcher/matcher_test.go
@@ -0,0 +1,307 @@
+package matcher
+
+import (
+       "testing"
+
+       "github.com/kuoss/common/tester"
+       "github.com/kuoss/ingress-annotator/pkg/model"
+       "github.com/kuoss/ingress-annotator/pkg/testutil/mocks"
+       "github.com/stretchr/testify/assert"
+       "go.uber.org/mock/gomock"
+       networkingv1 "k8s.io/api/networking/v1"
+       metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+)
+
+func TestGetAnnotationsForIngress(t *testing.T) {
+       rules := []model.Rule{
+               {
+                       Selector: model.Selector{
+                               Include: "default/*",
+                       },
+                       Annotations: map[string]string{
+                               "key1": "value1",
+                       },
+               },
+               {
+                       Selector: model.Selector{
+                               Include: "default/*",
+                               Exclude: "default/exclude-ingress",
+                       },
+                       Annotations: map[string]string{
+                               "key2": "value2",
+                       },
+               },
+       }
+
+       mockCtrl := gomock.NewController(t)
+       rulesStore := mocks.NewMockIRulesStore(mockCtrl)
+       rulesStore.EXPECT().GetRules().Return(rules).AnyTimes()
+       matcher := New(rulesStore)
+
+       ingress := &networkingv1.Ingress{
+               ObjectMeta: metav1.ObjectMeta{
+                       Namespace: "default",
+                       Name:      "test-ingress",
+               },
+       }
+
+       excludeIngress := &networkingv1.Ingress{
+               ObjectMeta: metav1.ObjectMeta{
+                       Namespace: "default",
+                       Name:      "exclude-ingress",
+               },
+       }
+
+       t.Run("Matching Ingress", func(t *testing.T) {
+               annotations := matcher.GetAnnotationsForIngress(ingress)
+
+               if len(annotations) != 2 {
+                       t.Errorf("expected 2 annotations, got %d", len(annotations))
+               }
+
+               if annotations["key1"] != "value1" {
+                       t.Errorf("expected annotation key1 to be value1, got %s", annotations["key1"])
+               }
+
+               if annotations["key2"] != "value2" {
+                       t.Errorf("expected annotation key2 to be value2, got %s", annotations["key2"])
+               }
+       })
+
+       t.Run("Excluded Ingress", func(t *testing.T) {
+               annotations := matcher.GetAnnotationsForIngress(excludeIngress)
+
+               if len(annotations) != 1 {
+                       t.Errorf("expected 1 annotation, got %d", len(annotations))
+               }
+
+               if annotations["key1"] != "value1" {
+                       t.Errorf("expected annotation key1 to be value1, got %s", annotations["key1"])
+               }
+
+               if _, exists := annotations["key2"]; exists {
+                       t.Errorf("expected key2 to be excluded, but it exists")
+               }
+       })
+}
+
+func TestMatchSelector(t *testing.T) {
+       mockCtrl := gomock.NewController(t)
+       rulesStore := mocks.NewMockIRulesStore(mockCtrl)
+       rules := []model.Rule{{
+               Description: "rule1",
+               Annotations: model.Annotations{"new-key": "new-value"},
+       }}
+       rulesStore.EXPECT().GetRules().Return(rules).AnyTimes()
+
+       tests := []struct {
+               name     string
+               selector model.Selector
+               ingress  *networkingv1.Ingress
+               expected bool
+       }{
+               {
+                       name: "Include matches",
+                       selector: model.Selector{
+                               Include: "namespace1/ingress1",
+                       },
+                       ingress: &networkingv1.Ingress{
+                               ObjectMeta: metav1.ObjectMeta{
+                                       Namespace: "namespace1",
+                                       Name:      "ingress1",
+                               },
+                       },
+                       expected: true,
+               },
+               {
+                       name: "Include does not match",
+                       selector: model.Selector{
+                               Include: "namespace1/ingress2",
+                       },
+                       ingress: &networkingv1.Ingress{
+                               ObjectMeta: metav1.ObjectMeta{
+                                       Namespace: "namespace1",
+                                       Name:      "ingress1",
+                               },
+                       },
+                       expected: false,
+               },
+               {
+                       name: "Exclude matches",
+                       selector: model.Selector{
+                               Exclude: "namespace1/ingress1",
+                       },
+                       ingress: &networkingv1.Ingress{
+                               ObjectMeta: metav1.ObjectMeta{
+                                       Namespace: "namespace1",
+                                       Name:      "ingress1",
+                               },
+                       },
+                       expected: false,
+               },
+               {
+                       name: "Exclude does not match",
+                       selector: model.Selector{
+                               Exclude: "namespace1/ingress2",
+                       },
+                       ingress: &networkingv1.Ingress{
+                               ObjectMeta: metav1.ObjectMeta{
+                                       Namespace: "namespace1",
+                                       Name:      "ingress1",
+                               },
+                       },
+                       expected: false,
+               },
+               {
+                       name: "Include and Exclude",
+                       selector: model.Selector{
+                               Include: "namespace1/*",
+                               Exclude: "namespace1/ingress1",
+                       },
+                       ingress: &networkingv1.Ingress{
+                               ObjectMeta: metav1.ObjectMeta{
+                                       Namespace: "namespace1",
+                                       Name:      "ingress2",
+                               },
+                       },
+                       expected: true,
+               },
+       }
+
