/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	servingv1 "knative.dev/serving/pkg/apis/serving/v1"
	modulev1 "scf.scp.samsungsds.com/crd/api/v1"
)

// ScfWatcherReconciler reconciles a ScfWatcher object
type ScfWatcherReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// Function Status JSON Data
type FunctionStatusData struct {
	functionStatus string
}

//+kubebuilder:rbac:groups=module.scf.scp.samsungsds.com,resources=scfwatchers,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=module.scf.scp.samsungsds.com,resources=scfwatchers/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=module.scf.scp.samsungsds.com,resources=scfwatchers/finalizers,verbs=update
//+kubebuilder:rbac:groups=serving.knative.dev,resources=services,verbs=get;list;watch;update;patch
//+kubebuilder:rbac:groups=core,resources=configmaps,verbs=get;list;watch

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the ScfWatcher object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *ScfWatcherReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	logger := log.FromContext(ctx)
	logger.Info("Reconcile 시작")
	managerEndpoint := "http://cp-scf-manager.scf-manager-cp:8080/api/v2/function/status/"
	// TODO(user): your logic here
	// 1. ScfWatcher CR 객체 가져오기
	logger.Info("1")
	var scfWatcher modulev1.ScfWatcher
	if err := r.Get(ctx, req.NamespacedName, &scfWatcher); err != nil {
		logger.Error(err, "Unable to fetch ScfWatcher")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// 2. 관련된 Knative Service 가져오기
	var ksvc servingv1.Service
	if err := r.Get(ctx, client.ObjectKey{Namespace: scfWatcher.Spec.KsvcNamespace, Name: scfWatcher.Spec.KsvcName}, &ksvc); err != nil {
		logger.Error(err, "Unable to fetch Knative Service")
		return ctrl.Result{}, err
	}
	logger.Info("2")
	// 3. 현재 상태와 이전 상태를 비교합니다.
	currentStatus := getStatusFromKsvc(ksvc)
	logger.Info("기존상태 : " + scfWatcher.Status.LastKsvcStatus)
	logger.Info("신규상태" + currentStatus)

	if scfWatcher.Status.LastKsvcStatus == currentStatus {
		logger.Info("3")
		if scfWatcher.Status.FailRetried == "Yes" {
			logger.Info("4")
			statusMessage := map[string]string{"functionStatus": "NOT_READY"}
			if err := sendStatusToManager(managerEndpoint, statusMessage, scfWatcher.Spec.KsvcName); err != nil {
				logger.Error(err, "Failed to send status update to manager")
				return ctrl.Result{}, err
			}
			logger.Info("ScfWatcher -> Manager 상태전송 완료")
			logger.Info("ScfWatcher -> Manager 상태전송 값 : " + "NOT_READY")

			return ctrl.Result{}, nil
		}

		// 상태에 변화가 없으면 Reconcile을 반복하지 않음
		logger.Info("상태변화 없음. Reconcile 종료")
		return ctrl.Result{}, nil
	}

	logger.Info("상태비교 끝")

	// 	// currentStatus가 "False"인 경우, 3초 후 재실행
	// if currentStatus == "False" {
	// 	logger.Info("상태 False감지 3초 뒤 reconcile 재실행")
	// 	return ctrl.Result{RequeueAfter: time.Second * 3}, nil
	// }

	// Fail 상태 감지 로직
	if currentStatus == "False" {
		logger.Info("5")
		if scfWatcher.Status.FailRetried != "Yes" {
			logger.Info("False 상태 최초 감지, FailRetried=Yes 설정 후 3초 뒤 Requeue")
			logger.Info("6")

			// FailRetried 값 설정
			scfWatcher.Status.FailRetried = "Yes"
			scfWatcher.Status.LastKsvcStatus = currentStatus
			scfWatcher.Status.LastReportedTime = metav1.Now()
			logger.Info("Fail로 인한 ScfWatcher CR Status 업데이트 완료")
			logger.Info("Fail로 인한 ScfWatcher CR Status 업데이트 값 : " + currentStatus)

			if err := r.Status().Update(ctx, &scfWatcher); err != nil {
				logger.Error(err, "Unable to update FailRetried status")
				return ctrl.Result{}, err
			}

			return ctrl.Result{RequeueAfter: time.Second * 3}, nil
		}
		logger.Info("7")

		statusMessage := map[string]string{"functionStatus": "NOT_READY"}
		if err := sendStatusToManager(managerEndpoint, statusMessage, scfWatcher.Spec.KsvcName); err != nil {
			logger.Error(err, "Failed to send status update to manager")
			return ctrl.Result{}, err
		}
		logger.Info("ScfWatcher -> Manager 상태전송 완료")
		logger.Info("ScfWatcher -> Manager 상태전송 값 : " + "NOT_READY")

		scfWatcher.Status.LastKsvcStatus = currentStatus
		scfWatcher.Status.LastReportedTime = metav1.Now()
		logger.Info("Fail로 인한 ScfWatcher CR Status 업데이트 완료")
		logger.Info("Fail로 인한 ScfWatcher CR Status 업데이트 값 : " + currentStatus)
		logger.Info("8")

		if err := r.Status().Update(ctx, &scfWatcher); err != nil {
			logger.Error(err, "Unable to update FailRetried status")
			return ctrl.Result{}, err
		}

		// 이미 FailRetried가 Yes인 경우 => Reconcile 종료
		logger.Info("False 상태 반복 감지, Reconcile 종료")
		return ctrl.Result{}, nil
	}
	logger.Info("9")

	// False이 아닌 경우는 FailRetried 리셋
	if scfWatcher.Status.FailRetried != "No" {
		scfWatcher.Status.FailRetried = "No"
		logger.Info("FailRetried 값을 No로 재설정")
	}
	logger.Info("10")

	if err := r.Status().Update(ctx, &scfWatcher); err != nil {
		logger.Error(err, "Unable to update FailRetried status")
		return ctrl.Result{}, err
	}

	// 4. scf-manager에게 상태 업데이트 전송
	returnStatus := "DEPLOYING"
	if currentStatus == "True" {
		returnStatus = "READY"
	} else if currentStatus == "False" {
		returnStatus = "NOT_READY"
	}
	logger.Info("11")

	statusMessage := map[string]string{"functionStatus": returnStatus}
	if err := sendStatusToManager(managerEndpoint, statusMessage, scfWatcher.Spec.KsvcName); err != nil {
		logger.Error(err, "Failed to send status update to manager")
		return ctrl.Result{}, err
	}
	logger.Info("ScfWatcher -> Manager 상태전송 완료")
	logger.Info("ScfWatcher -> Manager 상태전송 값 : " + returnStatus)
	logger.Info("12")

	// 6. ScfWatcher의 상태를 업데이트
	scfWatcher.Status.LastKsvcStatus = currentStatus
	scfWatcher.Status.LastReportedTime = metav1.Now()
	logger.Info("ScfWatcher CR Status 업데이트 완료")
	logger.Info("ScfWatcher CR Status 업데이트 값 : " + currentStatus)
	logger.Info("13")

	if err := r.Client.Status().Update(ctx, &scfWatcher); err != nil {
		logger.Error(err, "Unable to update ScfWatcher status")
		return ctrl.Result{}, err
	}
	return ctrl.Result{}, nil
}

// getStatusFromKsvc 함수는 Knative 서비스의 현재 상태를 확인
func getStatusFromKsvc(ksvc servingv1.Service) string {
	for _, condition := range ksvc.Status.Conditions {
		if condition.Type == "Ready" {
			if condition.Status == corev1.ConditionTrue {
				return "True"
			} else if condition.Status == corev1.ConditionFalse {
				return "False"
			} else {
				return "Unknown"
			}
		}
	}
	return "Unknown"
}

// sendStatusToManager 함수는 상태를 Manager endpoint로 전송
func sendStatusToManager(endpoint string, status map[string]string, ksvcName string) error {
	statusJSON, err := json.Marshal(status)
	if err != nil {
		return err
	}
	//resp, err := http.Post(endpoint+":"+ksvcName, "application/json", bytes.NewBuffer(statusJSON))
	req, err := http.NewRequest(http.MethodPut, endpoint+ksvcName, bytes.NewBuffer(statusJSON))
	log.Log.Info("Here is endpoint : " + endpoint + ksvcName)
	//log.Log.Info("Here is JsonBody : "+statusJSON)
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)

	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to report status: %v", resp.Status)
	}
	return nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *ScfWatcherReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&modulev1.ScfWatcher{}).                                                                       // ScfWatcher 리소스를 관찰
		Watches(&servingv1.Service{}, handler.EnqueueRequestsFromMapFunc(r.findObjectsForKnativeService)). // Knative Service 리소스를 관찰
		Complete(r)
}

func (r *ScfWatcherReconciler) findObjectsForKnativeService(ctx context.Context, obj client.Object) []reconcile.Request {
	scfWatchers := &modulev1.ScfWatcherList{}
	err := r.List(ctx, scfWatchers)
	if err != nil {
		return []reconcile.Request{}
	}

	var requests []reconcile.Request
	for _, scfWatcher := range scfWatchers.Items {
		if scfWatcher.Spec.KsvcName == obj.GetName() && scfWatcher.Spec.KsvcNamespace == obj.GetNamespace() {
			requests = append(requests, reconcile.Request{
				NamespacedName: types.NamespacedName{
					Name:      scfWatcher.Name,
					Namespace: scfWatcher.Namespace,
				},
			})
		}
	}
	return requests
}
