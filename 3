package com.scf.manager.mvc.service;


import com.scf.manager.common.crd.*;
import io.fabric8.kubernetes.api.model.KubernetesResourceList;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClientBuilder;
import io.fabric8.kubernetes.client.dsl.MixedOperation;
import io.fabric8.kubernetes.client.dsl.Resource;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class FunctionRabbitMQService {

    public void registerRabbitMQSource(String rabbitMQSourceName) {
        try (KubernetesClient client = new KubernetesClientBuilder().build()) {
            MixedOperation<RabbitMQSource, KubernetesResourceList<RabbitMQSource>, Resource<RabbitMQSource>> rabbitMQSourceClient = client.resources(RabbitMQSource.class);



            RabbitMQSourceSpec rabbitMQSourceSpec = RabbitMQSourceSpec.builder()
                    .rabbitmqClusterReference(
                            // RabbitMQ 클러스터 접속 설정
                            RabbitMQClusterReferenceSpec.builder()
                                    .connectionSecret(
                                            ConnectionSecretSpec.builder()
                                                    .name("rabbitmq-cluster-secret-credentials")
                                                    .build()
                                    )
                                    .namespace("rabbitmq")
                                    .build()
                    )
                    .rabbitMQResourcesConfig(
                            // RabbitMQ 리소스 연동 설정
                            RabbitMQResourcesConfigSpec.builder()
                                    .exchangeName(rabbitMQSourceName) // Exchange 이름 (생성되는 Exchange와 별도 통신 시 사용하는 Exchange는 "")
                                    .parallelism(1)
                                    .queueName(rabbitMQSourceName) // Queue 이름
                                    .predeclared(false) // false 설정 시, 자동 생성
                                    .build()
                    )
                    .sink(
                            // 타겟 서비스 설정
                            SinkSpec.builder()
                                    .ref(
                                            RefSpec.builder()
                                                    .apiVersion("serving.knative.dev/v1")
                                                    .kind("Service")
                                                    .name("scf-d79013ae-bb79-445d-be77-f0c9b4a78e8f-api")
                                                    .namespace("scf-d79013ae-bb79-445d-be77-f0c9b4a78e8f-api")
                                                    .build()
                                    )
                                    .build()
                    )
                    .build();

            RabbitMQSource rabbitMQSource = new RabbitMQSource();
            rabbitMQSource.getMetadata().setName(rabbitMQSourceName);
            rabbitMQSource.getMetadata().setNamespace("rabbitmq");
            rabbitMQSource.setSpec(rabbitMQSourceSpec);

            rabbitMQSourceClient.inNamespace("rabbitmq").withName(rabbitMQSourceName).delete();
            rabbitMQSourceClient.inNamespace("rabbitmq").create(rabbitMQSource);

        }
        catch (Exception e) {
            log.error("Exception [Err_Location] : {}", e.getStackTrace()[0]);
            throw new RuntimeException(e);
        }
    }
    public void deleteRabbitMQSource(String rabbitMQSourceName) {
        try (KubernetesClient client = new KubernetesClientBuilder().build()) {
            MixedOperation<RabbitMQSource, KubernetesResourceList<RabbitMQSource>, Resource<RabbitMQSource>> rabbitMQSourceClient = client.resources(RabbitMQSource.class);

            rabbitMQSourceClient.inNamespace("rabbitmq").withName(rabbitMQSourceName).delete();
        }
        catch (Exception e) {
            log.error("Exception [Err_Location] : {}", e.getStackTrace()[0]);
            throw new RuntimeException(e);
        }
    }
}
