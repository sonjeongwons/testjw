// 파일: KeepAliveLogger.java
package com.cvc.scanner.config;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Component
public class KeepAliveLogger {

    private static final Logger logger = LoggerFactory.getLogger(KeepAliveLogger.class);
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    @PostConstruct
    public void init() {
        logger.info("KeepAliveLogger started");
        scheduler.scheduleAtFixedRate(
            () -> logger.info("I'm alive"),
            0, // initial delay
            3, // period
            TimeUnit.MINUTES
        );
    }

    @PreDestroy
    public void shutdown() {
        logger.info("KeepAliveLogger shutting down");
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            scheduler.shutdownNow();
        }
    }
}


이 코드는 Spring 기반 애플리케이션에서 3분마다 "I'm alive" 로그를 출력하여 시스템이 정상 동작 중임을 알리는 KeepAliveLogger 컴포넌트야. 전반적으로 잘 구성되어 있고 실무에서도 충분히 유용하게 사용할 수 있어. 하지만 개선하거나 고려할 수 있는 몇 가지 포인트가 있어:


---

✅ 핵심 리뷰 포인트

1. 스레드 리소스 정리

Executors.newSingleThreadScheduledExecutor()는 기본적으로 non-daemon 스레드를 생성해.

애플리케이션이 강제 종료되더라도 이 스레드가 살아 있으면 완전히 종료되지 않을 수 있어.

✅ 해결 방안: 스레드 팩토리에 daemon 속성을 부여해주는 것이 좋음.

Executors.newSingleThreadScheduledExecutor(r -> {
    Thread t = new Thread(r);
    t.setDaemon(true);
    return t;
});


2. 커스터마이징 가능성

현재 주기(3분)는 코드에 하드코딩되어 있어. 운영 환경에 따라 이 값을 외부에서 주입할 수 있게 하는 것이 더 유연함.

✅ 해결 방안: application.yml 혹은 환경 변수로 주입 가능하도록 개선.

@Value("${keepalive.interval.minutes:3}")
private int intervalMinutes;


3. 스케줄러 예외 처리

scheduleAtFixedRate() 내부에서 예외가 발생하면, 해당 스레드는 더 이상 실행되지 않아.

Runnable 안에 try-catch를 넣는 것이 안정성 면에서 좋음.

✅ 해결 방안:

scheduler.scheduleAtFixedRate(() -> {
    try {
        logger.info("I'm alive");
    } catch (Exception e) {
        logger.error("Error during keep-alive logging", e);
    }
}, 0, 3, TimeUnit.MINUTES);



---

📦 코드 개선 버전 요약

@Component
public class KeepAliveLogger {

    private static final Logger logger = LoggerFactory.getLogger(KeepAliveLogger.class);

    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(r -> {
        Thread t = new Thread(r);
        t.setDaemon(true);
        return t;
    });

    @Value("${keepalive.interval.minutes:3}")
    private int intervalMinutes;

    @PostConstruct
    public void init() {
        logger.info("KeepAliveLogger started");
        scheduler.scheduleAtFixedRate(() -> {
            try {
                logger.info("I'm alive");
            } catch (Exception e) {
                logger.error("KeepAliveLogger error", e);
            }
        }, 0, intervalMinutes, TimeUnit.MINUTES);
    }

    @PreDestroy
    public void shutdown() {
        logger.info("KeepAliveLogger shutting down");
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            scheduler.shutdownNow();
        }
    }
}


---

🚀 실제 운영 환경에서의 팁

이 로그는 CloudWatch, ELK, Datadog 등과 연동 시 health-check 지표로 삼을 수 있음.

단, 너무 잦은 로그는 비용과 스토리지에 부담이 되므로 주기를 조정하고 로그 레벨을 DEBUG로 하는 것도 고려.

외부 헬스 체크 API (/healthz) 와 병행해서 사용하는 것이 더 견고한 모니터링 구조야.



---

Q1: 이 컴포넌트의 주기 설정을 실시간으로 변경할 수 있게 하려면 어떻게 구조를 바꿔야 할까?

Q2: JVM 내부 스레드가 비정상 종료되었을 때 이를 감지해서 다시 재기동할 수 있는 방법은?

Q3: 로그 대신 Prometheus에 metric으로 남기도록 구조를 바꾸려면 어떻게 리팩토링하면 좋을까?

