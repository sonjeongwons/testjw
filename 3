PR 1: 리팩토링 - 서비스 계층 개선 및 중복 코드 제거
핵심 변경 사항
메소드 분리 및 SRP(단일 책임 원칙) 적용
중복 코드 제거
유효성 검사 메소드 개선
불필요한 Optional 처리 제거
기본 코드 생성 메소드 개선
1. registerFunction 메소드 개선
개선 전 문제점:

registerFunction에서 여러 역할을 수행 (유효성 검사, 중복 확인, 저장, 초기화 등)
validationCheckFunctionName, validationCheckFunctionArgs 등에서 중복 검사
함수 생성 후 환경 변수를 설정하는 setEnvironment가 함수 내에서 직접 호출됨 → 서비스의 역할과 맞지 않음
개선 후 적용 내용:

유효성 검사 메소드 분리 (validateFunctionRequest)
중복 체크 분리 (isFunctionExists)
환경 설정 로직을 별도 메소드로 이동 (initializeFunction)
중복된 로직 제거
java
복사
편집
@Transactional
public FunctionDTO.Response registerFunction(FunctionDTO.Register reqDto) throws IOException, ParseException {
    validateFunctionRequest(reqDto);

    if (isFunctionExists(reqDto.getFunctionKey(), reqDto.getDisplayName(), reqDto.getProjectId())) {
        throw new RuntimeException("이미 존재하는 펑션 키 또는 펑션명을 사용하였습니다.");
    }

    reqDto.setName(generateFunctionName());
    reqDto.setFunctionStatus(TypeEnums.FunctionStatus.NOT_READY.getKey());

    if (!reqDto.getRuntime().startsWith("Java")) {
        reqDto.setContent(generateBaseCode(reqDto));
    }

    Function function = functionRepository.save(Function.register(reqDto));
    initializeFunction(function, reqDto);

    return function.toDto();
}

private void validateFunctionRequest(FunctionDTO.Register reqDto) {
    if (StringUtils.isEmpty(reqDto.getFunctionKey()) || StringUtils.isEmpty(reqDto.getProjectId()) 
        || StringUtils.isEmpty(reqDto.getUserId()) || StringUtils.isEmpty(reqDto.getEndPointType()) 
        || StringUtils.isEmpty(reqDto.getRuntime())) {
        throw new RuntimeException("필수 입력값을 확인해주세요.");
    }
}

private boolean isFunctionExists(String functionKey, String displayName, String projectId) {
    return functionRepository.findByFunctionKeyAndDelYn(functionKey, "N").isPresent() ||
           functionRepository.existsByDisplayNameAndProjectIdAndDelYn(displayName, projectId, "N");
}

private String generateFunctionName() {
    return "scf-" + UUID.randomUUID() + "-api";
}

private void initializeFunction(Function function, FunctionDTO.Register reqDto) {
    setEnvironment(function);

    if (!CollectionUtils.isEmpty(reqDto.getAllowIps())) {
        reqDto.getAllowIps().forEach(allowIp -> allowIpService.registerAllowIp(allowIp, function.getFunctionSeq()));
    }

    triggerService.createDefaultTrigger(function);

    if (function.getRuntime().startsWith("Java")) {
        SourceFileDTO.Register sampleDto = new SourceFileDTO.Register();
        sampleDto.setSourceFileType("sample");
        sourceFileService.saveSourceFile(sampleDto, function.getFunctionKey());
    }
}
개선된 점
✅ SRP(단일 책임 원칙) 적용:

함수의 역할을 세분화하여 가독성 및 유지보수성을 향상
✅ 중복 코드 제거:
기존의 validationCheckFunctionArgs 및 validationCheckFunctionName를 단순화
✅ 메소드 크기 축소:
registerFunction의 길이가 짧아지고, 가독성이 향상됨
2. registerFunctionCode 메소드 개선
개선 전 문제점:

function.isReady() 검사 후, 직접 저장하는 로직이 중복되어 있음
함수가 배포 가능할 때만 knativeService.callIstioAndKnative를 호출해야 하지만, 별도 처리 없이 항상 호출됨
개선 후 적용 내용:

배포 가능 상태 확인 메소드 추가 (shouldDeployFunction)
배포 상태 업데이트 분리 (updateFunctionStatus)
배포 로직을 별도 메소드로 이동 (deployFunction)
java
복사
편집
@Transactional
public FunctionDTO.Response registerFunctionCode(FunctionDTO.Register reqDto, String functionKey) throws IOException, ParseException {
    Function function = functionRepository.findByFunctionKey(functionKey)
            .orElseThrow(() -> new ResourceNotFoundException("펑션이 존재하지 않습니다."));

    function.updateContent(reqDto.getContent());

    if (shouldDeployFunction(function)) {
        deployFunction(function);
    }

    return function.toDto();
}

private boolean shouldDeployFunction(Function function) {
    return function.isReady();
}

private void deployFunction(Function function) {
    function.setFunctionStatus(TypeEnums.FunctionStatus.DEPLOYING);
    functionRepository.save(function);
    knativeService.callIstioAndKnative(function);
}
개선된 점
✅ 배포 여부 판단을 별도 메소드로 분리:

shouldDeployFunction를 사용해 논리 명확화
✅ 배포 로직을 deployFunction으로 분리:
중복 제거 및 함수 크기 축소
3. generateBaseCode 메소드 개선
개선 전 문제점:

codeName이 비어 있는 경우 default 값을 사용하지만, 불필요한 if-else 중첩이 있음
findByRuntimeAndVersionAndDefaultYn와 findByRuntimeAndVersionAndCodeName을 하나의 로직으로 합칠 수 있음
개선 후 적용 내용:

기본 값 설정 로직 개선
중복된 if-else 구조 제거
java
복사
편집
private String generateBaseCode(FunctionDTO.Register reqDto) {
    String[] array = reqDto.getRuntime().split(":");
    String runtime = array[0];
    String version = array[1];
    String codeName = StringUtils.defaultIfEmpty(reqDto.getCodeName(), "default");

    FunctionCode functionCode = functionCodeRepository.findByRuntimeAndVersionAndCodeName(runtime, version, codeName)
            .orElseThrow(() -> new ResourceNotFoundException("요청된 코드가 존재하지 않습니다."));

    return functionCode.getCodeContent();
}
개선된 점
✅ 중복된 로직 제거:

findByRuntimeAndVersionAndDefaultYn와 findByRuntimeAndVersionAndCodeName을 하나로 통합
✅ StringUtils.defaultIfEmpty 활용:
codeName이 비어 있을 때 기본값을 설정하는 로직을 간결하게 개선
PR 1 요약
✅ 메소드 역할 분리로 유지보수성 향상
✅ 중복 코드 제거로 코드 간결화
✅ 메소드 크기 축소 및 가독성 개선
✅ 의미가 명확한 메소드 명명으로 코드 이해도 상승

