apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: add-headers
  namespace: your-namespace
spec:
  workloadSelector:
    labels:
      app: your-app-label
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              request_handle:headers():add("X-Custom-Header", "MyValue")
            end




Nuri SCF에서 LLM Endpoint 호출 시, 빌링/접근제어를 위해 해당 함수의 Account ID 정보 헤더로 전달 필요
EnvoyFilter를 통해 특정 헤더를 후처리로 처리 가능


AIOS는 LLM Endpoint를 HTTPS 프로토콜로 제공
TLS 암호화된 HTTPS 프로토콜에 대해서는 헤더값 추가 불가









const express = require('express');
const app = express();
const nodefunction = require('./nodefunction.js');
 
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
 
// Route to Function Code (GET, POST, PUT, DELETE, etc)
app.all("/*", async (req, res) => {
    try {
        const response = await nodefunction.handleRequest(req);
 
        if (typeof response === "object" && response.statusCode && response.body) {
            res.set({'Content-Type': 'application/json'});
            res.status(response.statusCode).send(response.body);
        } else {
            res.set({'Content-Type': 'application/json'});
            res.status(200).send(response);
        }
    } catch (error) {
        console.error('An Error Occurred: ', error);
        res.status(500).send('Internal Server Error');
    }
})
 
////////////////////////////////////////////
//             DO NOT DELETE              //
//              BELOW LINES               //
////////////////////////////////////////////
const server = app.listen(8080, () => {
    console.log('nodejs REST API running on port 8080!');
})
 
////////////////////////////////////////////
// graceful shutdown when pod termination //
////////////////////////////////////////////
process.on('SIGTERM', function onSigterm () {
    console.info('Got SIGTERM. Graceful shutdown start', new Date().toISOString())
    shutdown()
})
 
function shutdown() {
    server.close(function onServerClosed (err) {
        if (err) {
            console.error(err)
            process.exit(1)
        }
    })
}




exports.handleRequest = async function (params) {
    /**
     * @description User writing area (Function details)
     */
    const response = {
        statusCode: 200,
        body: JSON.stringify('Hello Serverless World!'),
    };
    return response;
};














user  webadmin;
worker_processes  auto;
 
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;
 
 
events {
    worker_connections  1024;
}
 
 
http {
    #server_tokens off;
    #disable_symlinks on;
 
    #include       /etc/nginx/mime.types;
    #include        /usr/local/nginx/conf/mime.types;
    #default_type  application/octet-stream;
 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"port: $server_port"';
 
    error_log /var/log/nginx/error.log;
    access_log  /var/log/nginx/access.log  main;
 
    #sendfile        on;
    #keepalive_timeout  65;
 
    #include /usr/local/nginx/conf/conf.d/*.conf;
 
    server
    {
        listen 3128 proxy_protocol;
        #server_name 112.107.118.89;
 
        #resolver 8.8.8.8;
        resolver 198.19.0.53 ipv6=off;
 
        # ngx_http_proxy_connect_module 설정 (추가 모듈 설치 필요)
                proxy_connect;
        #proxy_connect_allow all;
        proxy_connect_allow  443 563 8443;
        #proxy_connect_connect_timeout  120s;
        #proxy_connect_read_timeout     120s;
        #proxy_connect_send_timeout     120s;
 
        location /
        {
            proxy_pass $scheme://$http_host$uri$is_args$args;
            #proxy_pass http://$http_host$uri$is_args$args;
        }
    }
}




apiVersion: v1
data:
  Corefile: |
    .:53 {
errors
health {
lameduck 5s
}
ready
kubernetes cluster.local in-addr.arpa ip6.arpa {
pods insecure
fallthrough in-addr.arpa ip6.arpa
ttl 30
}
hosts {
198.18.2.52 identity-i.kr-west1.dev2.samsungsdscloud.com acl-i.kr-west1.dev2.samsungsdscloud.com dns-i.kr-west1.dev2.samsungsdscloud.com iam-i.kr-west1.dev2.samsungsdscloud.com loadbalancer-i.kr-west1.dev2.samsungsdscl
oud.com
198.18.3.136 cortex-paas.kr-west1.dev2.samsungsdscloud.com opensearch-paas.kr-west1.dev2.samsungsdscloud.com
198.18.2.52 scf-i.kr-west1.dev2.samsungsdscloud.com
198.19.18.15 collect-metric.service-watch.private.kr-west1.dev2.samsungsdscloud.com collect-log.service-watch.private.kr-west1.dev2.samsungsdscloud.com
198.19.8.13 cvc.private.kr-west1.dev2.samsungsdscloud.com
            manager.scf.private.kr-west1.dev2.samsungsdscloud.com
fallthrough
}
rewrite name exact cron.scf.private.kr-west1.dev2.samsungsdscloud.com nginx-svc.nginx.svc
prometheus :9153
forward . /etc/resolv.conf {
max_concurrent 1000
}
cache 30
loop
reload
loadbalance
    }
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
{"apiVersion":"v1","data":{"Corefile":".:53 {\n    errors\n    health {\nlameduck 5s\n    }\n    ready\n    kubernetes cluster.local in-addr.arpa ip6.arpa {\npods insecure\nfallthrough in-addr.arpa ip6.a
rpa\nttl 30\n    }\n    prometheus :9153\n    forward . /etc/resolv.conf {\nmax_concurrent 1000\n    }\n    cache 30\n    loop\n    reload\n    loadbalance\n\n    hosts {\n198.18.2.52 identity-i.kr-west1.dev2
.samsungsdscloud.com acl-i.kr-west1.dev2.samsungsdscloud.com dns-i.kr-west1.dev2.samsungsdscloud.com iam-i.kr-west1.dev2.samsungsdscloud.com\n198.18.3.136 cortex-paas.kr-west1.dev2.samsungsdscloud.com opensearch-paas.kr-we
st1.dev2.samsungsdscloud.com\nfalllthrough\n    }\n}\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"coredns","namespace":"kube-system"}}
  creationTimestamp: "2024-10-22T05:37:02Z"
  name: coredns
  namespace: kube-system
  resourceVersion: "144270959"
