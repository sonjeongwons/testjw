[root@node1 nginx]# cat /etc/nginx/nginx.conf

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    lua_shared_dict cache 10m;  # Lua 공유 메모리 캐시

    server {
        listen 8080;
        server_name localhost;

        # 모든 요청에 대해 Lua를 사용하여 조건 처리
        location / {
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"  -- JSON 처리를 위한 라이브러리

                -- 외부 API 호출
                local httpc = http.new()
                local res, err = httpc:request_uri("http://172.28.128.13:8081/api/v1/scanner/status", {
                    method = "GET",
                    headers = {
                        ["Content-Type"] = "application/json",
                    },
                })

                -- API 호출 실패 처리
                if not res then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say(cjson.encode({ error = "Failed to call API", detail = err }))
                    return
                end


                ngx.log(ngx.ERR, "API Response Stauts: ",res.status)
                ngx.log(ngx.ERR, "API Response Body: ",res.body)

                if not res.body or res.body == "" then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({ error = "Empty API response", detail = err }))
                    return
                end

                -- 응답 JSON 데이터 파싱
                local success, response_body = pcall(cjson.decode, res.body)
                if not success or not response_body then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({ error = "Invalid API response", detail = res.body }))
                    return
                end

                ngx.log(ngx.ERR, "API Response: ", res.body)

                -- 특정 값에 따라 로직 분기
                if response_body.fileName == "TestFile" then
                    ngx.say("Okay")
                elseif response_body.fileName == "TestFolder" then
                    ngx.say("ItsFolder1")
                    local target = "http://google.com"
                    ngx.var.proxy_target = target
                    ngx.say("ItsFolder2")
                    ngx.exec("@proxy_pass")
                    ngx.say("ItsFolder3")
                elseif response_body.fileName == "TestZip" then
                    ngx.say("ItsZip")
                else
                    ngx.say("Nothing")
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say(cjson.encode({ error = "Forbidden: Invalid fileName" }))
                    return
                end
            }
        }
        location @proxy_pass {
            proxy_pass $proxy_target;  # 동적으로 설정된 proxy_target으로 요청 전달
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }
    server {
        listen 80;
        server_name localhost;

        location /lua_test {
            content_by_lua_block {
                ngx.say("Hello 80 from Lua!")
            }
        }
    }
    server {
        listen 8008;
        server_name localhost;

        location /lua_test {
            content_by_lua_block {
                ngx.say("Hello 8008 from Lua!")
            }
        }
    }

}


[root@node1 nginx]# nginx -t
nginx: [emerg] unknown "proxy_target" variable
nginx: configuration file /etc/nginx/nginx.conf test failed
