// NAT IP가 발견되었을 경우, Manager 알림
if foundNatIP != "" {
	url := NotifyManagerDomainEndpoint + functionKey
	req, err := http.NewRequest(http.MethodPut, url, nil)
	if err != nil {
		return fmt.Errorf("요청 생성 실패: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil || resp.StatusCode != http.StatusOK {
		return fmt.Errorf("Manager NAT IP 알림 실패: %v", err)
	}
	logger.Info("Manager 알림 성공", "NAT IP", foundNatIP)
	return nil
}

// NAT IP 할당 실패 → Manager에게 NOT_READY 전송
statusMessage := map[string]string{"functionStatus": "NOT_READY"}
err := sendStatusToManager("http://cp-scf-manager.scf-manager-cp:8080/api/v2/function/status/", statusMessage, scfWatcher.Spec.KsvcName)
if err != nil {
	logger.Error(err, "Manager에게 NAT IP 실패 상태 전송 실패")
} else {
	logger.Info("Manager에게 NOT_READY 상태 전송 완료 (NAT IP 실패)")
}

return fmt.Errorf("NAT IP가 할당되지 않아 Manager에게 실패 상태 전송 완료")
