/*
Copyright 2024.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package controller

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	servingv1 "knative.dev/serving/pkg/apis/serving/v1"
	modulev1 "scf.scp.samsungsds.com/crd/api/v1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// ScfWatcherReconciler reconciles a ScfWatcher object
type ScfWatcherReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

const (
	NotifyManagerDomainEndpoint = "http://cp-scf-manager.scf-manager-cp:8080/api/v2/function/domain/"
	managerEndpoint             = "http://cp-scf-manager.scf-manager-cp:8080/api/v2/function/status/"
)

var ErrNatIPNotReady = errors.New("NAT IP 미할당 상태")

func (r *ScfWatcherReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	logger := log.FromContext(ctx)
	logger.Info("Reconcile 시작")

	var scfWatcher modulev1.ScfWatcher
	if err := r.Get(ctx, req.NamespacedName, &scfWatcher); err != nil {
		logger.Error(err, "Unable to fetch ScfWatcher")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	var ksvc servingv1.Service
	if err := r.Get(ctx, client.ObjectKey{Namespace: scfWatcher.Spec.KsvcNamespace, Name: scfWatcher.Spec.KsvcName}, &ksvc); err != nil {
		logger.Error(err, "Unable to fetch Knative Service")
		return ctrl.Result{}, err
	}

	currentStatus := getStatusFromKsvc(ksvc)
	if scfWatcher.Status.LastKsvcStatus == currentStatus {
		return ctrl.Result{}, nil
	}

	scfWatcher.Status.LastKsvcStatus = currentStatus
	scfWatcher.Status.LastReportedTime = metav1.Now()
	if err := r.Status().Update(ctx, &scfWatcher); err != nil {
		logger.Error(err, "Unable to update ScfWatcher status")
		return ctrl.Result{}, err
	}

	result, err := r.checkAndNotifyNATIP(ctx, &scfWatcher)
	if err != nil {
		if errors.Is(err, ErrNatIPNotReady) {
			return result, nil
		}
		return ctrl.Result{}, err
	}

	returnStatus := "DEPLOYING"
	if currentStatus == "True" {
		returnStatus = "READY"
	} else if currentStatus == "False" {
		returnStatus = "NOT_READY"
	}
	statusMessage := map[string]string{"functionStatus": returnStatus}
	if err := sendStatusToManager(managerEndpoint, statusMessage, scfWatcher.Spec.KsvcName); err != nil {
		logger.Error(err, "Failed to send status update to manager")
		return ctrl.Result{}, err
	}
	logger.Info("ScfWatcher -> Manager 상태전송 완료", "status", returnStatus)
	return ctrl.Result{}, nil
}

func getStatusFromKsvc(ksvc servingv1.Service) string {
	for _, condition := range ksvc.Status.Conditions {
		if condition.Type == "Ready" {
			return string(condition.Status)
		}
	}
	return "Unknown"
}

func sendStatusToManager(endpoint string, status map[string]string, ksvcName string) error {
	statusJSON, err := json.Marshal(status)
	if err != nil {
		return err
	}
	req, err := http.NewRequest(http.MethodPut, endpoint+ksvcName, bytes.NewBuffer(statusJSON))
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to report status: %v", resp.Status)
	}
	return nil
}

func (r *ScfWatcherReconciler) checkAndNotifyNATIP(ctx context.Context, scfWatcher *modulev1.ScfWatcher) (ctrl.Result, error) {
	logger := log.FromContext(ctx)

	var configMap corev1.ConfigMap
	if err := r.Get(ctx, client.ObjectKey{Namespace: "scf-watcher", Name: scfWatcher.Spec.KsvcName}, &configMap); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to get ConfigMap: %w", err)
	}

	if configMap.Data["FUNCTION_URL_ENABLED"] != "True" {
		scfWatcher.Status.NatIPAllocated = false
		scfWatcher.Status.NatIPValue = ""
		scfWatcher.Status.NatIPLastCheckedTime = metav1.Now()
		scfWatcher.Status.NatIPCheckRetryCount = 0
		_ = r.Status().Update(ctx, scfWatcher)
		return ctrl.Result{}, nil
	}

	lbName := configMap.Data["LB_SERVICE_NAME"]
	lbNamespace := configMap.Data["LB_SERVICE_NAMESPACE"]
	functionKey := configMap.Data["FUNCTION_KEY"]

	var svc corev1.Service
	if err := r.Get(ctx, client.ObjectKey{Namespace: lbNamespace, Name: lbName}, &svc); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to get LoadBalancer service: %w", err)
	}

	if len(svc.Status.LoadBalancer.Ingress) < 2 || svc.Status.LoadBalancer.Ingress[1].IP == "" {
		scfWatcher.Status.NatIPAllocated = false
		scfWatcher.Status.NatIPValue = ""
		scfWatcher.Status.NatIPLastCheckedTime = metav1.Now()
		scfWatcher.Status.NatIPCheckRetryCount++
		_ = r.Status().Update(ctx, scfWatcher)

		if scfWatcher.Status.NatIPCheckRetryCount >= 3 {
			statusMessage := map[string]string{"functionStatus": "NOT_READY"}
			_ = sendStatusToManager(managerEndpoint, statusMessage, scfWatcher.Spec.KsvcName)
			return ctrl.Result{}, ErrNatIPNotReady
		}

		logger.Info("NAT IP 미할당, RequeueAfter로 재확인 예정")
		return ctrl.Result{RequeueAfter: 15 * time.Second}, nil
	}

	scfWatcher.Status.NatIPAllocated = true
	scfWatcher.Status.NatIPValue = svc.Status.LoadBalancer.Ingress[1].IP
	scfWatcher.Status.NatIPLastCheckedTime = metav1.Now()
	scfWatcher.Status.NatIPCheckRetryCount = 0
	_ = r.Status().Update(ctx, scfWatcher)

	url := NotifyManagerDomainEndpoint + functionKey
	req, err := http.NewRequest(http.MethodPut, url, nil)
	if err != nil {
		return ctrl.Result{}, err
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil || resp.StatusCode != http.StatusOK {
		return ctrl.Result{}, fmt.Errorf("failed to notify Manager: %v", err)
	}
	logger.Info("Manager에게 NAT IP 알림 성공")
	return ctrl.Result{}, nil
}
