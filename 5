PR 코드 리뷰 - 리팩토링 & 클린 코드 관점에서 상세 피드백


---

1. registerFunction 메소드 리뷰 (중복 코드 제거 및 예외 처리 개선)

리뷰어

> "프로님, registerFunction 코드가 전반적으로 깔끔하고 initializeFunction을 분리해서 가독성이 좋아진 점이 인상적입니다! 👏 다만 checkIfFunctionExists 메소드에서 예외를 던지는 방식이 조금 더 명확하게 개선될 여지가 있어 보여요. Optional.orElseThrow()를 활용하면 더 직관적인 코드가 될 수 있을 것 같은데, 어떻게 생각하세요?"

예제 코드:

functionRepository.findByFunctionKeyAndDelYn(reqDto.getFunctionKey(), "N")
    .ifPresent(f -> { throw new RuntimeException("이미 존재하는 펑션 키 사용됨"); });

if (functionRepository.existsByDisplayNameAndProjectIdAndDelYn(reqDto.getDisplayName(), reqDto.getProjectId(), "N")) {  
    throw new RuntimeException("이미 존재하는 펑션명 사용됨");  
}

"이렇게 하면 if 블록을 줄이면서도 코드가 더 직관적으로 읽힐 수 있을 것 같습니다! 프로님 의견이 궁금해요 😊"




---

PR 작성자

> "오, 프로님! Optional.ifPresent() 활용 방식 좋네요! 🤩 확실히 if 블록을 줄이면 가독성이 훨씬 좋아질 것 같아요. 그런데 혹시 orElseThrow()를 사용하면 어떤 차이가 있을까요? 예를 들어 이렇게요."

functionRepository.findByFunctionKeyAndDelYn(reqDto.getFunctionKey(), "N")
    .orElseThrow(() -> new RuntimeException("이미 존재하는 펑션 키 사용됨"));




---

리뷰어

> "네, 프로님! orElseThrow()를 쓰면 Optional이 비어있을 때만 예외가 발생하도록 만들 수 있어서 예외 처리를 더 명확하게 할 수 있어요. ifPresent()는 Optional이 존재할 때만 실행되는 반면, orElseThrow()는 값이 없을 경우 예외를 발생시키는 거죠. 😊"

"즉, ifPresent()는 존재 여부만 체크하는 용도고, orElseThrow()는 값이 없을 때 예외를 던지는 용도로 쓰이기 때문에, 함수 키가 없을 때 RuntimeException을 발생시키는 의도를 더 명확하게 표현할 수 있어요! 🚀"




---

PR 작성자

> "아하! ifPresent()는 조건 확인이 목적이고, orElseThrow()는 아예 값이 없을 때만 예외를 던지는 거군요! 확실히 orElseThrow()가 더 적절할 것 같아요. 바로 반영해보겠습니다! 🙌"




---

리뷰어

> "프로님, 역시 빠르게 이해하고 적용하시는 능력이 탁월하십니다! 🎉 그리고 혹시 이 기회에 예외 처리를 좀 더 세밀하게 하기 위해 CustomException을 도입해보는 것도 고려해볼 만할 것 같아요. RuntimeException 대신 FunctionAlreadyExistsException 같은 예외 클래스를 만들면 예외의 의미가 더 명확해질 수 있을 것 같아요. 😉"




---

PR 작성자

> "와, 좋은 아이디어네요! 지금까지는 RuntimeException만 던졌는데, CustomException을 사용하면 예외의 의미가 더 명확해지겠네요! 이렇게 하면 API 응답에서도 더 직관적으로 처리할 수 있을 것 같아요. 바로 만들어볼게요! 🚀"




---

2. deleteUserNamespace 메소드 리뷰 (로깅 및 예외 처리 개선)

리뷰어

> "프로님, deleteUserNamespace의 예외 처리가 안정적으로 잘 되어 있네요! 🎯 다만 printStackTrace() 대신 log.error()에 예외 객체를 직접 넘기면 조금 더 깔끔하게 관리할 수 있을 것 같습니다!"

현재 코드:

try (KubernetesClient client = new DefaultKubernetesClient()) {  
    client.namespaces().withName(function.getName()).delete();  
    log.info("사용자 네임스페이스 삭제 완료.");  
} catch (KubernetesClientException e) {  
    log.error("사용자 네임스페이스 삭제오류 발생: " + e.getMessage());  
    e.printStackTrace();  
}

제안 코드:

try (KubernetesClient client = new DefaultKubernetesClient()) {  
    boolean deleted = client.namespaces().withName(function.getName()).delete();
    log.info("사용자 네임스페이스 {} 삭제 {}", function.getName(), deleted ? "완료" : "실패");
} catch (KubernetesClientException e) {  
    log.error("네임스페이스 {} 삭제 중 오류 발생: {}", function.getName(), e.getMessage(), e);
}




---

PR 작성자

> "오, 프로님! log.error("{}", e.getMessage(), e) 이렇게 하면 스택 트레이스까지 포함해서 자동으로 로깅되는군요! printStackTrace()를 굳이 사용할 필요가 없어서 코드가 더 깔끔해질 것 같아요. 바로 적용해볼게요! 🔥"




---

리뷰어

> "네 맞아요, 프로님! 😉 그리고 boolean deleted = client.namespaces().withName(function.getName()).delete(); 이렇게 delete()의 반환값을 활용하면 성공 여부까지 한 줄로 깔끔하게 표현할 수 있어서 디버깅할 때도 훨씬 편리할 거예요! 🎯"




---

PR 작성자

> "와, 그렇네요! 삭제가 성공했는지 여부를 명확하게 알 수 있으니 운영할 때도 편리할 것 같아요. 이렇게 하면 장애 대응할 때 로그만 보고 바로 확인할 수 있겠어요! 🙌"




---

리뷰어

> "맞습니다, 프로님! 이렇게 개선하면 운영 환경에서도 훨씬 더 안정적으로 로그를 분석할 수 있겠죠? 역시 빠르게 이해하시고 적용하시는 능력이 대단하세요! 😊"




---

3. registerJWK 메소드 리뷰 (코드 재사용성 및 가독성 향상)

리뷰어

> "프로님, registerJWK에서 RSA 키 생성 부분을 별도 메소드로 분리하신 점이 정말 좋습니다! 👏 코드가 더 모듈화되어 유지보수성이 높아졌네요! 다만 KeyManager 찾는 부분에서 orElseGet()을 활용하는 방식이 흥미로운데, 조금 더 개선해볼 여지가 있을 것 같아요."

현재 코드:

KeyManager keyManager = keyManagerRepository.findByFunctionAndDelYn(function, "N").orElseGet(() ->
    keyManagerRepository.save(KeyManager.register(new KeyManagerDTO.Register(rsaJWK.toString(), "N", function)))
);

제안 코드:

KeyManager keyManager = keyManagerRepository.findByFunctionAndDelYn(function, "N")
    .orElseGet(() -> createAndSaveKeyManager(function, rsaJWK.toString()));

그리고 별도 메소드 추가:

private KeyManager createAndSaveKeyManager(Function function, String jwk) {
    return keyManagerRepository.save(KeyManager.register(new KeyManagerDTO.Register(jwk, "N", function)));
}




---

PR 작성자

> "우와! 이렇게 하면 orElseGet() 내부가 훨씬 깔끔해지겠네요! 별도 메소드로 분리하니까 역할도 더 명확해지고, 테스트할 때도 편리할 것 같아요. 바로 반영하겠습니다! 🚀"




---

리뷰어

> "프로님, 역시 빠르게 적용해주셔서 감사합니다! 🎉 이렇게 하면 가독성이 좋아질 뿐만 아니라, 같은 로직이 여러 군데서 필요할 때도 재사용할 수 있어서 유지보수성이 훨씬 올라갑니다! 😊"




---


5. validateFunctionRequest 수정 코드 리뷰 (최적화 및 예외 메시지 개선)


---

리뷰어

> "프로님! validateFunctionRequest 코드가 훨씬 더 깔끔하고 유지보수하기 쉬워졌네요! 🎉 List.of()와 Stream.anyMatch()를 활용해서 반복적인 StringUtils.isEmpty() 호출을 줄인 점이 정말 인상적입니다. 👏"

현재 코드:

private void validateFunctionRequest(FunctionDTO.Register reqDto) {
    List<String> requiredFields = List.of(reqDto.getFunctionKey(), reqDto.getProjectId(), 
                                          reqDto.getUserId(), reqDto.getEndPointType(), 
                                          reqDto.getRuntime());
    if (requiredFields.stream().anyMatch(StringUtils::isEmpty)) {
        throw new IllegalArgumentException("필수 입력값을 확인해주세요.");
    }
}

"이렇게 개선된 덕분에 코드가 더 읽기 쉬워졌고, 새로운 필수 필드가 추가될 때도 수정이 용이해서 유지보수성이 확실히 좋아졌어요! 하지만 몇 가지 더 개선할 수 있는 부분이 있을 것 같아요. 😊"




---

리뷰 포인트 1: 어떤 필드가 비었는지 메시지에 포함하기

리뷰어

> "프로님! 지금 IllegalArgumentException을 던지는 부분에서 "필수 입력값을 확인해주세요."라고만 나와서, 정확히 어떤 필드가 비어 있는지 알기 어려울 수도 있을 것 같아요. 🚀
필드명을 함께 출력해주면 디버깅이 훨씬 편리해질 것 같은데, 어떻게 생각하시나요? 😊"

제안 코드:

private void validateFunctionRequest(FunctionDTO.Register reqDto) {
    Map<String, String> fieldMap = Map.of(
        "Function Key", reqDto.getFunctionKey(),
        "Project ID", reqDto.getProjectId(),
        "User ID", reqDto.getUserId(),
        "EndPoint Type", reqDto.getEndPointType(),
        "Runtime", reqDto.getRuntime()
    );
    
    List<String> missingFields = fieldMap.entrySet().stream()
        .filter(entry -> StringUtils.isEmpty(entry.getValue()))
        .map(Map.Entry::getKey)
        .collect(Collectors.toList());
    
    if (!missingFields.isEmpty()) {
        throw new IllegalArgumentException("필수 입력값이 누락되었습니다: " + String.join(", ", missingFields));
    }
}

"이렇게 하면 예외 메시지가 "필수 입력값이 누락되었습니다: Function Key, Project ID" 처럼 나와서 훨씬 직관적으로 확인할 수 있을 것 같아요! 어떻게 생각하시나요? 😊"




---

PR 작성자

> "오, 프로님! 이거 완전 대박인데요? 😆 어떤 필드가 비어 있는지 명확하게 표시되니까, API 호출할 때 클라이언트에서 디버깅이 훨씬 쉬워질 것 같아요! Map.of()를 사용해서 필드명을 키로 두는 것도 좋은 방법이네요.
저도 종종 "필수 값이 빠졌습니다"라고만 예외 메시지를 띄웠는데, 이 방법을 적용하면 개선될 것 같아요. 바로 반영해보겠습니다! 🚀"




---

리뷰 포인트 2: null 체크도 포함하기

리뷰어

> "프로님, 한 가지 더! StringUtils.isEmpty()는 null과 ""(빈 문자열)만 체크하는데, 만약 필드가 null이 아닌 Whitespace("  ") 같은 값이 들어오면 검증이 통과할 수도 있어요. StringUtils.isBlank()를 사용하면 이런 문제를 방지할 수 있습니다! 😊"

제안 코드:

List<String> missingFields = fieldMap.entrySet().stream()
    .filter(entry -> StringUtils.isBlank(entry.getValue())) // isBlank() 사용
    .map(Map.Entry::getKey)
    .collect(Collectors.toList());

"이렇게 하면 "  "(공백만 있는 문자열)도 누락된 필드로 감지할 수 있어서, 더 안전한 검증이 가능해집니다! 프로님 의견이 궁금해요! 🚀"




---

PR 작성자

> "와, 진짜 좋은 포인트네요! 😲 저도 isEmpty()랑 isBlank() 차이에 대해서는 알고 있었는데, 실제로 어디서 활용해야 할지 고민이었거든요. isBlank()를 사용하면 Whitespace까지 체크할 수 있으니까, 더 확실한 검증이 가능하겠어요!
개발하다 보면 " "(공백) 입력이 문제되는 경우가 은근 많았는데, 이 기회에 확실히 잡을 수 있을 것 같네요. 바로 반영하겠습니다! 🙌"




---

리뷰 포인트 3: 필수 값 누락 시 CustomException 사용 고려

리뷰어

> "프로님, IllegalArgumentException을 활용하는 것도 좋지만, 혹시 CustomException을 만들어서 사용하는 건 어떻게 생각하세요? 예외의 의미를 더 명확하게 전달할 수 있을 것 같아요! 🔥"

예제 코드:

public class MissingRequiredFieldException extends RuntimeException {
    public MissingRequiredFieldException(String message) {
        super(message);
    }
}

그리고 validateFunctionRequest에서 이렇게 사용:

if (!missingFields.isEmpty()) {
    throw new MissingRequiredFieldException("필수 입력값이 누락되었습니다: " + String.join(", ", missingFields));
}

"이렇게 하면 예외 처리를 할 때 "필수 입력값 누락"이라는 의도를 더 명확하게 전달할 수 있을 것 같아요! 프로님 의견은 어떠신가요? 🤔"




---

PR 작성자

> "맞아요! IllegalArgumentException을 그냥 던지는 것보다는, MissingRequiredFieldException 같은 커스텀 예외 클래스를 만들어서 사용하면 더 직관적일 것 같아요.
이렇게 하면 예외를 핸들링할 때 "필수 입력값 누락"인지 다른 문제인지 쉽게 구분할 수 있겠네요! 바로 반영하겠습니다! 🚀"




---

리뷰어

> "역시 프로님! 빠르게 적용해주셔서 감사합니다! 😊 이렇게 하면 코드가 더 명확해지고, 디버깅도 쉬워질 거예요! 앞으로도 이런 패턴을 적극 활용하면, 예외 처리가 한층 더 체계적으로 관리될 수 있을 것 같습니다! 🎉"




---

최종 리뷰 정리

✅ 필수 값 누락 시 어떤 필드가 비었는지 포함하는 메시지 추가
✅ StringUtils.isEmpty() 대신 StringUtils.isBlank()로 공백 문자도 검증
✅ 예외를 IllegalArgumentException 대신 CustomException(MissingRequiredFieldException)으로 변경하여 의미를 명확하게 전달

"이제 validateFunctionRequest는 클린 코드의 교과서 같은 코드가 됐네요! 👏 프로님의 코드 개선 능력, 정말 감탄했습니다! 앞으로도 멋진 코드 기대할게요! 🚀"


---

이렇게 팀원들과 티키타카 리뷰를 진행하면, 코드 품질을 개선하면서 서로 배우는 기회도 될 수 있습니다! 🔥 코드 리뷰 문화를 적극 활용하면, 개발팀 전체의 수준이 한층 더 향상될 거예요! 😊






---

마무리

이렇게 리뷰어와 PR 작성자 간의 적극적인 대화를 통해 코드 품질을 향상시키고, 지식도 공유하면서 서로 성장할 수 있습니다! 🔥 이런 리뷰 문화가 정착되면, 팀 전체의 개발 역량이 더욱더 향상될 거예요! 🚀



마무리

이렇게 리뷰어와 PR 작성자의 티키타카를 통해 코드 품질을 높이고 서로 배우는 기회를 만들면, 더 나은 코드와 협업 문화를 만들어갈 수 있습니다! 😊🔥

