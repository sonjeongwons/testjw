[root@node1 lua-cjson]# cat /etc/nginx/nginx.conf

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    lua_shared_dict cache 10m;  # Lua 공유 메모리 캐시

    server {
        listen 8080;
        server_name localhost;

        # 모든 요청에 대해 Lua를 사용하여 조건 처리
        location / {
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"  -- JSON 처리를 위한 라이브러리

                -- 외부 API 호출
                local httpc = http.new()
                local res, err = httpc:request_uri("http://172.28.128.13:8081/api/v1/scanner/status", {
                    method = "GET",
                    headers = {
                        ["Content-Type"] = "application/json",
                    },
                })

                -- API 호출 실패 처리
                if not res then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say(cjson.encode({ error = "Failed to call API", detail = err }))
                    return
                end


                ngx.log(ngx.ERR, "API Response Stauts: ",res.status)
                ngx.log(ngx.ERR, "API Response Body: ",res.body)

                if not res.body or res.body == "" then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({ error = "Empty API response", detail = err }))
                    return
                end

                -- 응답 JSON 데이터 파싱
                local success, response_body = pcall(cjson.decode, res.body)
                if not success or not response_body then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({ error = "Invalid API response", detail = res.body }))
                    return
                end

                -- 조건 확인: fileName이 "TestFile"인지 확인
                if response_body.fileName == "TestFile" then
                    -- 조건 만족: 프록시로 요청 전달
                    local target = "http://$host$request_uri"
                    ngx.var.proxy_target = target
                    ngx.exec("@proxy_pass")
                else
                    -- 조건 불만족: 요청 거절
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say(cjson.encode({ error = "Forbidden: name is not 'TestFile'" }))
                    return
                end
            }
        }

        # proxy_pass 처리
        location @proxy_pass {
            proxy_pass http://172.28.128.13:8081;  # 실제 백엔드 서버의 업스트림 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}



coroutine 0:
        [C]: in function 'error'
        /usr/local/share/lua/5.1/resty/core/var.lua:144: in function '__newindex'
        content_by_lua(nginx.conf:25):43: in main chunk, client: 127.0.0.1, server: localhost, request: "GET / HTTP/1.1", host: "localhost:8080"
2025/01/26 15:38:10 [error] 31765#0: *37 [lua] content_by_lua(nginx.conf:25):22: API Response Stauts: 200, client: 127.0.0.1, server: localhost, request: "GET / HTTP/1.1", host: "localhost:8080"
2025/01/26 15:38:10 [error] 31765#0: *37 [lua] content_by_lua(nginx.conf:25):23: API Response Body: {"fileName":"TestFile","returnCode":0,"message":"API is running"}, client: 127.0.0.1, server: localhost, request: "GET / HTTP/1.1", host: "localhost:8080"
2025/01/26 15:38:10 [error] 31765#0: *37 lua entry thread aborted: runtime error: content_by_lua(nginx.conf:25):43: variable "proxy_target" not found for writing; maybe it is a built-in variable that is not changeable or you forgot to use "set $proxy_target '';" in the config file to define it first
stack traceback:
coroutine 0:
        [C]: in function 'error'
        /usr/local/share/lua/5.1/resty/core/var.lua:144: in function '__newindex'
        content_by_lua(nginx.conf:25):43: in main chunk, client: 127.0.0.1, server: localhost, request: "GET / HTTP/1.1", host: "localhost:8080"
