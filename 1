package com.scf.manager.mvc.service;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;
import com.scf.manager.base.domain.FunctionCode;
import com.scf.manager.base.repository.FunctionCodeRepository;
import com.scf.manager.common.crd.*;
import com.scf.manager.common.enums.TypeEnums;
import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.common.util.AppUtil;
import com.scf.manager.common.util.UrlUtil;
import com.scf.manager.mvc.domain.AllowIp;
import com.scf.manager.mvc.domain.Function;
import com.scf.manager.mvc.domain.FunctionEnvironment;
import com.scf.manager.mvc.domain.KeyManager;
import com.scf.manager.mvc.dto.*;
import com.scf.manager.mvc.repository.*;
import io.fabric8.istio.api.security.v1beta1.*;
import io.fabric8.istio.api.type.v1beta1.WorkloadSelectorBuilder;
import io.fabric8.istio.client.DefaultIstioClient;
import io.fabric8.istio.client.IstioClient;
import io.fabric8.knative.client.DefaultKnativeClient;
import io.fabric8.knative.client.KnativeClient;
import io.fabric8.knative.serving.v1.Service;
import io.fabric8.knative.serving.v1.ServiceBuilder;
import io.fabric8.knative.serving.v1.ServiceList;
import io.fabric8.knative.sources.v1.PingSource;
import io.fabric8.knative.sources.v1.PingSourceBuilder;
import io.fabric8.kubernetes.api.model.*;
import io.fabric8.kubernetes.client.DefaultKubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClientBuilder;
import io.fabric8.kubernetes.client.dsl.MixedOperation;
import io.fabric8.kubernetes.client.dsl.Resource;
import io.fabric8.kubernetes.client.dsl.base.PatchContext;
import io.fabric8.kubernetes.client.dsl.base.PatchType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.text.ParseException;
import java.util.*;
import java.util.stream.Collectors;

import static com.scf.manager.common.constants.ExceptionConst.FILE_HANDLE_EXCEPTION;
import static com.scf.manager.common.constants.ExceptionConst.FILE_TYPE_EXCEPTION;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class FunctionRabbitMQService {

    public void makeRabbitMQSource(String rabbitMQSourceName) {
        try (KubernetesClient client = new KubernetesClientBuilder().build()) {
            MixedOperation<RabbitMQSource, KubernetesResourceList<RabbitMQSource>, Resource<RabbitMQSource>> rabbitMQSourceClient = client.resources(RabbitMQSource.class);

            RabbitMQSource rabbitMQSource = new RabbitMQSource();

            RabbitMQSourceSpec rabbitMQSourceSpec = RabbitMQSourceSpec.builder()
                    .rabbitmqClusterReference(
                            // RabbitMQ 클러스터 접속 설정
                            RabbitMQClusterReferenceSpec.builder()
                                    .connectionSecret(
                                            ConnectionSecretSpec.builder()
                                                    .name("rabbitmq-cluster-secret-credentials")
                                                    .build()
                                    )
                                    .namespace("rabbitmq")
                                    .build()
                    )
                    .rabbitMQResourcesConfig(
                            // RabbitMQ 리소스 연동 설정
                            RabbitMQResourcesConfigSpec.builder()
                                    .exchangeName(rabbitMQSourceName) // Exchange 이름 (생성되는 Exchange와 별도 통신 시 사용하는 Exchange는 "")
                                    .parallelism(1)
                                    .queueName(rabbitMQSourceName) // Queue 이름
                                    .predeclared(false) // false 설정 시, 자동 생성
                                    .build()
                    )
                    .sink(
                            // 타겟 서비스 설정
                            SinkSpec.builder()
                                    .ref(
                                            RefSpec.builder()
                                                    .apiVersion("serving.knative.dev/v1")
                                                    .kind("Service")
                                                    .name("scf-d79013ae-bb79-445d-be77-f0c9b4a78e8f-api")
                                                    .namespace("scf-user")
                                                    .build()
                                    )
                                    .build()
                    )
                    .build();

            rabbitMQSource.getMetadata().setName(rabbitMQSourceName);
            rabbitMQSource.getMetadata().setNamespace("rabbitmq");
            rabbitMQSource.setSpec(rabbitMQSourceSpec);

            rabbitMQSourceClient.inNamespace("rabbitmq").withName(rabbitMQSourceName).delete();
            rabbitMQSourceClient.inNamespace("rabbitmq").create(rabbitMQSource);

        }
    }
    public void deleteRabbitMQSource(String rabbitMQSourceName) {
        try (KubernetesClient client = new KubernetesClientBuilder().build()) {
            MixedOperation<RabbitMQSource, KubernetesResourceList<RabbitMQSource>, Resource<RabbitMQSource>> rabbitMQSourceClient = client.resources(RabbitMQSource.class);

            rabbitMQSourceClient.inNamespace("rabbitmq").withName(rabbitMQSourceName).delete();
        }
    }

}
