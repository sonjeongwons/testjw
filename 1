2025-02-01 16:40:21 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed: java.lang.OutOfMemoryError: Java heap space] with root cause
java.lang.OutOfMemoryError: Java heap space
        at java.base/java.io.InputStream.readNBytes(InputStream.java:405)
        at org.springframework.http.converter.ByteArrayHttpMessageConverter.readInternal(ByteArrayHttpMessageConverter.java:57)
        at org.springframework.http.converter.ByteArrayHttpMessageConverter.readInternal(ByteArrayHttpMessageConverter.java:38)
        at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:198)
        at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:203)
        at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:176)
        at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:150)
        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:226)
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:180)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)









package com.example.demo.service;

import com.example.demo.controller.V3ScannerController;
import com.example.demo.dto.FileDto;
import com.ahnlab.v3engine.V3Const;
import com.ahnlab.v3engine.V3Scanner;
import com.ahnlab.v3engine.*;

import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.CompletableFuture;


@Service
public class V3ScannerService {

    private static final Logger logger = LoggerFactory.getLogger(V3ScannerService.class);
    private final String chunkBaseDir = "/tmp/chunks";  // 청크 저장 디렉토리

    @Value("${api.key}")
    private String validApiKey;
    //private static final String VALID_API_KEY = "CVCKEY";

    public boolean validateApiKey(String apiKey) {
        return validApiKey.equals(apiKey);
    }

    public Map<String, Object> simpleScan(String filename) {
        Map<String, Object> result = new HashMap<>();
        int ret = V3Scanner.scanFile(filename);
        result.put("filename", filename);
        result.put("returnCode", ret);
        printScanInfo(filename, ret, null);
        return result;
    }

    public Map<String, Object> remoteScan(String filename) {
        Map<String, Object> result = new HashMap<>();
        Properties prop = new Properties();
        int ret = V3Scanner.remoteScanFile(filename, prop);

        result.put("filename", filename);
        result.put("returnCode", ret);
        result.put("details", prop);
        return result;
    }

    public Map<String, Object> detailScan(String filename) {
        Map<String, Object> result = new HashMap<>();
        Properties prop = new Properties();
        int ret = V3Scanner.scanFile(filename, prop);

        result.put("filename", filename);
        result.put("returnCode", ret);
        result.put("details", prop);
        return result;
    }

    public FileDto.Response scanBase64File(FileDto.Request fileDtoRequest) {
        File tempFile = null;
        try {
            // 파일 디코딩 후 임시파일로 저장
            byte[] fileData = Base64.getDecoder().decode(fileDtoRequest.getFileData());
            String baseDir = "/tmp/"; // 임시 디렉터리로 변경
            String uniqueFileName = "scan_" + UUID.randomUUID() + "_" + Instant.now().toEpochMilli() + "_" + fileDtoRequest.getFileName();
            tempFile = new File(baseDir + File.separator + uniqueFileName);
            String FilePath = tempFile.getAbsolutePath();
            logger.info("tempFile : {}", FilePath);
            Properties prop = new Properties();

            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                fos.write(fileData);
                fos.flush();
                System.out.println("파일 내용 확인 :  "+ new String(fileData));
            }
            // 파일 스캔 수행
            int ret = V3Scanner.scanFile(FilePath, prop);
            printScanInfo(FilePath, ret, prop);
            return FileDto.Response.builder()
                    .fileName(fileDtoRequest.getFileName())
                    .returnCode(ret)
                    .message(prop.getProperty(V3Const.PROP_KEY_MORE_INFO))
                    .build();
        } catch (Exception e) {
            return FileDto.Response.builder()
                    .fileName(fileDtoRequest.getFileName())
                    .returnCode(-1)
                    .message("File processing failed: " + e.getMessage())
                    .build();
        } finally {
            if (tempFile != null && tempFile.exists()) {
                try {
                    Files.delete(tempFile.toPath());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public FileDto.Response scanMultipartFile(MultipartFile file) {
        File tempFile = null;
        try {
            // 파일 크기 제한 (1GB)
            if (file.getSize() > 1024L * 1024L * 1024L) {
                return FileDto.Response.builder()
                        .fileName(file.getOriginalFilename())
                        .returnCode(-1)
                        .message("File size exceeds the 1GB limit.")
                        .build();
            }

            // 파일 확장자 필터링
            String fileName = file.getOriginalFilename();
            if (isDeniedExtension(fileName)) {
                return FileDto.Response.builder()
                        .fileName(fileName)
                        .returnCode(-1)
                        .message("Unsupported file type.")
                        .build();
            }
            Properties prop = new Properties();
            logger.info("Processing file on disk.");
            tempFile = Files.createTempFile("scan_", "_" + UUID.randomUUID() + "_" + Instant.now().toEpochMilli() + "_" + fileName).toFile();
            logger.info("tempFile : {}", tempFile.getAbsolutePath());
            file.transferTo(tempFile);

            int ret = V3Scanner.scanFile(tempFile.getAbsolutePath(), prop); // 디스크 기반 검사
            printScanInfo(tempFile.getAbsolutePath(), ret, prop);
            return buildResponse(fileName, ret, prop);

        } catch (Exception e) {
            return FileDto.Response.builder()
                    .fileName(file.getOriginalFilename())
                    .returnCode(-1)
                    .message("File processing failed: " + e.getMessage())
                    .build();
        } finally {
            if (tempFile != null && tempFile.exists()) {
                try {
                    tempFile.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public FileDto.Response scanBinaryFile(String fileName, byte[] fileData) {
        File tempFile = null;
        try {
            // 파일 크기 제한 (1GB)
            if (fileData.length > 1024L * 1024L * 1024L) {
                return FileDto.Response.builder()
                        .fileName(fileName)
                        .returnCode(-1)
                        .message("File size exceeds the 1GB limit.")
                        .build();
            }

            // 파일 확장자 필터링
            if (isDeniedExtension(fileName)) {
                return FileDto.Response.builder()
                        .fileName(fileName)
                        .returnCode(-1)
                        .message("Unsupported file type.")
                        .build();
            }

            Properties prop = new Properties();
            logger.info("Processing file on disk.");
            tempFile = Files.createTempFile("scan_", "_" + UUID.randomUUID() + "_" + Instant.now().toEpochMilli() + "_" + fileName).toFile();
            logger.info("tempFile : {}", tempFile.getAbsolutePath());
            Files.write(tempFile.toPath(), fileData); // 파일 데이터 디스크에 저장

            int ret = V3Scanner.scanFile(tempFile.getAbsolutePath(), prop); // 디스크 기반 검사
            printScanInfo(tempFile.getAbsolutePath(), ret, prop);
            return buildResponse(fileName, ret, prop);

        } catch (Exception e) {
            return FileDto.Response.builder()
                    .fileName(fileName)
                    .returnCode(-1)
                    .message("File processing failed: " + e.getMessage())
                    .build();
        } finally {
            if (tempFile != null && tempFile.exists()) {
                try {
                    tempFile.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 청크 저장 로직
     */
    public void saveChunk(String fileId, int chunkIndex, byte[] chunkData) throws Exception {
        Path chunkDir = Paths.get(chunkBaseDir, fileId);  // 파일 ID 기반 디렉토리 생성
        if (!Files.exists(chunkDir)) {
            Files.createDirectories(chunkDir);  // 디렉토리가 없으면 생성
        }
        Path chunkFile = chunkDir.resolve("chunk_" + chunkIndex);  // 청크 파일 이름
        Files.write(chunkFile, chunkData);  // 청크 데이터 저장
        logger.info("Saved chunk: FileId={}, ChunkIndex={}", fileId, chunkIndex);
    }

    /**
     * 병합 및 스캔 로직
     */
    public FileDto.Response mergeChunksAndScan(String fileId, String fileName) throws Exception {
        Path chunkDir = Paths.get(chunkBaseDir, fileId);
        Path mergedFile = Paths.get("/tmp/" + UUID.randomUUID() + "_" + fileName);  // 병합 파일 이름에 UUID 추가

        try {
            // 1. 병합 작업
            try (FileOutputStream outputStream = new FileOutputStream(mergedFile.toFile())) {
                Files.list(chunkDir)
                        .sorted()  // 청크 파일 정렬
                        .forEach(chunk -> {
                            try {
                                Files.copy(chunk, outputStream);
                            } catch (Exception e) {
                                throw new RuntimeException("Failed to merge chunk: " + chunk.getFileName(), e);
                            }
                        });
            }
            logger.info("tempFile : {}", mergedFile.toString());
            // 2. 스캔 작업 수행
            Properties prop = new Properties();
            int ret = V3Scanner.scanFile(mergedFile.toString(), prop);
            printScanInfo(mergedFile.toString(), ret, prop);

            // 3. 결과 반환
            return FileDto.Response.builder()
                    .fileName(fileName)
                    .returnCode(ret)
                    .message(prop.getProperty(V3Const.PROP_KEY_MORE_INFO, "No additional information."))
                    .build();

        } finally {
            // 4. 병합 파일 및 청크 디렉토리 삭제
            try {
                if (Files.exists(mergedFile)) {
                    Files.delete(mergedFile);
                    logger.info("Deleted merged file: {}", mergedFile);
                }
                if (Files.exists(chunkDir)) {
                    Files.walk(chunkDir)
                            .sorted(Comparator.reverseOrder())  // 하위 파일부터 삭제
                            .forEach(path -> {
                                try {
                                    Files.delete(path);
                                } catch (Exception e) {
                                    logger.warn("Failed to delete chunk file: {}", path, e);
                                }
                            });
                    logger.info("Deleted chunk directory: {}", chunkDir);
                }
            } catch (Exception e) {
                logger.error("Failed to clean up files: {}", e.getMessage());
            }
        }
    }

    // 지원되는 파일 확장자 확인
    private boolean isDeniedExtension(String fileName) {
        String[] allowedExtensions = {".exe", ".bat"};
        String lowerFileName = fileName.toLowerCase();
        return Arrays.stream(allowedExtensions).anyMatch(lowerFileName::endsWith);
    }

    // Response 생성 헬퍼 메서드
    private FileDto.Response buildResponse(String fileName, int ret, Properties prop) {
        return FileDto.Response.builder()
                .fileName(fileName)
                .returnCode(ret)
                .message(prop.getProperty(V3Const.PROP_KEY_MORE_INFO, "No additional information."))
                .build();
    }

    static void printScanInfo(String filename, int ret, Properties prop)
    {
        // message
        String msg = "";
        switch (ret)
        {
            case V3Const.RET_AUTH_FAILED	: msg = "인증 실패";
                break;

            case V3Const.RET_CLIENT_TIMEOUT  : msg = "검사 요청 클라이언트 TIMEOUT";
                break;

            case V3Const.RET_NETWORK_ERROR  : msg = "네트워크 장애";
                break;

            case V3Const.RET_CLIENT_FAIL  : msg = "검사 요청 클라이언트 오류";
                break;

            case V3Const.RET_CANNOT_SCAN  : msg = "검사 실패";
                break;

            case V3Const.RET_NO_MALWARE   : msg = "악성코드 없음";
                break;

            case V3Const.RET_MALWARE_FOUND : msg = "악성코드 발견";
                break;

            case V3Const.RET_CLEAN_MODIFY_SUCCESS   : msg = "수정 치료 성공";
                break;

            case V3Const.RET_CLEAN_MODIFY_FAIL      : msg = "수정 치료 실패(삭제 권고)";
                break;

            case V3Const.RET_CLEAN_DEL_SUCCESS      : msg = "삭제 치료 성공";
                break;

            case V3Const.RET_CLEAN_DEL_FAIL      : msg = "삭제 치료 실패(삭제 권고)";
                break;

            case V3Const.RET_CLEAN_DEL_FAIL_BYCONF      : msg = "삭제 치료 실패(검사 서버 옵션)";
                break;

            default: msg = "알수 없음";
                break;
        }

        // 정보 출력
        System.out.println("filename  : " + filename);
        System.out.println("return    : " + ret + " (" + msg + ")");
        if (prop != null)
        {
            System.out.println("date rev  : " + prop.getProperty(V3Const.PROP_KEY_DATE_REV, "N/A"));
            System.out.println("scan time : " + prop.getProperty(V3Const.PROP_KEY_SCAN_DATE_TIME, "N/A"));
            System.out.println("more info : " + prop.getProperty(V3Const.PROP_KEY_MORE_INFO, "N/A"));
            if (ret == V3Const.RET_MALWARE_FOUND)
            {
                System.out.println( " malware : " + prop.getProperty(V3Const.PROP_KEY_MALWARE_NAME, "N/A") );
                System.out.println( "     in  : " + prop.getProperty(V3Const.PROP_KEY_MALWARE_FILE, "N/A") );
            }
            System.out.println(prop);
        }
        System.out.println("");
    }
}
