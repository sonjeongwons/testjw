좋아, Lambda–VPC 통신 테스트용으로 가장 간단한 예제를 만들어줄게.


---

1. 테스트용 Lambda 코드

Python (lambda_function.py)

import json

def lambda_handler(event, context):
    # 단순히 EC2로 테스트할 경우, 여기서 socket/curl 등으로 접근하면 됨
    return {
        "statusCode": 200,
        "body": json.dumps("Hello from Lambda!")
    }

반환 포맷을 {statusCode, body} 로 하면 API Gateway 같은 서비스와도 쉽게 연동할 수 있다.

EC2와 통신 테스트를 원한다면, 여기서 socket 또는 requests 라이브러리를 이용해 EC2의 사설 IP:PORT 에 접속 시도 코드를 넣어주면 된다.


예시 (EC2 172.31.10.25:3003 TCP 연결):

import socket

def lambda_handler(event, context):
    try:
        with socket.create_connection(("172.31.10.25", 3003), timeout=3) as sock:
            msg = b"ping"
            sock.sendall(msg)
            resp = sock.recv(1024)
        return {
            "statusCode": 200,
            "body": f"Connected to EC2. Response: {resp.decode()}"
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": f"Connection failed: {str(e)}"
        }


---

2. 배포 방법 (CLI 예시)

1. 패키징



zip function.zip lambda_function.py

2. 함수 생성



aws lambda create-function \
  --function-name MyVpcTestFn \
  --runtime python3.12 \
  --handler lambda_function.lambda_handler \
  --zip-file fileb://function.zip \
  --role arn:aws:iam::<계정ID>:role/<LambdaExecutionRole> \
  --vpc-config SubnetIds=subnet-abc123,subnet-def456,SecurityGroupIds=sg-lambda


---

3. 호출 방법

단순 호출 (응답 확인)

aws lambda invoke \
  --function-name MyVpcTestFn \
  --payload '{}' \
  --cli-binary-format raw-in-base64-out \
  out.json

터미널 출력은 StatusCode, ExecutedVersion 같은 메타데이터만 보여준다.

실제 body 값은 out.json 파일에 저장된다.


cat out.json
# "Hello from Lambda!"

로그까지 같이 확인

aws lambda invoke \
  --function-name MyVpcTestFn \
  --payload '{}' \
  --cli-binary-format raw-in-base64-out \
  --log-type Tail \
  out.json \
  --query 'LogResult' \
  --output text | base64 --decode


---

4. 네트워크 점검 포인트

Lambda 함수 VPC 설정: EC2와 같은 VPC, 같은 AZ의 프라이빗 서브넷 선택.

SG: Lambda SG → EC2 SG 방향으로 테스트 포트(3003 등) 열어두기.

NAT 불필요: 사설 통신만 할 거면 NAT는 필요 없다.



---

👉 이렇게 하면 aws lambda invoke 결과를 out.json에서 확인하면서, EC2와의 네트워크 통신 여부까지 바로 점검할 수 있어.


---

Q1
EC2와의 TCP 통신이 실패할 때, Lambda 실행 로그에서 어떤 메시지/에러 유형을 먼저 확인해야 할까?

Q2
내가 테스트하려는 포트가 여러 개일 때, Lambda SG와 EC2 SG 규칙을 어떻게 구성하는 게 가장 효율적일까?

Q3
CloudWatch Logs 대신 S3 같은 저장소로 Lambda 결과를 바로 남기고 싶다면 어떤 방식으로 코드를 수정하는 게 좋을까?

