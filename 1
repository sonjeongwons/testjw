@PostMapping(value = "/upload-chunk", consumes = MediaType.APPLICATION_OCTET_STREAM_VALUE)
public ResponseEntity<String> uploadChunk(
        @RequestHeader("File-Id") String fileId,
        @RequestHeader("Chunk-Index") int chunkIndex,
        @RequestBody byte[] chunkData) {

    try {
        // 청크 데이터 저장
        v3ScannerService.saveChunk(fileId, chunkIndex, chunkData);
        return ResponseEntity.ok("Chunk uploaded successfully.");
    } catch (Exception e) {
        logger.error("Failed to upload chunk: {}", e.getMessage());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Chunk upload failed.");
    }
}

@PostMapping("/merge-chunks")
public ResponseEntity<FileDto.Response> mergeChunksAndScan(
        @RequestHeader("File-Id") String fileId,
        @RequestHeader("File-Name") String fileName) {

    try {
        // 청크 병합 및 악성코드 검사 수행
        FileDto.Response response = v3ScannerService.mergeChunksAndScan(fileId, fileName);
        return ResponseEntity.ok(response);
    } catch (Exception e) {
        logger.error("Failed to merge chunks: {}", e.getMessage());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                FileDto.Response.builder()
                        .fileName(fileName)
                        .returnCode(-1)
                        .message("Failed to merge and scan chunks.")
                        .build());
    }
}
