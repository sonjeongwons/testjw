package com.scf.manager.mvc.service;

import com.scf.manager.common.enums.ContentsType;
import com.scf.manager.common.exception.FileException;
import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.mvc.domain.FileManager;
import com.scf.manager.mvc.dto.FileManagerDTO;
import com.scf.manager.mvc.repository.FileManagerRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ObjectUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
@Slf4j
@Service
@RequiredArgsConstructor
public class FileManagerService {
    private final FileManagerRepository fileManagerRepository;
    private String savePath = "files";
    public static String[] videoAllows;

    public static String[] imageAllows;

    public static String[] audioAllows;

    public static String[] pptAllows;
    @Transactional
    public FileManagerDTO.Response registerFileManager(FileManagerDTO.Register reqDto) {
        FileManager fileManager = fileManagerRepository.save(
                FileManager.register(reqDto)
        );
        return fileManager.toDto();
    }

    @Transactional(readOnly = true)
    public Page<FileManagerDTO.Response> searchAllFileManager(FileManagerDTO.Search reqDto) {
        return fileManagerRepository.searchAllFileManager(reqDto);
    }

    @Transactional(readOnly = true)
    public FileManagerDTO.Response searchFileManager(Long fileSeq) {
        FileManager fileManager = fileManagerRepository.findById(fileSeq).orElse(null);
        if (ObjectUtils.isEmpty(fileManager)) {
            throw new ResourceNotFoundException("파일매니저 데이터를 찾을 수 없습니다.");
        }
        return fileManager.toDto();
    }

    @Transactional
    public FileManagerDTO.Response modifyFileManager(Long fileSeq, FileManagerDTO.Modify reqDto) {
        FileManager fileManager = fileManagerRepository.findById(fileSeq).orElse(null);
        if (ObjectUtils.isEmpty(fileManager)) {
            throw new ResourceNotFoundException("파일매니저 데이터를 찾을 수 없습니다.");
        }
        fileManager.modify(reqDto);
        fileManagerRepository.save(fileManager);
        return fileManager.toDto();
    }

    public FileManagerDTO.Response saveFile(MultipartFile file) {

        try {
            if (file.isEmpty()) {
                throw new Exception("ERROR : Fil is empty");
            }
            Path root = Paths.get(savePath);
            if (!new File(savePath).exists()) {
                new File(savePath).mkdir();
                log.info(file.getOriginalFilename());
            }
            try (InputStream inputStream = file.getInputStream()) {

                Files.copy(inputStream, root.resolve(file.getOriginalFilename()), StandardCopyOption.REPLACE_EXISTING);
                return null;
            }
        } catch (Exception e) {
            throw new RuntimeException("Not store the file ");
        }
    }

    public List<FileManagerDTO.Response> uploadFiles(List<MultipartFile> files) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        List<FileManagerDTO.Response> docsList = new ArrayList<>();
        for (MultipartFile multipartFile : files) {
            String origFilename = multipartFile.getOriginalFilename();
            if (origFilename == null || "".equals(origFilename))
                continue;
            setFileAuth(multipartFile, origFilename);
        }
        return null;
    }

    /** * 파일명 중복 방지를 위해 MD5(128비트 암호화 해시 함수) 파일명 생성 * * @param input */
    public static String MD5Generator(String input) throws UnsupportedEncodingException, NoSuchAlgorithmException
    {
        MessageDigest mdMD5 = MessageDigest.getInstance("MD5");
        mdMD5.update(input.getBytes("UTF-8"));
        byte[] md5Hash = mdMD5.digest();
        StringBuilder hexMD5hash = new StringBuilder();
        for(byte b : md5Hash) { String hexString = String.format("%02x", b);
            hexMD5hash.append(hexString);
        }
        return hexMD5hash.toString();
    }
    /**
     * MediaType 생성
     * @param filename
     */
    public static MediaType getMediaType(String filename) {
        String contentType = FilenameUtils.getExtension(filename);
        MediaType mediaType = null;
        if (contentType.equals("png")) {
            mediaType = MediaType.IMAGE_PNG;
        } else if (contentType.equals("jpeg") || contentType.equals("jpg")) {
            mediaType = MediaType.IMAGE_JPEG;
        } else if (contentType.equals("gif")) {
            mediaType = MediaType.IMAGE_GIF;
        } else if (contentType.equals("mp4") || contentType.equals("wmv")|| contentType.equals("avi")) {
            mediaType = MediaType.parseMediaType("video/mp4");
        } else if (contentType.equals("zip")) {
            mediaType = MediaType.parseMediaType("application/zip");
        } else if (contentType.equals("pdf")) {
            mediaType = MediaType.parseMediaType("application/pdf");
        } else if (contentType.equals("ppt") || contentType.equals("pptx")) {
            mediaType = MediaType.parseMediaType("application/vnd.ms-powerpoint");
        } else if (contentType.equals("doc")) {
            mediaType = MediaType.parseMediaType("application/msword");
        }
        return mediaType;
    }
    public static ContentsType checkContentType(MultipartFile file) {

        ContentsType contentsType = getContentsTypeByExtension(getFileExtension(file.getOriginalFilename()));

        return contentsType;
    }
    public static ContentsType getContentsTypeByExtension(String extension) {

        if(isVideo(extension)) {
            return ContentsType.Video;
        }

        if(isImage(extension)) {
            return ContentsType.Image;
        }

        if(isAudio(extension)) {
            return ContentsType.Audio;
        }

        if(isPpt(extension)) {
            return ContentsType.PPT;
        }

        return ContentsType.ETC;
    }
//    public static String getFileExtension(FileInfo fileInfo) {
//        return getFileExtension(fileInfo.getName());
//    }

    public static String getFileExtension(String fileName) {
        String extension = "";

        if (fileName != null && !fileName.isEmpty()) {

            int i = fileName.lastIndexOf('.');
            int p = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));

            if (i > p) {
                extension = fileName.substring(i + 1);
            }
        }

        return extension;
    }
    private static Boolean isVideo(String extension) {
        return isMatchedWithStringArray(videoAllows, extension);
    }

    private static Boolean isImage(String extension) {
        return isMatchedWithStringArray(imageAllows, extension);
    }

    private static Boolean isAudio(String extension) {
        return isMatchedWithStringArray(audioAllows, extension);
    }

    private static Boolean isPpt(String extension) {
        return isMatchedWithStringArray(pptAllows, extension);
    }

    private static Boolean isMatchedWithStringArray(String[] allowed, String extension) {

        for(String ext : allowed) {
            if(extension.equalsIgnoreCase(ext.trim())){
                return true;
            }
        }

        return false;
    }

    public FileManagerDTO.Response uploadFile(MultipartFile multipartFile) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        String origFilename = multipartFile.getOriginalFilename();

        setFileAuth(multipartFile, origFilename);
        return null;
    }


    private void setFileAuth(MultipartFile multipartFile, String origFilename) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        String filename = MD5Generator(FilenameUtils.getBaseName(origFilename)).toString();
        String extension = FilenameUtils.getExtension(origFilename);
        String filePath = Paths.get(savePath, filename).toString();
        //FileInfo FileInfo = new FileInfo(content, multipartFile.getOriginalFilename(), filename, filePath, multipartFile.getSize());
//            FileInfo fileInfo = new FileInfo( multipartFile.getOriginalFilename(), filename, filePath, multipartFile.getSize(),extension ,savePath);
//            fileInfo.setContentType(checkContentType(multipartFile));
//            fileList.add(fileInfo);

        try {
            File file = new File(filePath);
            multipartFile.transferTo(file);
            // 파일 권한 설정(쓰기, 읽기)
            file.setWritable(true);
            file.setReadable(true);
        } catch (IOException e) {
            throw new FileException("test");
        } catch (Exception e) {
            throw new FileException("[" + multipartFile.getOriginalFilename() + "] failed to save file...");
        }
    }


}
