package com.scf.manager.mvc.service;

import com.scf.manager.mvc.domain.FunctionError;
import com.scf.manager.mvc.repository.*;
import io.fabric8.knative.client.DefaultKnativeClient;
import io.fabric8.knative.client.KnativeClient;
import io.fabric8.knative.internal.pkg.apis.Condition;
import io.fabric8.knative.serving.v1.Service;
import io.fabric8.knative.serving.v1.ServiceList;
import io.fabric8.knative.serving.v1.ServiceStatus;
import io.fabric8.kubernetes.api.model.Namespace;
import io.fabric8.kubernetes.api.model.NamespaceList;
import io.fabric8.kubernetes.client.DefaultKubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClient;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.util.List;
import java.util.Optional;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class FunctionService {

    private final FunctionErrorRepository functionErrorRepository;
    private final String volumeName = "serverless-storage";
    private final String BASE_URL = "samsungsdscloud.com";
    private final IstioCallService istioCallService;
    private final DefaultKnativeClient knativeClient;

    public void checkKnativeFunctionAll() {
        KnativeClient kn = new DefaultKnativeClient();
        try (KubernetesClient client = new DefaultKubernetesClient()) {
            List<Namespace> namespaces = getNamespacesFilteredByPattern(client, "scf-.*-api");
            for (Namespace namespace : namespaces) {
                System.out.println("Namespace Name: " + namespace.getMetadata().getName());
                ServiceList services = kn.services()
                        .inNamespace(namespace.getMetadata().getName())
                        .list();
                for (Service svc : services.getItems()) {
                    if (!CollectionUtils.isEmpty(svc.getStatus().getConditions())) {
                        log.info(svc.toString());
                        List<Condition> conditions = svc.getStatus().getConditions();
                        for (Condition condition : conditions) {
                            log.info(condition.toString());

                            if (!"True".equals(condition.getStatus())) {
                                log.info(svc.getMetadata().toString());

                                if(!functionErrorRepository.existsByFunctionNameAndType(svc.getMetadata().getName(),condition.getType())){
                                    functionErrorRepository.save(
                                            FunctionError.register(svc.getMetadata().getName(), condition)
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }


    }
    @Transactional
    public void checkKnativeFunctionAllError() {
        List<FunctionError> items = this.functionErrorRepository.findAll();
        if (!CollectionUtils.isEmpty(items)) {
            items.stream().forEach(item -> {
                checkStatus(item);
            });
        }
    }

    private void checkStatus(FunctionError item) {
        try (KubernetesClient client = new DefaultKubernetesClient()) {
            List<Namespace> namespaces = getNamespacesFilteredByPattern(client, "scf-.*-api");
            for (Namespace namespace : namespaces) {
                System.out.println("Namespace Name: " + namespace.getMetadata().getName());
                if(null == knativeClient.services().inNamespace(namespace.getMetadata().getName()).withName(item.getFunctionName()).get()) {
                    return;
                }

                ServiceStatus aDefault = knativeClient.services().inNamespace(namespace.getMetadata().getName()).withName(item.getFunctionName()).get().getStatus();
                List<Condition> conditions = aDefault.getConditions();
                for (Condition condition : conditions) {
                    if ("True".equals(condition.getStatus())) {
                        Optional<FunctionError> byId = functionErrorRepository.findById(item.getFunctionErrorSeq());
                        if(byId.isPresent()){
                            functionErrorRepository.delete(byId.get());
                        }
                    }
                }

            }
        }

    }

    public static List<Namespace> getNamespacesFilteredByPattern(KubernetesClient client, String pattern) {
        NamespaceList namespaceList = client.namespaces().list();
        Pattern regexPattern = Pattern.compile(pattern);

        return namespaceList.getItems()
                .stream()
                .filter(namespace -> regexPattern.matcher(namespace.getMetadata().getName()).matches())
                .collect(Collectors.toList());
    }
}
