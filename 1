아래는 FunctionService 코드를 리팩토링 및 클린코드 관점에서 개선한 예제와 그 이유입니다. 각 변경사항에 대한 설명을 함수별로 제시하겠습니다.

리팩토링 목표
가독성: 함수와 변수명을 명확히 하고, 복잡한 로직을 간결하게 분리.
중복 제거: 반복되는 코드를 재사용 가능하도록 구조화.
의존성 주입 강화: 객체 생성을 줄이고 DI를 활용.
예외 처리 강화: 잠재적인 NullPointerException(NPE)와 기타 오류를 방지.
테스트 가능성 향상: 메서드가 단일 책임을 가지도록 분리.
리팩토링 코드
변경된 코드
java
코드 복사
@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class FunctionService {

    private final FunctionErrorRepository functionErrorRepository;
    private final IstioCallService istioCallService;
    private final KnativeClient knativeClient; // DI를 통한 주입으로 수정
    private final KubernetesClient kubernetesClient; // DI를 통한 주입으로 수정
    private final String volumeName = "serverless-storage";
    private final String BASE_URL = "samsungsdscloud.com";

    /**
     * 모든 Knative Function 상태를 점검하여 비정상 상태를 기록.
     */
    public void checkKnativeFunctionAll() {
        List<Namespace> namespaces = getNamespacesFilteredByPattern("scf-.*-api");
        namespaces.forEach(namespace -> checkNamespaceFunctions(namespace));
    }

    private void checkNamespaceFunctions(Namespace namespace) {
        String namespaceName = namespace.getMetadata().getName();
        log.info("Checking namespace: {}", namespaceName);

        List<Service> services = knativeClient.services()
                .inNamespace(namespaceName)
                .list()
                .getItems();

        services.forEach(service -> {
            List<Condition> conditions = Optional.ofNullable(service.getStatus())
                    .map(ServiceStatus::getConditions)
                    .orElse(List.of());

            conditions.stream()
                    .filter(condition -> !"True".equals(condition.getStatus()))
                    .forEach(condition -> handleServiceError(service, condition));
        });
    }

    private void handleServiceError(Service service, Condition condition) {
        String functionName = service.getMetadata().getName();
        String conditionType = condition.getType();
        log.warn("Function {} in error condition: {}", functionName, condition);

        if (!functionErrorRepository.existsByFunctionNameAndType(functionName, conditionType)) {
            FunctionError error = FunctionError.register(functionName, condition);
            functionErrorRepository.save(error);
        }
    }

    /**
     * 기록된 모든 FunctionError 상태를 재점검하여 정상화된 항목 삭제.
     */
    @Transactional
    public void checkKnativeFunctionAllError() {
        List<FunctionError> errors = functionErrorRepository.findAll();
        errors.forEach(this::checkAndRemoveErrorIfResolved);
    }

    private void checkAndRemoveErrorIfResolved(FunctionError error) {
        String functionName = error.getFunctionName();
        String namespacePattern = "scf-.*-api";
        List<Namespace> namespaces = getNamespacesFilteredByPattern(namespacePattern);

        namespaces.forEach(namespace -> {
            String namespaceName = namespace.getMetadata().getName();
            Service service = knativeClient.services()
                    .inNamespace(namespaceName)
                    .withName(functionName)
                    .get();

            if (service == null) {
                log.info("Service {} not found in namespace {}", functionName, namespaceName);
                return;
            }

            List<Condition> conditions = Optional.ofNullable(service.getStatus())
                    .map(ServiceStatus::getConditions)
                    .orElse(List.of());

            boolean allConditionsResolved = conditions.stream()
                    .allMatch(condition -> "True".equals(condition.getStatus()));

            if (allConditionsResolved) {
                functionErrorRepository.deleteById(error.getFunctionErrorSeq());
                log.info("Resolved error for function {}", functionName);
            }
        });
    }

    /**
     * 특정 패턴과 일치하는 네임스페이스 목록 반환.
     */
    public List<Namespace> getNamespacesFilteredByPattern(String pattern) {
        Pattern regexPattern = Pattern.compile(pattern);
        return kubernetesClient.namespaces()
                .list()
                .getItems()
                .stream()
                .filter(namespace -> regexPattern.matcher(namespace.getMetadata().getName()).matches())
                .collect(Collectors.toList());
    }
}
함수별 변경사항
1. checkKnativeFunctionAll
변경 전: 네임스페이스와 서비스를 한 메서드에서 처리. 중복 코드 존재.
변경 후:
네임스페이스 처리와 서비스 상태 점검을 checkNamespaceFunctions 메서드로 분리.
서비스 조건별 상태 처리를 handleServiceError로 위임.
이점: 코드 중복 제거, 단일 책임 원칙(SRP) 준수.
2. checkNamespaceFunctions
변경 전: 네임스페이스 내부의 로직이 메인 메서드에 혼재.
변경 후: 네임스페이스별 점검 로직을 분리하여 명확성 증가.
이점: 메서드 크기 축소 및 재사용성 향상.
3. handleServiceError
변경 전: 서비스 상태 점검과 DB 저장이 직접 메인 로직에 혼합.
변경 후: 에러 조건 처리 로직을 별도 메서드로 분리.
이점: 재사용성 증가, 가독성 향상.
4. checkKnativeFunctionAllError
변경 전: 에러 처리 로직이 인라인.
변경 후: 에러 점검 로직을 checkAndRemoveErrorIfResolved 메서드로 분리.
이점: 코드 중복 제거 및 명확성 증가.
5. getNamespacesFilteredByPattern
변경 전: 반복적으로 사용되는 네임스페이스 필터링 로직이 곳곳에 존재.
변경 후: 공통 메서드로 추출하여 재사용.
이점: 중복 제거 및 코드 간결화.
변경 이유 요약
의존성 주입 강화

DefaultKubernetesClient와 DefaultKnativeClient를 DI로 주입받도록 변경.
테스트 시 Mock 객체를 쉽게 주입할 수 있어 유연성이 향상됨.
중복 코드 제거

네임스페이스 필터링, 서비스 조건 점검, 에러 처리 등의 중복 코드를 분리 및 통합.
재사용성과 유지보수성이 개선됨.
예외 처리 보강

Optional과 List.of()로 NPE 방지.
로그 메시지에 더 많은 컨텍스트 추가.
가독성 향상

메서드 크기를 줄이고, 각 메서드가 하나의 책임만 가지도록 리팩토링.
추가 개선 제안
Custom Exception 도입

에러 상황을 명확히 하기 위해 CustomException 클래스 추가.
Configuration 파일로 설정 관리

volumeName, BASE_URL 등의 상수를 application.yml로 이동.
테스트 케이스 보강

각 메서드의 주요 시나리오에 대한 단위 테스트 작성.
결론
리팩토링 후 코드는 단일 책임 원칙을 더 잘 준수하며 가독성과 재사용성이 크게 향상되었습니다. 이를 통해 유지보수성과 테스트 가능성이 개선되고, 코드 품질이 전반적으로 향상되었습니다. 😊

Q1: 위 리팩토링에서 DI를 적용한 이유는 무엇이며, 추가적으로 개선할 수 있는 점은 무엇인가요?

Q2: 네임스페이스와 서비스 상태 점검 로직을 분리한 것이 운영과 테스트에서 어떤 이점을 제공하나요?

Q3: Optional과 Stream을 활용하여 가독성을 높이는 다른 방법에는 어떤 것이 있을까요?






나의 말:
어떤 점이 개선되었는지 메소드별로 자세히 코드를 알려줘. 어떤 코드가 변경되었는지 말이야. 전/후 비교해서 리팩토링, 클린코드관점에서 개선된 점과 바꾸는 사유를 알려줘.
ChatGPT의 말:
ChatGPT
메소드별 전/후 비교와 개선 사항
1. checkKnativeFunctionAll
변경 전
java
코드 복사
public void checkKnativeFunctionAll() {
    KnativeClient kn = new DefaultKnativeClient();
    try (KubernetesClient client = new DefaultKubernetesClient()) {
        List<Namespace> namespaces = getNamespacesFilteredByPattern(client, "scf-.*-api");
        for (Namespace namespace : namespaces) {
            System.out.println("Namespace Name: " + namespace.getMetadata().getName());
            ServiceList services = kn.services()
                    .inNamespace(namespace.getMetadata().getName())
                    .list();
            for (Service svc : services.getItems()) {
                if (!CollectionUtils.isEmpty(svc.getStatus().getConditions())) {
                    log.info(svc.toString());
                    List<Condition> conditions = svc.getStatus().getConditions();
                    for (Condition condition : conditions) {
                        log.info(condition.toString());
                        if (!"True".equals(condition.getStatus())) {
                            log.info(svc.getMetadata().toString());
                            if (!functionErrorRepository.existsByFunctionNameAndType(svc.getMetadata().getName(), condition.getType())) {
                                functionErrorRepository.save(FunctionError.register(svc.getMetadata().getName(), condition));
                            }
                        }
                    }
                }
            }
        }
    }
}
변경 후
java
코드 복사
public void checkKnativeFunctionAll() {
    List<Namespace> namespaces = getNamespacesFilteredByPattern("scf-.*-api");
    namespaces.forEach(this::checkNamespaceFunctions);
}

private void checkNamespaceFunctions(Namespace namespace) {
    String namespaceName = namespace.getMetadata().getName();
    log.info("Checking namespace: {}", namespaceName);

    List<Service> services = knativeClient.services()
            .inNamespace(namespaceName)
            .list()
            .getItems();

    services.forEach(service -> {
        List<Condition> conditions = Optional.ofNullable(service.getStatus())
                .map(ServiceStatus::getConditions)
                .orElse(List.of());

        conditions.stream()
                .filter(condition -> !"True".equals(condition.getStatus()))
                .forEach(condition -> handleServiceError(service, condition));
    });
}
변경 사항 및 개선된 점
의존성 주입 활용

변경 전: DefaultKnativeClient와 DefaultKubernetesClient를 매번 생성.
변경 후: DI로 KnativeClient와 KubernetesClient를 주입받아 관리.
이유: 객체 생성을 최소화하여 성능을 개선하고, 테스트에서 Mock 객체를 활용할 수 있도록 유연성 확보.
로직 분리

checkNamespaceFunctions로 네임스페이스별 함수 상태 점검 로직을 분리.
이유: 메소드가 단일 책임 원칙(SRP)을 따르며, 코드 재사용성과 가독성이 향상됨.
Optional과 Stream 활용

변경 전: if (!CollectionUtils.isEmpty(...))로 null 체크.
변경 후: Optional과 Stream을 활용하여 가독성을 높임.
이유: null 체크를 간결하고 안전하게 처리.
상태 조건 처리 개선

상태 조건별 처리를 handleServiceError로 위임.
이유: 상태 처리 로직의 재사용성을 높이고, 중복 제거.
2. checkKnativeFunctionAllError
변경 전
java
코드 복사
@Transactional
public void checkKnativeFunctionAllError() {
    List<FunctionError> items = this.functionErrorRepository.findAll();
    if (!CollectionUtils.isEmpty(items)) {
        items.stream().forEach(item -> {
            checkStatus(item);
        });
    }
}

private void checkStatus(FunctionError item) {
    try (KubernetesClient client = new DefaultKubernetesClient()) {
        List<Namespace> namespaces = getNamespacesFilteredByPattern(client, "scf-.*-api");
        for (Namespace namespace : namespaces) {
            if (null == knativeClient.services().inNamespace(namespace.getMetadata().getName()).withName(item.getFunctionName()).get()) {
                return;
            }

            ServiceStatus aDefault = knativeClient.services()
                    .inNamespace(namespace.getMetadata().getName())
                    .withName(item.getFunctionName())
                    .get()
                    .getStatus();
            List<Condition> conditions = aDefault.getConditions();
            for (Condition condition : conditions) {
                if ("True".equals(condition.getStatus())) {
                    Optional<FunctionError> byId = functionErrorRepository.findById(item.getFunctionErrorSeq());
                    if (byId.isPresent()) {
                        functionErrorRepository.delete(byId.get());
                    }
                }
            }
        }
    }
}
변경 후
java
코드 복사
@Transactional
public void checkKnativeFunctionAllError() {
    List<FunctionError> errors = functionErrorRepository.findAll();
    errors.forEach(this::checkAndRemoveErrorIfResolved);
}

private void checkAndRemoveErrorIfResolved(FunctionError error) {
    String functionName = error.getFunctionName();
    String namespacePattern = "scf-.*-api";
    List<Namespace> namespaces = getNamespacesFilteredByPattern(namespacePattern);

    namespaces.forEach(namespace -> {
        String namespaceName = namespace.getMetadata().getName();
        Service service = knativeClient.services()
                .inNamespace(namespaceName)
                .withName(functionName)
                .get();

        if (service == null) {
            log.info("Service {} not found in namespace {}", functionName, namespaceName);
            return;
        }

        List<Condition> conditions = Optional.ofNullable(service.getStatus())
                .map(ServiceStatus::getConditions)
                .orElse(List.of());

        boolean allConditionsResolved = conditions.stream()
                .allMatch(condition -> "True".equals(condition.getStatus()));

        if (allConditionsResolved) {
            functionErrorRepository.deleteById(error.getFunctionErrorSeq());
            log.info("Resolved error for function {}", functionName);
        }
    });
}
변경 사항 및 개선된 점
반복 코드 제거

변경 전: 네임스페이스 필터링과 상태 확인 로직이 중복.
변경 후: getNamespacesFilteredByPattern을 재사용.
조건 검사 단순화

변경 전: 상태 조건 확인 및 삭제 로직이 복잡.
변경 후: boolean allConditionsResolved를 통해 가독성 향상.
이유: 가독성과 유지보수성을 높이기 위해 조건 검사 단순화.
로그 추가

네임스페이스와 서비스 상태를 명확히 로깅.
이유: 디버깅 시 유용한 정보를 제공.
3. getNamespacesFilteredByPattern
변경 전
java
코드 복사
public static List<Namespace> getNamespacesFilteredByPattern(KubernetesClient client, String pattern) {
    NamespaceList namespaceList = client.namespaces().list();
    Pattern regexPattern = Pattern.compile(pattern);

    return namespaceList.getItems()
            .stream()
            .filter(namespace -> regexPattern.matcher(namespace.getMetadata().getName()).matches())
            .collect(Collectors.toList());
}
변경 후
java
코드 복사
public List<Namespace> getNamespacesFilteredByPattern(String pattern) {
    Pattern regexPattern = Pattern.compile(pattern);
    return kubernetesClient.namespaces()
            .list()
            .getItems()
            .stream()
            .filter(namespace -> regexPattern.matcher(namespace.getMetadata().getName()).matches())
            .collect(Collectors.toList());
}
변경 사항 및 개선된 점
의존성 주입 활용

변경 전: KubernetesClient 객체를 메소드 매개변수로 전달.
변경 후: kubernetesClient를 필드로 주입받아 사용.
이유: 의존성 주입으로 메소드 호출을 간결하게 하고 테스트 시 Mock 주입 가능.
Static 제거

변경 전: Static 메소드로 선언.
변경 후: 인스턴스 메소드로 변경.
이유: Static은 테스트와 확장성 측면에서 제한적.
