아래 CodeService.java, HttpCallService.java, CodeDTO.java, TokenScheduler.java 파일을 참고해서 CodeService.java 파일 내에 scanCodeFile메소드를 작성하려고해. scanCodeFile메소드는 cvc라는 엔드포인트 API에게 파일에 대한 악성코드를 검사요청하는 API를 로직화할거야. scanCodeFile메소드로직은 아래와 같은 내용들을 충족시킬 수 있는 항목을 반영해서 개편됐으면해.
1. "https://cvc.private.kr-west1.dev2.samsungsdscloud.com/api/v1/scanner/multipart-scan" API를 post 방식으로 호출하기
2. "X-Subject-Token" 헤더에 대한 값으로 tokenScheduler.getAccessToken() 값 넣기
3. 알맞게 CodeDTO.java 파일 내 변수들을 이에 맞게 활용하기
4. HttpCallService.java, CodeDTO.java 코드를 활용해서 CodeService.java 내 scanCodeFile메소드 작성하기
5. 악성코드 검사할 파일은 cvc 쪽에 멀티파트 방식으로 요청하기

## CodeService.java
package com.scf.manager.service;

import com.scf.manager.dto.CodeDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.springframework.core.io.ClassPathResource;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.PosixFilePermission;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

@Slf4j
@org.springframework.stereotype.Service
@RequiredArgsConstructor
public class CodeService {
    public static void createDirectory(CodeDTO reqDto)  {
        String path = reqDto.getPath();
        log.info("[CodeServiceDP : {}] Path : {}", "CreateDirectory", path);

        File functionDir = new File(path);

        // 해당 파일 경로가 없을 경우 디렉토리를 생성
        if (!functionDir.exists()) {
            try {
                functionDir.mkdirs();
            } catch (Exception e) {
                e.printStackTrace();
                log.error("[CodeServiceDP/Error : {}] Path : {}", "CreateDirectory", path);
                throw new RuntimeException("디렉토리 생성에 실패하였습니다.");
            }
        }
    }

    public static void deleteDirectory(CodeDTO reqDto)  {
        String path = reqDto.getPath();
        log.info("[CodeServiceDP : {}] Path : {}", "DeleteDirectory", path);

        File functionDir = new File(path);

        try {
            FileUtils.deleteDirectory(functionDir);
        } catch (Exception e) {
            e.printStackTrace();
            log.error("[CodeServiceDP/Error : {}] Path : {}", "DeleteDirectory", path);
            throw new RuntimeException("디렉토리 삭제에 실패하였습니다.");
        }
    }

    public static void deleteFile (CodeDTO reqDto)  {
        String path = reqDto.getPath();
        log.info("[CodeServiceDP : {}] Path : {}", "DeleteFile", path);

        File functionFile = new File(path);

        // 해당 파일이 존재하는 경우, 파일 삭제
        if (functionFile.exists()) {
            try {
                FileUtils.delete(functionFile);
            } catch (Exception e) {
                e.printStackTrace();
                log.error("[CodeServiceDP/Error : {}] Path : {}", "DeleteFile", path);
            }
        }
    }

    public static void createFile(CodeDTO reqDto) throws IOException {
        String path = reqDto.getPath();
        String content = reqDto.getContent();
        log.info("[CodeServiceDP : {}] Path : {}", "CreateFile", path);
        log.info("[CodeServiceDP : {}] Content : {}", "CreateFile", content);

        Path functionFile = Paths.get(path);

        if (Files.exists(functionFile)) {
            Files.delete(functionFile);
        }

        Set<PosixFilePermission> defaultPosixPermissions = new HashSet<>();

        defaultPosixPermissions.add(PosixFilePermission.OWNER_READ);
        defaultPosixPermissions.add(PosixFilePermission.OWNER_WRITE);
        defaultPosixPermissions.add(PosixFilePermission.GROUP_READ);
        defaultPosixPermissions.add(PosixFilePermission.OTHERS_READ);

        Files.createFile(functionFile);
        Files.setPosixFilePermissions(functionFile, defaultPosixPermissions);  //Assure the permissions again after the file is created
        // 사용자 인풋 값 추가
        ArrayList<String> messageList = new ArrayList<>();
        byte[] decodedBytes = java.util.Base64.getDecoder().decode(content.getBytes());
        messageList.add(new String(decodedBytes, StandardCharsets.UTF_8));

        Files.write(functionFile, messageList, StandardCharsets.UTF_8);
    }

    public static void moveFile(CodeDTO reqDto) throws IOException {
        String path = reqDto.getPath();
        String originPath = reqDto.getOriginPath();
        log.info("[CodeServiceDP : {}] From: {} To: {}", "MoveFile", originPath, path);

        // 해당 파일이 없을 경우 함수명의 파일 생성
        Path functionFile = Paths.get(path);
        Path downloadFile = Paths.get(originPath);

        Set<PosixFilePermission> defaultPosixPermissions = new HashSet<>();

        defaultPosixPermissions.add(PosixFilePermission.OWNER_READ);
        defaultPosixPermissions.add(PosixFilePermission.OWNER_WRITE);
        defaultPosixPermissions.add(PosixFilePermission.GROUP_READ);
        defaultPosixPermissions.add(PosixFilePermission.OTHERS_READ);

        if (Files.exists(downloadFile)) {
            Files.move(downloadFile, functionFile, StandardCopyOption.REPLACE_EXISTING);
        } else {
            log.error("[CodeServiceDP : {}] No download.jar! / From: {} To: {}", "MoveFile", originPath, path);
            System.out.println("download.jar가 존재하지 않습니다.");
        }
        Files.setPosixFilePermissions(functionFile, defaultPosixPermissions);  //Assure the permissions again after the file is created
    }

    public static void downloadFile(CodeDTO reqDto) throws IOException {
        String path = reqDto.getPath();
        String defaultYn = reqDto.getDefaultYn();

        log.info("[CodeServiceDP : {}] DefaultYn: {} Path: {}",
                "DownloadFile", defaultYn, path);

        // 해당 파일이 없을 경우 함수명의 파일 생성
        Path functionFile = Paths.get(path);

        Set<PosixFilePermission> defaultPosixPermissions = new HashSet<>();

        defaultPosixPermissions.add(PosixFilePermission.OWNER_READ);
        defaultPosixPermissions.add(PosixFilePermission.OWNER_WRITE);
        defaultPosixPermissions.add(PosixFilePermission.GROUP_READ);
        defaultPosixPermissions.add(PosixFilePermission.OTHERS_READ);

        copyJarFromResource("codetemplates/handler/java/helloworld.jar", path);

        // TBD
        // Object Storage 연계를 통해 파일 다운로드

        Files.setPosixFilePermissions(functionFile, defaultPosixPermissions); //Assure the permissions again after the file is created
    }

    public static void copyJarFromResource(String resourcePath, String targetPath) throws IOException {
        ClassPathResource resource = new ClassPathResource(resourcePath);
        try (InputStream in = resource.getInputStream();
             OutputStream out = new FileOutputStream(targetPath)) {
            byte[] buffer = new byte[8192];
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
        }
    }
}




## HttpCallService.java

package com.scf.manager.service;

import com.scf.manager.common.util.AppUtil;
import com.scf.manager.config.security.TokenScheduler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClient;
import org.springframework.web.client.RestClientException;

import java.nio.charset.StandardCharsets;

@Slf4j
@Service
public class HttpCallService {
    @Autowired
    private TokenScheduler tokenScheduler;

    public static final String IntenralAuthTokenHeader = "X-Auth-Token";

    public <T, R> ResponseEntity<R> callPublicHttpReqeust(String httpUrlString, String method, T requestBody, HttpHeaders requestHeaders, Class<R> responseType, boolean log) {
//        requestHeaders.set("content-type", "application/json"); // 기존 값에 추가
        requestHeaders.set("Accept", "application/json"); // 기존 값에 추가

        return callHttpReqeust(httpUrlString, method, requestBody, requestHeaders, responseType, log);
    }

    public <T, R> ResponseEntity<R> callInternalHttpReqeust(String httpUrlString, String method, T requestBody, HttpHeaders requestHeaders, Class<R> responseType, boolean log) {
        //토큰값을 실어서 보내줌
        requestHeaders.set(IntenralAuthTokenHeader, tokenScheduler.getAccessToken());
        requestHeaders.set("content-type", "application/json"); // 기존 값에 추가
        requestHeaders.set("Accept", "application/json"); // 기존 값에 추가

//        requestHeaders.add("Custom-Header", "CustomValue"); // 예: 커스텀 헤더

        return callHttpReqeust(httpUrlString, method, requestBody, requestHeaders, responseType, log);
    }

    private static <T, R> ResponseEntity<R> callHttpReqeust(String httpUrlString, String method, T requestBody, HttpHeaders requestHeaders, Class<R> responseType, boolean logEnabled) {
        // String 타입의 method를 HttpMethod로 변환
        HttpMethod httpMethod;
        try { httpMethod = HttpMethod.valueOf(method.toUpperCase());}
        catch (IllegalArgumentException e) {throw new IllegalArgumentException("Invalid HTTP method: " + method, e);       }

        if (requestBody != null && requestHeaders.getContentType() == null) {
            requestHeaders.setContentType(MediaType.APPLICATION_JSON);
        }


        // RestClient 설정
        RestClient restClient = RestClient.builder().build();


        if (logEnabled){restClient = setRestClientWithLogging(restClient);}

        // RestClient를 사용한 요청
        try {

            ResponseEntity<R> response = restClient
                    .method(httpMethod)
                    .uri(httpUrlString)
                    .headers(headers -> headers.addAll(requestHeaders))
                    .body(requestBody != null ? requestBody : "{}")
                    .retrieve()
                    .toEntity(responseType);
            return response;
        } catch (RestClientException e) {
            log.warn("[callHttpReqeust: FAILED] {}", e.getMessage());
            throw new RuntimeException("API 호출 실패: " + e.getMessage(), e);
        }
    }

    public static RestClient setRestClientWithLogging(RestClient restClient) {
        return RestClient.builder()
                .requestInterceptor((request, body, execution) -> {
                    // 요청 로깅 설정
                    log.info("HTTP Request: {} / {}", request.getMethod(), request.getURI());

                    // 헤더 로깅
                    log.info("HTTP Request / Headers:");
                    for (var header : request.getHeaders().entrySet()) {
                        log.info("  {}: {}", header.getKey(), header.getValue());
                    }

                    try {
                        // Log body (handle byte[] safely)
                        String bodyContent = body != null ? new String(body, StandardCharsets.UTF_8) : "null";
                        log.info("HTTP Request / Body: \n {}", AppUtil.JSONStringPrettyPrinter(bodyContent));
                    } catch (NullPointerException e) {}

                    return execution.execute(request, body);
                })
                .build();
    }
}



## CodeDTO.java


package com.scf.manager.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class CodeDTO {
    private String path;
    private String content;
    private String originPath;

    private String defaultYn;
}



## TokenScheduler.java
package com.scf.manager.config.security;

import com.scf.manager.common.util.AppUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.net.HttpURLConnection;

@Slf4j
@Component
public class TokenScheduler {

    private final static String loginBodyTemplate = AppUtil.getSourceCodeFromFile("codetemplates/api/login.json");

    private String accessToken;

    @Value("${SCF_KEYSTONE_ID}")
    private String scfId;
    @Value("${SCF_KEYSTONE_PW}")
    private String scfPw;
    @Value("${IDENTITY_URL}")
    private String identityUrl;

    private static String jsonString;
    private static String requestUrl;

    // 초기 실행 시 토큰 한번 갱신 (옵션)
    @PostConstruct
    public void init() {
        jsonString = loginBodyTemplate
                .replace("$SCF_KEYSTONE_ID$", scfId)
                .replace("$SCF_KEYSTONE_PW$", scfPw);

        requestUrl = identityUrl + "/v3/auth/tokens?nocatalog=null";

        refreshToken();
    }

    @Scheduled(cron = "0 0/15 * * * ?") // 15분마다 실행
    public void scheduledTokenRefresh() {
        refreshToken();
    }

    private void refreshToken() {
        HttpURLConnection httpURLConnection = AppUtil.httpCall(requestUrl, "POST", jsonString, null);
        if (httpURLConnection != null && httpURLConnection.getHeaderField("X-Subject-Token") != null) {
            this.accessToken = httpURLConnection.getHeaderField("X-Subject-Token");
            log.info("토큰 갱신 완료: {}", this.accessToken);
        } else {
            log.error("토큰 갱신 실패");
        }
    }

    public String getAccessToken() {return accessToken;}

}
