@Library('paas-common-shared-library') _
def convertTag(Map args) {
    def tagPattern = args.tagPattern ?: "{YYYYMMDD}.{HHMMSS}"
    def now = new Date()
    def sdf = new java.text.SimpleDateFormat("yyyyMMdd.HHmmss")
    sdf.setTimeZone(TimeZone.getTimeZone("Asia/Seoul")) // 한국 시간대 지정
    def formattedDate = sdf.format(now)

    return tagPattern.replace("{YYYYMMDD}.{HHMMSS}", formattedDate)
}

def getMailReceivers(Map args) {
    def recipients_list = []

    // 환경에 따른 메일 주소 매핑
    def recipients_email = [
        '박운한': 'cloud.park@samsung.com',
        '최경열': 'chl4651.choi@samsung.com',
        '손정원': 'j1.son@samsung.com',
    ]
    def recipients = args.recipients

    if (recipients){
        if (recipients.trim() == 'SCF_ALL') {
            recipients_list.addAll(recipients_email.values())
        } else {
            if (recipients_email.containsKey(recipients)){
                recipients_list.add(recipients_email[recipients])
            }

        }
    }

    return recipients_list.unique().join(', ')
}

pipeline {
    agent {
        label  'java-image'
    }

	parameters {
	    string(name: 'branch', defaultValue: 'develop', description: 'branch')
	    string(name: 'image_tag', defaultValue: 'latest', description: 'image_tag')
	    string(name: 'vm_tag', defaultValue: '{YYYYMMDD}.{HHMMSS}', description: 'tag')
	    choice(
            name: 'build_alert_recipients',
            choices: ['최경열','박운한','손정원','SCF_ALL'],
            description: '빌드 결과에 대한 메일을 받습니다.'
        )
	}

	environment {

	    PROJECT_ID = 'dev'
	    GIT_CREDENTIAL_ID = 'github-token'
        GIT_REPO = 'https://code.sdsdev.co.kr/sdspaas/cvc-scanner.git/'
        HARBOR_CREDENTIAL = credentials('harbor@cvc+cvc-robot')

        IMAGE_HARBOR_URL = 'harbor-paasdev.samsungsdscloud.com'
        IMAGE_REPO = 'cvc'
        IMAGE_NAME = 'cvc-scanner'
        IMAGE_LOC = "${IMAGE_HARBOR_URL}/${IMAGE_REPO}/${IMAGE_NAME}:${params.image_tag}"
        BASE_IMAGE_LOC = "${IMAGE_HARBOR_URL}/${IMAGE_REPO}/${IMAGE_REPO}-scanner-base:17-debian"






	}

    stages {

		// Checkout Stage : Checkout from Git Repository
		stage('Checkout') {
		    steps {
		        git(branch: params.branch, credentialsId:"${GIT_CREDENTIAL_ID}", url:"${GIT_REPO}")
		    }
		}


		// Build Stage : Build application
		stage('Build') {
		    tools {
			    jdk 'JDK17'
			    gradle 'GRADLE7.6'
			}

		    steps {
		        container('java') {
                  sh "gradle jib --no-daemon \
                    -Djib.console=plain \
                    -Djib.from.image=${BASE_IMAGE_LOC} \
                    -Djib.from.auth.username=${HARBOR_CREDENTIAL_USR} \
                    -Djib.from.auth.password=${HARBOR_CREDENTIAL_PSW} \
                    -Djib.to.image=${IMAGE_LOC} \
                    -Djib.to.auth.username=${HARBOR_CREDENTIAL_USR} \
                    -Djib.to.auth.password=${HARBOR_CREDENTIAL_PSW} \
                    --build-cache"
                    }
            }
		}



    } //end stages



	post {
	    always {
	        script {
	            def mailRecipients = getMailReceivers(recipients: params.build_alert_recipients)
                    echo "선택된 발송대상자: ${params.build_alert_recipients}"
                    echo "발송 대상 이메일: ${mailRecipients}"
                sendPaasMail (
	                    to: mailRecipients
	                )
	            }

	    }

	}

}



spring.application.name=demo
server.port=8081
api.key=CVCKEY
# log level for root logger
logging.level.root=INFO
# log level for com.example package
logging.level.com.cvc.scanner=DEBUG
# log pattern for console handler
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger{36} - %msg%n
# log pattern for file handler
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger{36} - %msg%n
# log file location and name
logging.file.name=/app/logs/scanner.log
logging.logback.rollingpolicy.file-name-pattern=scanner-%d{yyyy-MM-dd}.log.gz
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.max-history=365
spring.servlet.multipart.max-file-size=1GB
spring.servlet.multipart.max-request-size=1GB




services:
  otel-collector:
    user: "0:0"
    image: paascommon-edcnnztb.scr.private.kr-west1.dev2.samsungsdscloud.com/cvc/opentelemetry-collector-contrib:0.118.0
    volumes:
- /cvc/otelcol-0.118.0.yaml:/etc/otelcol-contrib/config.yaml
- /var/lib/otelcol/file_storage/gateway:/var/lib/otelcol/file_storage/gateway
    ports:
- 1888:1888 # pprof extension
- 8888:8888 # Prometheus metrics exposed by the Collector
- 8889:8889 # Prometheus exporter metrics
- 13133:13133 # health_check extension
- 4317:4317 # OTLP gRPC receiver
- 4318:4318 # OTLP http receiver
- 55679:55679 # zpages extension
    extra_hosts:
- "cortex-paas.kr-west1.dev2.samsungsdscloud.com:198.18.3.136"
- "opensearch-paas.kr-west1.dev2.samsungsdscloud.com:198.18.3.136"
- "object-store.private.kr-west1.dev2.samsungsdscloud.com:198.18.1.29"
  scanner:
    image: paascommon-edcnnztb.scr.private.kr-west1.dev2.samsungsdscloud.com/cvc/cvc-scanner:latest
    ports:
- 8081:8081
    volumes:
- /cvc/log:/app/logs
