PR 템플릿
PR 개요
Knative와 Istio를 활용한 서버리스 서비스 구현 및 관리 로직 개발

주요 목적은 서버리스 환경에서 Knative Service를 동적으로 생성 및 관리하고 Istio를 통해 인증 및 네트워크 접근을 제어할 수 있도록 하는 기능을 제공하는 것입니다.
해당 PR은 함수 호출 및 실행 환경 구성, Istio 및 Knative를 통한 인증 및 접근 제어, 클라우드 스토리지 및 런타임별 실행 환경 설정을 포함합니다.
개발 내용
Istio와 Knative 연동 로직 추가

Istio를 이용한 IP ACL 정책 및 JWK 등록 로직 구현.
Istio RequestAuthentication 및 AuthorizationPolicy 리소스를 활용해 함수별 인증 및 권한 관리.
Knative Service 생성 및 관리

함수 실행 환경(런타임 및 리소스 제한)을 기반으로 Knative Service 동적 생성 및 패치 로직 추가.
런타임별 실행 파일, 이미지 경로, 명령어 설정 자동화.
클라우드 환경 파일 시스템 처리

런타임별 파일 구성(Node.js, Python, PHP, Java) 처리.
Base64 디코딩을 통해 함수 코드를 로컬 파일 시스템에 저장하고 실행 준비.
함수 환경 설정 로직 추가

FunctionEnvironment를 기반으로 메모리, 실행 시간 제한, 환경 변수 등 동적 설정.
예외 처리 및 유효성 검증

런타임 형식 및 필수값 확인.
Istio 및 Knative 관련 리소스 삭제 및 생성 중 예외 처리 로직 강화.
메소드별 변경점 및 개선 사항
1. callIstioAndKnative(Function function)
변경점

Istio 관련 리소스 생성 및 삭제 로직 추가:
IP ACL 정책 관리 (makeIstioPolicy, AuthorizationPolicy 삭제).
JWK 등록 및 RequestAuthentication 구성.
Knative Service 호출을 통해 함수 실행.
개선 사항

문제점: Istio 및 Knative 리소스 설정 로직이 하나의 메소드에 모두 포함되어 코드가 과도하게 복잡.
해결 방법: Istio와 Knative 관련 로직을 각각 별도의 메소드로 분리하여 단일 책임 원칙(SRP) 준수.
개선 코드:
java
코드 복사
private void configureIstio(Function function, FunctionEnvironment functionEnvironment) {
    // Istio 관련 로직 분리
}

private void configureKnative(Function function, FunctionDTO.Register reqDto, List<EnvVar> envVars) {
    // Knative 관련 로직 분리
}
2. generateFileName(FunctionDTO.Register reqDto)
변경점

런타임별로 생성되는 파일 이름 결정 로직 구현.
개선 사항

문제점: 런타임 확인 로직이 하드코딩되어 런타임 추가 시 코드 수정이 필요.
해결 방법: 런타임별 파일 이름 맵핑을 별도 데이터 구조로 관리.
개선 코드:
java
코드 복사
private static final Map<String, String> RUNTIME_FILE_MAP = Map.of(
    "Node.js", "function.js",
    "Python", "pythonbase.py",
    "PHP", "index.php",
    "Java", "javafunction.jar"
);

private String generateFileName(FunctionDTO.Register reqDto) {
    return RUNTIME_FILE_MAP.getOrDefault(reqDto.getRuntime(), 
        throw new RuntimeException(FILE_TYPE_EXCEPTION));
}
3. setFunctionEnvironment(FunctionEnvironment functionEnvironment, List<EnvVar> envVars, FunctionDTO.Register reqDto)
변경점

환경 변수 설정, 메모리 설정, 제한 시간 설정 로직 구현.
개선 사항

문제점: 환경 변수 타입별 로직이 하드코딩되어 확장성이 낮음.
해결 방법: 각 환경 변수 타입을 Enum으로 정의하고, Enum별 처리 로직을 구현.
개선 코드:
java
코드 복사
public enum EnvironmentType {
    COLD_START, ENV, MEMORY, LIMIT
}

private void setFunctionEnvironment(FunctionEnvironment functionEnvironment, List<EnvVar> envVars, FunctionDTO.Register reqDto) {
    switch (EnvironmentType.valueOf(functionEnvironment.getType().toUpperCase())) {
        case COLD_START -> reqDto.setColdStartYn(functionEnvironment.getValue());
        case ENV -> envVars.add(new EnvVar(functionEnvironment.getKey(), functionEnvironment.getValue(), null));
        case MEMORY -> reqDto.setMemory(functionEnvironment.getValue() + "Mi");
        case LIMIT -> setLimit(functionEnvironment, reqDto);
    }
}
4. generateFileInfo
변경점

런타임별 파일 생성 및 Base64 디코딩 로직 구현.
개선 사항

문제점: Java와 다른 런타임의 로직이 중복되며, Posix 권한 설정이 매번 반복됨.
해결 방법: 공통 로직을 별도 메소드로 추출.
개선 코드:
java
코드 복사
private void setFilePermissions(Path file) throws IOException {
    Set<PosixFilePermission> permissions = Set.of(
        PosixFilePermission.OWNER_READ,
        PosixFilePermission.OWNER_WRITE,
        PosixFilePermission.GROUP_READ,
        PosixFilePermission.OTHERS_READ
    );
    Files.setPosixFilePermissions(file, permissions);
}
5. callFunction
변경점

런타임별 Knative Service 설정 로직 추가.
개선 사항

문제점: 런타임별 로직이 중복되며 확장성 낮음.
해결 방법: 런타임 설정 로직을 Enum으로 추출.
개선 코드:
java
코드 복사
public enum RuntimeConfig {
    NODE_JS("Node.js", "scf-nodejs"),
    PYTHON("Python", "scf-python"),
    PHP("PHP", "scf-php"),
    JAVA("Java", "scf-java");

    // 런타임별 로직 구현
}
추가 고려 사항
외부화: 하드코딩된 값(volumeName, repository, BASE_URL 등)을 application.yml로 외부화.
테스트 코드 작성: 각 메소드의 유닛 테스트 및 통합 테스트를 작성하여 안정성 확보.
이 PR을 통해 코드의 가독성과 유지보수성을 대폭 개선하고, 서비스 안정성을 강화할 수 있을 것입니다. 팀원들의 리뷰를 통해 추가 의견을 수렴하겠습니다! 😊
