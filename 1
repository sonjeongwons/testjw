package com.example.demo.controller;

import com.example.demo.dto.FileDto;
import com.example.demo.service.V3ScannerService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


import com.example.demo.dto.FileDto;
import com.example.demo.service.V3ScannerService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.util.Map;
import java.util.Properties;

@RestController
@RequestMapping("/api/v1/scanner")
public class V3ScannerController {

    private static final Logger logger = LoggerFactory.getLogger(V3ScannerController.class);

    @Autowired
    private V3ScannerService v3ScannerService;

    @GetMapping("/simple")
    public ResponseEntity<Map<String, Object>> simpleScan(@RequestHeader("X-CVC-API-KEY") String apiKey, @RequestParam String fileName) {
        logger.info("Simple scan requested. Filename: {}, API Key: {}", fileName, apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
        }
        return ResponseEntity.ok(v3ScannerService.simpleScan(fileName));
    }

    @GetMapping("/remote")
    public ResponseEntity<Map<String, Object>> remoteScan(@RequestHeader("X-CVC-API-KEY") String apiKey, @RequestParam String fileName) {
        logger.info("Remote scan requested. Filename: {}, API Key: {}", fileName, apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
        }
        return ResponseEntity.ok(v3ScannerService.remoteScan(fileName));
    }

    @GetMapping("/detail")
    public ResponseEntity<Map<String, Object>> detailScan(@RequestHeader("X-CVC-API-KEY") String apiKey, @RequestParam String fileName) {
        logger.info("Detail scan requested. Filename: {}, API Key: {}", fileName, apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized", "message", "Invalid API Key"));
        }
        return ResponseEntity.ok(v3ScannerService.detailScan(fileName));
    }


    @PostMapping("/scan")
    public ResponseEntity<FileDto.Response> scanFile(
            @RequestHeader("X-CVC-API-KEY") String apiKey,
            @Valid @RequestBody FileDto.Request fileDtoRequest) {
        logger.info("File scan requested. Filename: {}, API Key: {}", fileDtoRequest.getFileName(), apiKey);
        if (!v3ScannerService.validateApiKey(apiKey)) {
            logger.warn("Unauthorized access attempt with API Key: {}", apiKey);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
                    FileDto.Response.builder()
                            .fileName(fileDtoRequest.getFileName())
                            .returnCode(HttpStatus.UNAUTHORIZED.value())
                            .message("Unauthorized: Invalid API Key")
                            .build()
            );
        }
        FileDto.Response response = v3ScannerService.scanFile(fileDtoRequest);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @GetMapping("/status")
    public ResponseEntity<String> getStatus() {
        logger.info("API status requested.");
        return ResponseEntity.ok("API is running.");
    }
}
