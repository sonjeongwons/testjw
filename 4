import boto3

# 제외할 서비스 목록
EXCLUDED_SERVICES = [
    "iam", "organizations", "sso", "billing", "cost-explorer", "support",
    "cloudwatch", "cloudtrail"
]

# CleanupLambda 함수 정보
CLEANUP_LAMBDA_NAME = "CleanupLambda"
CLEANUP_LAMBDA_REGION = "ap-northeast-2"  # 서울 리전

# 모든 리전 조회
regions = [region['RegionName'] for region in boto3.client('ec2').describe_regions()['Regions']]


def delete_eks_clusters(region, session):
    eks = session.client('eks')

    # 모든 EKS 클러스터 목록 조회
    clusters = eks.list_clusters().get("clusters", [])
    for cluster in clusters:
        try:
            print(f"[{region}] EKS 클러스터 삭제 시작: {cluster}")

            # 1️⃣ 노드 그룹 삭제
            node_groups = eks.list_nodegroups(clusterName=cluster).get("nodegroups", [])
            for node_group in node_groups:
                try:
                    eks.delete_nodegroup(clusterName=cluster, nodegroupName=node_group)
                    print(f"[{region}] EKS 노드 그룹 삭제: {node_group}")
                except Exception as e:
                    print(f"[{region}] EKS 노드 그룹 삭제 실패: {node_group}, {str(e)}")

            # 노드 그룹이 삭제될 때까지 대기 (필수)
            waiter = eks.get_waiter('nodegroup_deleted')
            for node_group in node_groups:
                try:
                    waiter.wait(clusterName=cluster, nodegroupName=node_group)
                    print(f"[{region}] EKS 노드 그룹 삭제 완료: {node_group}")
                except Exception as e:
                    print(f"[{region}] EKS 노드 그룹 삭제 대기 중 오류: {node_group}, {str(e)}")

            # 2️⃣ 클러스터 삭제
            eks.delete_cluster(name=cluster)
            print(f"[{region}] EKS 클러스터 삭제 요청 완료: {cluster}")

        except Exception as e:
            print(f"[{region}] EKS 클러스터 삭제 실패: {cluster}, {str(e)}")


def delete_load_balancers(region, session):
    elb = session.client('elbv2')  # Application/Network Load Balancer (ALB, NLB)
    elb_v1 = session.client('elb')  # Classic Load Balancer (ELBv1)

    # 1️⃣ ELBv2 (ALB/NLB) 삭제
    try:
        lbs = elb.describe_load_balancers().get("LoadBalancers", [])
        for lb in lbs:
            lb_arn = lb["LoadBalancerArn"]
            lb_name = lb["LoadBalancerName"]
            
            print(f"[{region}] ALB/NLB 삭제 시작: {lb_name}")

            # (1) 연결된 리스너 삭제
            listeners = elb.describe_listeners(LoadBalancerArn=lb_arn).get("Listeners", [])
            for listener in listeners:
                try:
                    elb.delete_listener(ListenerArn=listener["ListenerArn"])
                    print(f"[{region}] 리스너 삭제: {listener['ListenerArn']}")
                except Exception as e:
                    print(f"[{region}] 리스너 삭제 실패: {listener['ListenerArn']}, {str(e)}")

            # (2) 연결된 Target Group 삭제
            target_groups = elb.describe_target_groups().get("TargetGroups", [])
            for tg in target_groups:
                try:
                    elb.delete_target_group(TargetGroupArn=tg["TargetGroupArn"])
                    print(f"[{region}] Target Group 삭제: {tg['TargetGroupArn']}")
                except Exception as e:
                    print(f"[{region}] Target Group 삭제 실패: {tg['TargetGroupArn']}, {str(e)}")

            # (3) Load Balancer 삭제
            elb.delete_load_balancer(LoadBalancerArn=lb_arn)
            print(f"[{region}] ALB/NLB 삭제 완료: {lb_name}")

    except Exception as e:
        print(f"[{region}] ELBv2(ALB/NLB) 삭제 실패: {str(e)}")

    # 2️⃣ Classic Load Balancer (ELBv1) 삭제
    try:
        classic_lbs = elb_v1.describe_load_balancers().get("LoadBalancerDescriptions", [])
        for clb in classic_lbs:
            try:
                elb_v1.delete_load_balancer(LoadBalancerName=clb["LoadBalancerName"])
                print(f"[{region}] Classic Load Balancer 삭제 완료: {clb['LoadBalancerName']}")
            except Exception as e:
                print(f"[{region}] Classic Load Balancer 삭제 실패: {clb['LoadBalancerName']}, {str(e)}")
    except Exception as e:
        print(f"[{region}] Classic ELB 조회 실패: {str(e)}")

def delete_resources(region):
    session = boto3.session.Session(region_name=region)

    # EC2 인스턴스 삭제
    ec2 = session.client('ec2')
    instances = ec2.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running', 'stopped']}])
    instance_ids = [i["InstanceId"] for r in instances["Reservations"] for i in r["Instances"]]
    if instance_ids:
        ec2.terminate_instances(InstanceIds=instance_ids)
        print(f"[{region}] EC2 인스턴스 삭제: {instance_ids}")

    # S3 버킷 삭제
    s3 = session.client('s3')
    buckets = s3.list_buckets().get("Buckets", [])
    for bucket in buckets:
        try:
            s3.delete_bucket(Bucket=bucket["Name"])
            print(f"[{region}] S3 버킷 삭제: {bucket['Name']}")
        except:
            pass  # 버킷이 비어있지 않으면 실패함

    # RDS 인스턴스 삭제
    rds = session.client('rds')
    rds_instances = rds.describe_db_instances().get("DBInstances", [])
    for db in rds_instances:
        try:
            rds.delete_db_instance(DBInstanceIdentifier=db["DBInstanceIdentifier"], SkipFinalSnapshot=True, DeleteAutomatedBackups=True)
            print(f"[{region}] RDS 인스턴스 삭제: {db['DBInstanceIdentifier']}")
        except:
            pass

    # Lambda 함수 삭제 (CleanupLambda 제외)
    lambda_client = session.client('lambda')
    functions = lambda_client.list_functions().get("Functions", [])
    for function in functions:
        function_name = function["FunctionName"]
        if region == CLEANUP_LAMBDA_REGION and function_name == CLEANUP_LAMBDA_NAME:
            print(f"[{region}] {CLEANUP_LAMBDA_NAME} 함수는 삭제 대상에서 제외됨")
            continue
        try:
            lambda_client.delete_function(FunctionName=function_name)
            print(f"[{region}] Lambda 삭제: {function_name}")
        except:
            pass

    # EKS 클러스터 삭제
    delete_eks_clusters(region, session)

    # DynamoDB 테이블 삭제
    dynamodb = session.client('dynamodb')
    tables = dynamodb.list_tables().get("TableNames", [])
    for table in tables:
        try:
            dynamodb.delete_table(TableName=table)
            print(f"[{region}] DynamoDB 테이블 삭제: {table}")
        except:
            pass

    # Load Balancer 삭제
    delete_load_balancers(region, session)

    # SNS 토픽 삭제
    sns = session.client('sns')
    topics = sns.list_topics().get("Topics", [])
    for topic in topics:
        try:
            sns.delete_topic(TopicArn=topic["TopicArn"])
            print(f"[{region}] SNS 토픽 삭제: {topic['TopicArn']}")
        except:
            pass

    # SQS 큐 삭제
    sqs = session.client('sqs')
    queues = sqs.list_queues().get("QueueUrls", [])
    for queue in queues:
        try:
            sqs.delete_queue(QueueUrl=queue)
            print(f"[{region}] SQS 큐 삭제: {queue}")
        except:
            pass

    # API Gateway 삭제
    apigw = session.client('apigateway')
    apis = apigw.get_rest_apis().get("items", [])
    for api in apis:
        try:
            apigw.delete_rest_api(restApiId=api["id"])
            print(f"[{region}] API Gateway 삭제: {api['name']}")
   
        except:
            pass


    # **KMS 키 삭제 (예약 삭제)**
    kms = session.client('kms')
    keys = kms.list_keys().get("Keys", [])
    for key in keys:
        try:
            kms.schedule_key_deletion(KeyId=key["KeyId"], PendingWindowInDays=7)
            print(f"[{region}] KMS 키 삭제 예약: {key['KeyId']}")
        except:
            pass


    # ECR 리포지토리 삭제
    ecr = session.client('ecr')
    repositories = ecr.describe_repositories().get("repositories", [])
    for repo in repositories:
        try:
            ecr.delete_repository(repositoryName=repo["repositoryName"], force=True)
            print(f"[{region}] ECR 리포지토리 삭제: {repo['repositoryName']}")
        except:
            pass


    print(f"[{region}] 모든 과금 리소스 삭제 완료")

# 모든 리전에 대해 실행
for region in regions:
    delete_resources(region)

