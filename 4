package com.scf.manager.mvc.service;

import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.common.util.AppUtil;
import com.scf.manager.mvc.domain.BaseImage;
import com.scf.manager.mvc.dto.BaseImageDTO;
import com.scf.manager.mvc.repository.BaseImageRepository;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

import static com.scf.manager.common.constants.ExceptionConst.BASEIMAGE_NOTFOUND_EXCEPTION;


@Slf4j
@Service
@RequiredArgsConstructor
public class BaseImageService {
    private final BaseImageRepository baseImageRepository;

    @Transactional
    public BaseImageDTO.Response registerBaseImage(BaseImageDTO.Register reqDto) {
        BaseImage baseImage = baseImageRepository.save(
                BaseImage.register(reqDto)
        );
        return AppUtil.getMapper().map(baseImage, BaseImageDTO.Response.class);
    }

    @Transactional(readOnly = true)
    public List<BaseImageDTO.Response> searchAllBaseImage() {
        return baseImageRepository.findAllByOrderByNameAscVersionDesc()
                .stream()
                .sorted((b1, b2) -> {
                    String runtime1 = b1.getName();
                    String runtime2 = b2.getName();
                    String[] version1 = b1.getVersion().split("\\.");
                    String[] version2 = b2.getVersion().split("\\.");
                    int v1 = Integer.parseInt(version1[0]);
                    int v2 = Integer.parseInt(version2[0]);

                    if (!runtime1.equals(runtime2)) {
                        return runtime1.compareTo(runtime2);
                    } else {
                        if (v1 != v2) {
                            return v2 - v1;
                        }
                        return Integer.parseInt(version2[1]) - Integer.parseInt(version1[1]);
                    }
                })
                .map(BaseImage::toDto)
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public BaseImageDTO.Response searchBaseImage(Long baseImageSeq) {
        BaseImage baseImage = baseImageRepository.findById(baseImageSeq).orElseThrow(() -> new ResourceNotFoundException(BASEIMAGE_NOTFOUND_EXCEPTION));
        return AppUtil.getMapper().map(baseImage, BaseImageDTO.Response.class);
    }

    @Transactional
    public BaseImageDTO.Response modifyBaseImage(Long baseImageSeq, BaseImageDTO.Modify reqDto) {
        BaseImage baseImage = baseImageRepository.findById(baseImageSeq).orElseThrow(() -> new ResourceNotFoundException(BASEIMAGE_NOTFOUND_EXCEPTION));
        baseImage.modify(reqDto);
        baseImageRepository.save(baseImage);
        return AppUtil.getMapper().map(baseImage, BaseImageDTO.Response.class);
    }

}
















package com.scf.manager.mvc.dto;

import com.scf.manager.base.dto.SearchParamDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;

import jakarta.validation.constraints.NotBlank;
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class BaseImageDTO {

	private Long baseImageSeq;
	private String name;
	private String version;

	@Data
	@EqualsAndHashCode(callSuper = false)
	@AllArgsConstructor
	@NoArgsConstructor
	@Builder
	public static class Search extends SearchParamDTO {
		@Schema(description = "이미지명을 입력해주세요")
		private String name;
	}
	@Data
	@EqualsAndHashCode(callSuper = false)
	@AllArgsConstructor
	@NoArgsConstructor
	@Builder
	public static class Register {

		@NotBlank(message = "리파지토리를 입력해주세요")
		@Schema(description = "리파지토리 입력해주세요")
		private String repository;
		@NotBlank(message = "이미지명을 입력해주세요")
		@Schema(description = "이미지명을 입력해주세요")
		private String name;
		@NotBlank(message = "버전을 입력해주세요")
		@Schema(description = "버전")
		private String version;
	}
	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	@Builder
	public static class Modify {
		@NotBlank(message = "리파지토리를 입력해주세요")
		@Schema(description = "리파지토리 입력해주세요")
		private String repository;

		@NotBlank(message = "이미지명을 입력해주세요")
		@Schema(description = "이미지명")
		private String name;
		@NotBlank(message = "버전을 입력해주세요")
		@Schema(description = "버전")
		private String version;

	}
	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	@Builder
	public static class Response {

		@NotBlank(message = "리파지토리를 입력해주세요")
		@Schema(description = "리파지토리 입력해주세요")
		private String repository;

		@Schema(description = "베이스이미지일련번호")
		private Long baseImageSeq;

		@Schema(description = "이미지명")
		private String name;

		@Schema(description = "버전")
		private String version;
	}

}














package com.scf.manager.mvc.api;

import com.scf.manager.mvc.dto.BaseImageDTO;
import com.scf.manager.mvc.service.BaseImageService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@Tag(name = "이미지 관리 API",description = "이미지 관리 API")
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/v2/image")
public class BaseImageApiController {
	private final BaseImageService BaseImageService;

    @PostMapping("")
    @Operation(summary = "이미지 단건 등록", description = "기본이미지 단건을 등록합니다")
    public ResponseEntity<BaseImageDTO.Response> registerBoard(@Valid @RequestBody BaseImageDTO.Register reqDto) {
        BaseImageDTO.Response response = BaseImageService.registerBaseImage(reqDto);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @GetMapping("")
    @Operation(summary = "이미지 전체 목록 조회-page", description = "기본이미지 전체 목록을 조회합니다")
    public ResponseEntity<List<BaseImageDTO.Response>> searchAllBaseImage() {
        List<BaseImageDTO.Response> response = BaseImageService.searchAllBaseImage();
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @GetMapping("/{baseImageSeq}")
    @Operation(summary = "기본이미지 단건 조회", description = "기본이미지 단건을 조회합니다")
    @Parameters({
            @Parameter(name = "baseImageSeq", description = "기본이미지 일련번호", required = true),
    })
    public ResponseEntity<BaseImageDTO.Response> searchBaseImage(@PathVariable("baseImageSeq") Long baseImageSeq) {
        BaseImageDTO.Response response = BaseImageService.searchBaseImage(baseImageSeq);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @PutMapping("/{baseImageSeq}")
    @Operation(summary = "기본이미지 단건 수정", description = "기본이미지 단건을 수정합니다")
    @Parameters({
            @Parameter(name = "baseImageSeq", description = "기본이미지 일련번호", required = true),
    })
    public ResponseEntity<BaseImageDTO.Response> modifyBaseImage(@PathVariable("baseImageSeq") Long baseImageSeq
                                          , @Valid @RequestBody BaseImageDTO.Modify reqDto) {
        BaseImageDTO.Response response = BaseImageService.modifyBaseImage(baseImageSeq, reqDto);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }
}
