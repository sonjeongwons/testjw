PR 2: 예외 처리 개선 및 서비스 계층 정리
🔹 주요 변경 사항
일관된 예외 처리 적용
RuntimeException → 커스텀 예외 적용 (FunctionAlreadyExistsException, InvalidFunctionRequestException 등)
ResourceNotFoundException을 통합하여 더 의미 있는 예외 메시지 제공
반환 타입 변경 및 Optional 처리 개선
Optional.orElseThrow()를 활용해 불필요한 isPresent() 검사 제거
반환 타입을 명확하게 정의 (null 반환 제거)
상수값 및 Magic String 제거
functionStatus, "N" 등 하드코딩된 값 제거 → 명확한 상수 사용
로깅 및 예외 발생 시 메시지 정리
log.error()를 통한 예외 상세 정보 기록 추가
📌 변경된 메소드 상세 설명
1️⃣ registerFunction 예외 처리 개선
🔹 변경 전 문제점
예외 메시지가 불명확하여 디버깅 어려움
RuntimeException을 직접 사용 → 예외의 명확성이 부족
하드코딩된 "N" 값이 여러 군데에서 사용됨
✅ 변경 후 개선점
커스텀 예외 (FunctionAlreadyExistsException, InvalidFunctionRequestException) 적용
FunctionStatus.NOT_READY.getKey()를 FunctionStatus.NOT_READY로 직접 사용
functionRepository.findByFunctionKeyAndDelYn을 Optional.orElseThrow()로 변경
📌 변경 후 코드
java
복사
편집
@Transactional
public FunctionDTO.Response registerFunction(FunctionDTO.Register reqDto) throws IOException, ParseException {
    validateFunctionRequest(reqDto);

    if (isFunctionExists(reqDto.getFunctionKey(), reqDto.getDisplayName(), reqDto.getProjectId())) {
        throw new FunctionAlreadyExistsException("이미 존재하는 펑션 키 또는 펑션명을 사용하였습니다.");
    }

    reqDto.setName(generateFunctionName());
    reqDto.setFunctionStatus(TypeEnums.FunctionStatus.NOT_READY);

    if (!reqDto.getRuntime().startsWith("Java")) {
        reqDto.setContent(generateBaseCode(reqDto));
    }

    Function function = functionRepository.save(Function.register(reqDto));
    initializeFunction(function, reqDto);

    return function.toDto();
}
📌 커스텀 예외 클래스 추가
java
복사
편집
public class FunctionAlreadyExistsException extends RuntimeException {
    public FunctionAlreadyExistsException(String message) {
        super(message);
    }
}
java
복사
편집
public class InvalidFunctionRequestException extends RuntimeException {
    public InvalidFunctionRequestException(String message) {
        super(message);
    }
}
2️⃣ registerFunctionCode 예외 처리 개선
🔹 변경 전 문제점
findByFunctionKey 호출 후 직접 if (function == null) 방식으로 예외 처리
RuntimeException을 그대로 사용하여 의미가 불분명
함수 상태 업데이트 시 하드코딩된 값 사용
✅ 변경 후 개선점
findByFunctionKey를 Optional.orElseThrow()로 변경
FunctionNotFoundException을 활용한 의미 있는 예외 메시지 제공
TypeEnums.FunctionStatus.DEPLOYING를 직접 사용하여 가독성 향상
📌 변경 후 코드
java
복사
편집
@Transactional
public FunctionDTO.Response registerFunctionCode(FunctionDTO.Register reqDto, String functionKey) throws IOException, ParseException {
    Function function = functionRepository.findByFunctionKey(functionKey)
            .orElseThrow(() -> new FunctionNotFoundException("펑션이 존재하지 않습니다. FunctionKey: " + functionKey));

    function.updateContent(reqDto.getContent());

    if (shouldDeployFunction(function)) {
        deployFunction(function);
    }

    return function.toDto();
}
📌 FunctionNotFoundException 클래스 추가
java
복사
편집
public class FunctionNotFoundException extends RuntimeException {
    public FunctionNotFoundException(String message) {
        super(message);
    }
}
3️⃣ searchFunction 반환값 및 예외 처리 개선
🔹 변경 전 문제점
null을 반환할 가능성이 있어, 호출하는 측에서 NPE 발생 가능
findByFunctionKey 후 orElseThrow()를 사용하지 않아 예외가 발생할 경우 추적 어려움
트리거가 존재하지 않을 때, ResourceNotFoundException 발생 → 적절한 기본값 반환이 필요
✅ 변경 후 개선점
Optional.orElseThrow()를 활용하여 명확한 예외 처리
트리거가 존재하지 않을 경우 기본값 설정
일관된 FunctionNotFoundException 사용
📌 변경 후 코드
java
복사
편집
@Transactional(readOnly = true)
public FunctionDTO.Response searchFunction(String functionKey) {
    Function function = functionRepository.findByFunctionKey(functionKey)
            .orElseThrow(() -> new FunctionNotFoundException("펑션 아이디를 확인해주세요. FunctionKey: " + functionKey));

    FunctionDTO.Response output = AppUtil.getMapper().map(function, FunctionDTO.Response.class);
    output.setEndPointUrls(UrlUtil.generateUrl(function.getName(), function.getRegion(), "none"));

    Trigger trigger = triggerRepository.findByFunction(function).orElse(null);
    if (trigger != null) {
        output.setTriggerType(trigger.getTriggerType());
        output.setTriggerConnectedYn(trigger.getTriggerConnectedYn());
    } else {
        output.setTriggerType("unknown");
        output.setTriggerConnectedYn("N");
    }

    return output;
}
📌 PR 2 - 전체 변경 코드
PR2에서 변경된 부분을 반영한 전체 코드를 제공하겠습니다.

1번 편집함

대신 채팅에서 답합니다
🔹 PR 2 요약
✅ 일관된 예외 처리 적용 (커스텀 예외 사용)
✅ Optional 처리 개선 (orElseThrow() 활용)
✅ 불필요한 null 반환 제거 → NPE 예방
✅ Magic String 및 하드코딩된 값 제거
✅ 로깅을 통한 디버깅 및 가독성 향상

이제 PR 3에서는 불필요한 의존성 제거 및 성능 최적화를 다루겠습니다. 🚀
PR 3를 진행할까요?
