코드를 클린 코드 및 리팩토링 관점에서 개선하면서 다음 사항을 중점적으로 변경했습니다.

중복 코드 제거: 유사한 로직이 반복되는 부분을 별도 메서드로 분리하여 재사용성을 높임.
메서드 크기 단축: 지나치게 긴 메서드를 여러 개의 작은 메서드로 분리하여 가독성을 개선.
명확한 네이밍: 메서드와 변수의 역할이 직관적으로 이해될 수 있도록 명명 변경.
예외 처리 개선: 불필요한 예외 출력(printStackTrace) 제거 및 로깅을 활용한 예외 메시지 개선.
의존성 주입: new DefaultKubernetesClient() 같은 직접 객체 생성을 제거하고 DI(Dependency Injection)를 활용.
불필요한 로깅 및 콘솔 출력 제거: System.out.println()을 log.info()로 변경하여 일관성 유지.
🔹 리팩토링 변경 사항
1️⃣ switchLogging 메서드 개선
문제점
functionRepository.findByFunctionKey(functionKey).orElseThrow(...) 패턴이 여러 곳에서 반복됨.
불필요한 변수(isChanged) 사용.
functionRepository.save(function);가 중복 호출됨.
knativeService.callFunction(function.getFunctionKey()); 호출이 중복될 가능성이 있음.
개선 코드
java
복사
편집
@Transactional
public CloudLoggingDTO.Response switchLogging(CloudLoggingDTO.Modify cloudLoggingDtos, String functionKey) throws IOException {
    Function function = getFunctionByKey(functionKey);
    
    if (!cloudLoggingDtos.getLogEnableYn().equals(function.getLogEnableYn())) {
        function.updateLogEnableYn(cloudLoggingDtos.getLogEnableYn());

        if (function.isReady()) {
            deployFunction(function);
        }
    }

    return new CloudLoggingDTO.Response(function.getLogEnableYn());
}

private Function getFunctionByKey(String functionKey) {
    return functionRepository.findByFunctionKey(functionKey)
        .orElseThrow(() -> new ResourceNotFoundException("데이터가 존재하지않습니다."));
}

private void deployFunction(Function function) {
    function.setFunctionStatus(TypeEnums.FunctionStatus.DEPLOYING);
    functionRepository.save(function);
    knativeService.callFunction(function.getFunctionKey());
}
개선 이유
중복된 findByFunctionKey 로직을 getFunctionByKey 메서드로 분리하여 재사용성을 높임.
의미 없는 isChanged 변수 제거.
배포 로직을 별도 메서드(deployFunction)로 분리하여 코드 가독성 개선.
2️⃣ checkFunctionNameDuplicate 메서드 개선
문제점
log.info("isExist = " + isExist); 가 불필요한 String Concatenation을 발생시킴.
if-else 구문을 제거하여 더 간결하게 작성 가능.
개선 코드
java
복사
편집
public FunctionDTO.DuplicateResponse checkFunctionNameDuplicate(FunctionDTO.Search reqDto) {
    boolean isExist = functionRepository.existsByDisplayNameAndProjectIdAndDelYn(
        reqDto.getDisplayName(), reqDto.getProjectId(), "N"
    );

    log.info("Function name duplicate check: {}", isExist);
    return FunctionDTO.DuplicateResponse.builder()
        .duplicateYn(isExist ? "Y" : "N")
        .build();
}
개선 이유
로깅을 log.info("isExist = " + isExist) → log.info("Function name duplicate check: {}", isExist) 로 변경하여 불필요한 문자열 연산 제거.
if-else 없이 삼항 연산자를 사용하여 더 간결하게 표현.
3️⃣ deleteUserNamespace 메서드 개선
문제점
new DefaultKubernetesClient()를 직접 호출 → DI(의존성 주입)으로 관리하는 것이 바람직.
printStackTrace() 사용 → 로깅을 활용하도록 변경.
개선 코드
java
복사
편집
@Autowired
private KubernetesClient kubernetesClient;

public void deleteUserNamespace(Function function) {
    try {
        kubernetesClient.namespaces().withName(function.getName()).delete();
        log.info("Namespace '{}' deleted successfully.", function.getName());
    } catch (KubernetesClientException e) {
        log.error("Failed to delete namespace '{}': {}", function.getName(), e.getMessage());
    }
}
개선 이유
의존성 주입을 활용하여 KubernetesClient를 직접 생성하지 않도록 변경.
printStackTrace() 제거하고 log.error() 활용하여 예외 메시지를 로깅.
4️⃣ getPresignedUrl 메서드 개선
문제점
S3Presigner가 매번 생성됨 → 성능 저하 발생 가능.
presignedGetObjectRequest.url().toString(); 부분이 중복됨.
개선 코드
java
복사
편집
private final S3Presigner presigner;

@Autowired
public FunctionService(S3Presigner presigner) {
    this.presigner = presigner;
}

@Transactional
public String getPresignedUrl(DownloadDTO reqDto) throws IOException {
    GetObjectRequest getObjectRequest = GetObjectRequest.builder()
            .bucket(reqDto.getBucketName())
            .key(reqDto.getObjectKey())
            .build();

    PresignedGetObjectRequest presignedRequest = presigner.presignGetObject(
            GetObjectPresignRequest.builder()
                    .signatureDuration(Duration.ofMinutes(1))
                    .getObjectRequest(getObjectRequest)
                    .build()
    );

    String url = presignedRequest.url().toString();
    log.info("Generated presigned URL: {}", url);
    return url;
}
개선 이유
S3Presigner를 의존성 주입(DI) 방식으로 관리하여 반복 생성을 방지 → 성능 개선.
presignedGetObjectRequest.url().toString();을 중복 호출하지 않도록 String url 변수에 저장.
5️⃣ migrationFunction 메서드 개선
문제점
네임스페이스가 존재하는지 체크하는 로직이 불필요한 예외를 발생시킬 가능성이 있음.
try-catch 블록에서 너무 많은 로직이 처리됨 → 작은 메서드로 분리하는 것이 바람직.
개선 코드
java
복사
편집
public void migrationFunction() {
    List<Function> functions = functionRepository.findByFunctionStatusAndDelYn(TypeEnums.FunctionStatus.READY, "N");
    for (Function function : functions) {
        redeployFunctionIfNeeded(function);
    }
}

private void redeployFunctionIfNeeded(Function function) {
    if (function.isReady()) {
        function.setFunctionStatus(TypeEnums.FunctionStatus.DEPLOYING);
        functionRepository.save(function);
    }

    if (namespaceExists(function.getName())) return;

    try {
        triggerService.createUserNamespace(function);
        triggerService.createUserPVC(function);
        triggerService.createUserEnvoyFilter(function);
        knativeService.callIstioAndKnative(function);
    } catch (Exception e) {
        log.error("Migration failed for function '{}': {}", function.getName(), e.getMessage());
    }

    setupTriggerIfCron(function);
}

private boolean namespaceExists(String namespace) {
    return kubernetesClient.namespaces().withName(namespace).get() != null;
}

private void setupTriggerIfCron(Function function) {
    triggerRepository.findByFunction(function)
            .filter(trigger -> "cron".equals(trigger.getTriggerType()))
            .flatMap(triggerCronRepository::findByTrigger)
            .ifPresent(triggerCron -> triggerService.makePingSource(function.getName(), triggerCron.getTimezone(), triggerCron.getSchedule()));
}
개선 이유
namespaceExists 메서드를 추가하여 네임스페이스 존재 여부를 확인하는 부분을 따로 분리.
배포 관련 로직을 redeployFunctionIfNeeded 메서드로 분리하여 가독성 개선.
setupTriggerIfCron 메서드를 분리하여 트리거 설정을 한눈에 파악 가능.
🔹 정리
중복된 코드 제거 (e.g., findByFunctionKey 로직 분리).
불필요한 예외 출력 제거 (printStackTrace() → log.error()).
의존성 주입(DI) 활용 (KubernetesClient, S3Presigner).
메서드 크기를 줄이고 역할을 명확히 분리 (namespaceExists, setupTriggerIfCron 추가).
로깅 개선 (log.info("Message: {}", variable) 형태로 변경).
