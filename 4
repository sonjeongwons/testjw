GitHub PR 코드 리뷰 코멘트

팀원의 멋진 리팩토링 PR을 보면서 몇 가지 개선점과 추가 논의해볼 부분을 남겨볼게요! 😊
이번 PR에서 많은 코드 품질 향상이 있었고, 몇 가지 작은 개선이 더해지면 더욱 깔끔한 코드가 될 것 같아! 🚀
코멘트 몇 개 남길게! 🙌


---

1. getTriggerByType() - 중복 제거 & 더 나은 데이터 구조 활용 제안

🔹 리뷰 내용:
현재 getTriggerByType()에서 switch-case를 사용해서 TriggerHTTP, TriggerCron, TriggerAPIGW를 조회하고 있어!
이 방식도 좋지만, Map을 활용하면 더 깔끔하게 리팩토링할 수도 있어!

예제 코드 제안:

private static final Map<TriggerTypeEnum, Function<Trigger, Optional<?>>> triggerRepositoryMap = Map.of(
    TriggerTypeEnum.HTTP, triggerHTTPRepository::findByTrigger,
    TriggerTypeEnum.CRON, triggerCronRepository::findByTrigger,
    TriggerTypeEnum.APIGATEWAY, triggerAPIGWRepository::findByTrigger
);

private void getTriggerByType(Trigger trigger, TriggerHTTP triggerHTTP, TriggerCron triggerCron, TriggerAPIGW triggerAPIGW) {
    Optional<?> result = triggerRepositoryMap.getOrDefault(
        TriggerTypeEnum.valueOf(trigger.getTriggerType().toUpperCase()),
        t -> Optional.empty()
    ).apply(trigger);

    if (result.isEmpty()) {
        throw new ResourceNotFoundException("유효한 트리거가 존재하지 않습니다.");
    }
}

✅ 이렇게 하면 switch-case 없이 Map을 통해 조회할 수 있어서 코드의 가독성이 더 좋아지고, 새로운 트리거 타입이 추가될 때 OCP(Open-Closed Principle) 를 지킬 수 있어! 😃
💡 물론 지금 방식도 충분히 좋지만, 한 번 고려해보면 좋을 것 같아!


---

2. validateTriggerType() - 예외 처리 더 명확하게 하기

🔹 리뷰 내용:
현재 validateTriggerType()에서 StringUtils.isEmpty(triggerType)로 유효성 검사를 하고 있어!
여기서 한 가지 개선 포인트가 있어!

1️⃣ 현재 TriggerTypeEnum을 사용하고 있으니, 유효한 타입인지도 Enum으로 검증하면 좋을 것 같아.
2️⃣ IllegalArgumentException을 사용하면 더 적절한 예외 처리가 가능할 것 같아.

💡 예제 코드 제안:

private void validateTriggerType(String triggerType) {
    if (StringUtils.isEmpty(triggerType)) {
        throw new IllegalArgumentException(ExceptionMessages.TRIGGER_TYPE_REQUIRED);
    }

    try {
        TriggerTypeEnum.valueOf(triggerType.toUpperCase());
    } catch (IllegalArgumentException e) {
        throw new IllegalArgumentException("잘못된 트리거 타입입니다: " + triggerType);
    }
}

✅ 이렇게 하면 잘못된 트리거 타입을 Enum에서 한 번 더 검증해줘서 사전에 오류를 방지할 수 있어!
🔹 지금 코드도 괜찮지만, 예외를 더 구체적으로 다루면 디버깅할 때도 훨씬 좋을 것 같아!


---

3. modifyTrigger() - 불필요한 deleteTrigger() 호출 방지

🔹 리뷰 내용:
현재 modifyTrigger()에서는 기존 트리거를 삭제한 후 새로운 트리거를 등록하는 방식을 사용하고 있어.
하지만 트리거가 변경되지 않은 경우에도 기존 트리거를 삭제하는 로직이 실행될 가능성이 있어!

✅ 한 번 이런 로직으로 개선해보는 건 어떨까?

public TriggerDTO.Response modifyTrigger(TriggerDTO.Modify reqDto, String functionKey) throws IOException, ParseException {
    validateTriggerType(reqDto.getTriggerType());

    Function function = getFunctionOrThrow(functionKey);
    Trigger existingTrigger = getTriggerOrThrow(function);

    // 🚀 변경된 경우만 삭제 & 재등록!
    if (!existingTrigger.getTriggerType().equals(reqDto.getTriggerType())) {
        deleteTrigger(function, false);
        return updateTrigger(reqDto, function);
    }
    
    return existingTrigger.toDto(function, new TriggerHTTP(), new TriggerCron(), new TriggerAPIGW(), false);
}

✅ 이렇게 하면 불필요한 삭제 연산이 줄어들고, 성능 최적화에도 도움이 될 수 있어! 🚀
💡 지금 방식도 잘 동작하지만, 트리거가 변경되지 않은 경우에는 불필요한 연산을 방지하는 게 좋을 것 같아!


---

4. connectTrigger() - 중복 로직 제거 & validateTriggerConnection() 활용 개선

🔹 리뷰 내용:
현재 connectTrigger()에서 validateTriggerConnection()을 호출한 후에도 별도로 triggerAPIGW를 저장하는 로직이 추가되어 있어!
🚀 validateTriggerConnection()을 통해 "apigateway"가 아니라면 예외가 발생하도록 하고, 이후의 분기문을 줄이면 가독성이 더 좋아질 것 같아!

개선된 코드 예시:

public TriggerDTO.Response connectTrigger(TriggerDTO.Modify reqDto, String functionKey) throws IOException, ParseException {
    Function function = getFunctionOrThrow(functionKey);
    Trigger trigger = getTriggerOrThrow(function);

    validateTriggerConnection(trigger);

    TriggerAPIGW triggerAPIGW = triggerAPIGWRepository.save(TriggerAPIGW.register(reqDto));

    trigger.updateTriggerConnectedYn("Y");
    triggerRepository.save(trigger);

    return trigger.toDto(function, new TriggerHTTP(), new TriggerCron(), triggerAPIGW, true);
}

private void validateTriggerConnection(Trigger trigger) {
    if ("Y".equals(trigger.getTriggerConnectedYn())) {
        throw new IllegalStateException(ExceptionMessages.TRIGGER_ALREADY_CONNECTED);
    }

    if (!TriggerTypeEnum.APIGATEWAY.name().equals(trigger.getTriggerType())) {
        throw new IllegalArgumentException(ExceptionMessages.TRIGGER_TYPE_MISMATCH);
    }
}

✅ 이렇게 하면

validateTriggerConnection()을 활용하여 잘못된 트리거 연결을 사전에 방지

IllegalStateException과 IllegalArgumentException을 적절히 사용하여 예외의 의미를 명확히 함

connectTrigger() 내 불필요한 if-else 분기문 제거로 가독성 향상


💡 지금 방식도 좋지만, 분기를 줄이면 더 명확한 로직이 될 것 같아!


---

마무리 🎉

👏 이번 리팩토링 PR 정말 잘했어!
특히 Magic String 제거, 예외 메시지 통합, Guard Clause 적용, Enum 활용 부분이 너무 좋았어!
몇 가지 더 개선하면 더 깔끔하고 유지보수하기 좋은 코드가 될 것 같아서 코멘트 남겼어! 😃

✅ 요약 1️⃣ getTriggerByType() → Map 활용하여 더 유연하게 리팩토링 가능
2️⃣ validateTriggerType() → Enum 활용하여 잘못된 트리거 타입 검증
3️⃣ modifyTrigger() → 트리거 변경되지 않으면 삭제 로직 생략 가능
4️⃣ connectTrigger() → 중복 제거하고 예외를 명확하게 처리

🚀 팀원들이랑도 논의해보고, 적용해볼 수 있으면 같이 개선해보면 좋을 것 같아!
💡 코드 너무 좋고, 몇 가지 디테일만 다듬으면 완벽할 것 같아! 정말 수고했어! 👍

