Pull Request (PR) 개요

PR 제목

🔧 Refactor TriggerService for Better Maintainability, Readability, and Performance


---

PR 개요

이번 PR에서는 TriggerService 클래스의 코드 품질을 향상하기 위해 클린 코드 원칙과 SOLID 원칙을 적용하여 리팩토링을 수행하였습니다.
이 과정에서 중복 코드 제거, Magic String 제거, 예외 메시지 상수화, Guard Clause 적용, Enum 활용, 메서드 역할 분리 등을 통해 가독성과 유지보수성을 개선하였습니다.


---

개발 내용

1. 중복 코드 제거 및 메서드 추출

트리거 타입에 따른 조회 로직 중복 제거
→ getTriggerByType(Trigger trigger, TriggerHTTP triggerHTTP, TriggerCron triggerCron, TriggerAPIGW triggerAPIGW)

트리거 연결 여부 검증 로직 중복 제거
→ validateTriggerConnection(Trigger trigger)

트리거 타입 검증 로직 중복 제거
→ validateTriggerType(String triggerType)

함수 및 트리거 조회 중복 제거
→ getFunctionOrThrow(String functionKey), getTriggerOrThrow(Function function)


2. Magic String 제거 및 Enum 활용

기존 if-else 문에서 트리거 타입을 비교할 때 문자열을 직접 사용
→ TriggerTypeEnum 생성하여 타입 안전성을 보장
→ TriggerTypeEnum.valueOf(trigger.getTriggerType().toUpperCase()) 형태로 변경하여 가독성과 유지보수성 향상


3. 예외 메시지 상수화 (ExceptionMessages 추가)

하드코딩된 문자열 기반 예외 메시지 제거
→ ExceptionMessages 클래스를 생성하여 예외 메시지를 한 곳에서 관리
→ 예외 발생 시 일관된 메시지를 제공하며, 유지보수 시 수정이 용이


4. Guard Clause 적용 (불필요한 if-else 제거)

조기 반환(Early Return) 적용하여 코드 중첩 최소화

modifyTrigger(), connectTrigger() 등에서 if-else 중첩을 줄이고 명확한 흐름을 유지



5. 불필요한 객체 생성 제거

searchTrigger(), connectTrigger() 등에서 필요하지 않은 객체 초기화(new TriggerHTTP(), new TriggerCron(), new TriggerAPIGW())
→ 실제 조회 시 객체를 생성하도록 변경하여 불필요한 객체 생성 방지



---

메서드별 변경점 및 개선 사항

1. searchTrigger(String functionKey)

변경 사항

getTriggerByType() 메서드를 분리하여 트리거 조회 로직 중복 제거

Magic String 제거 (Trigger 타입을 문자열이 아닌 TriggerTypeEnum으로 관리)

예외 메시지를 상수화 (ExceptionMessages 활용)


public TriggerDTO.Response searchTrigger(String functionKey) {
    Function function = getFunctionOrThrow(functionKey);
    Trigger trigger = getTriggerOrThrow(function);

    TriggerHTTP triggerHTTP = new TriggerHTTP();
    TriggerCron triggerCron = new TriggerCron();
    TriggerAPIGW triggerAPIGW = new TriggerAPIGW();

    getTriggerByType(trigger, triggerHTTP, triggerCron, triggerAPIGW);

    return trigger.toDto(function, triggerHTTP, triggerCron, triggerAPIGW, false);
}

개선된 점

코드 가독성 향상: getTriggerByType() 메서드를 분리하여 한 눈에 보기 쉽도록 개선

중복 제거: 트리거 조회 로직을 메서드로 추출하여 코드 재사용성 증가



---

2. modifyTrigger(TriggerDTO.Modify reqDto, String functionKey)

변경 사항

중복된 트리거 타입 검증 로직을 validateTriggerType()으로 추출

불필요한 객체 초기화 제거

조기 반환 적용 (Guard Clause)


public TriggerDTO.Response modifyTrigger(TriggerDTO.Modify reqDto, String functionKey) throws IOException, ParseException {
    validateTriggerType(reqDto.getTriggerType());

    Function function = getFunctionOrThrow(functionKey);
    deleteTrigger(function, false);

    return updateTrigger(reqDto, function);
}

private void validateTriggerType(String triggerType) {
    if (StringUtils.isEmpty(triggerType)) {
        throw new RuntimeException(ExceptionMessages.TRIGGER_TYPE_REQUIRED);
    }
}

개선된 점

유지보수성 향상: 트리거 타입 검증 로직이 여러 곳에서 사용되므로 별도 메서드로 분리

Guard Clause 적용: 불필요한 if-else 제거하여 코드 흐름이 단순해짐



---

3. connectTrigger(TriggerDTO.Modify reqDto, String functionKey)

변경 사항

트리거 연결 여부 검증 로직을 validateTriggerConnection()으로 분리

Enum 활용 (Magic String 제거)


public TriggerDTO.Response connectTrigger(TriggerDTO.Modify reqDto, String functionKey) throws IOException, ParseException {
    Function function = getFunctionOrThrow(functionKey);
    Trigger trigger = getTriggerOrThrow(function);

    validateTriggerConnection(trigger);

    TriggerAPIGW triggerAPIGW = triggerAPIGWRepository.save(TriggerAPIGW.register(reqDto));

    trigger.updateTriggerConnectedYn("Y");
    triggerRepository.save(trigger);

    return trigger.toDto(function, new TriggerHTTP(), new TriggerCron(), triggerAPIGW, true);
}

private void validateTriggerConnection(Trigger trigger) {
    if ("Y".equals(trigger.getTriggerConnectedYn())) {
        throw new RuntimeException(ExceptionMessages.TRIGGER_ALREADY_CONNECTED);
    }
    if (!TriggerTypeEnum.APIGATEWAY.name().equals(trigger.getTriggerType())) {
        throw new RuntimeException(ExceptionMessages.TRIGGER_TYPE_MISMATCH);
    }
}

개선된 점

중복 제거: 트리거 연결 검증 로직을 메서드로 분리하여 재사용 가능

Magic String 제거: TriggerTypeEnum.APIGATEWAY.name()을 사용하여 타입 비교



---

기술적 근거 및 출처

1. Magic String 제거 및 Enum 사용

Enum을 사용하면 컴파일 타임 안전성을 확보하고 유지보수를 용이하게 함 (Joshua Bloch, Effective Java)



2. Guard Clause 적용

Guard Clause를 사용하면 코드의 가독성이 향상되며, 불필요한 중첩을 방지할 수 있음 (Martin Fowler, Refactoring)



3. 예외 메시지 상수화

예외 메시지를 중앙에서 관리하면 일관성을 유지하고 유지보수가 쉬워짐 (Robert C. Martin, Clean Code)





---

PR 승인 후 기대 효과

코드 가독성 및 유지보수성 향상: 중복 제거, Guard Clause 적용, Enum 사용

버그 발생 가능성 감소: Magic String 제거로 인해 오타로 인한 오류 방지

개발 생산성 증가: validateTriggerType(), validateTriggerConnection() 등 재사용 가능한 메서드 도입



---

리뷰 요청 사항

Enum을 활용한 Magic String 제거가 적절한지 검토 필요

ExceptionMessages를 활용한 예외 메시지 통합이 적절한 방식인지 확인 필요

Guard Clause 적용으로 코드 흐름이 명확해졌는지 검토 요청



---

마무리

이번 리팩토링을 통해 코드의 유지보수성과 가독성을 향상시켰습니다.
리뷰 부탁드립니다! 🚀

