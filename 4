package com.example.demo;

import com.ahnlab.v3engine.*;
import java.util.Properties;

public class TestClass
{
	/*
	// return values
	 * V3Const.RET_AUTH_FAILED         		: 인증 실패
 	 * V3Const.RET_CLIENT_TIMEOUT           : 요청 클라이언트 측 타임아웃
 	 * V3Const.RET_NETWORK_ERROR            : 네트워크 장애
 	 * V3Const.RET_CLIENT_FAIL              : 요청 클라이언트 실행 실패
 	 * V3Const.RET_CANNOT_SCAN              : 검사 실패
 	 * V3Const.RET_NO_MALWARE               : 정상
 	 * V3Const.RET_MALWARE_FOUND            : 감염          (치료를 하지 않을 경우)
 	 * V3Const.RET_CLEAN_MODIFY_SUCCESS     : 수정치료 성공 (치료를 할 경우)
 	 * V3Const.RET_CLEAN_MODIFY_FAIL        : 수정치료 실패 (치료를 할 경우)
 	 * V3Const.RET_CLEAN_DEL_SUCCESS        : 삭제치료 성공 (치료를 할 경우)
 	 * V3Const.RET_CLEAN_DEL_FAIL           : 삭제치료 실패 (치료를 할 경우)
 	 * V3Const.RET_CLEAN_DEL_FAIL_BYCONF    : 설정에 의한 삭제 치료 실패 (삭제 치료 금지 옵션을 설정 할 경우)
 	 - 치료에 관한 옵션은 검사 서버의 설정파일(option.cfg)에서 clean과 delete 옵션을 통해 설정 가능 함.
	*/

	/*
	// property keys
	V3Const.PROP_KEY_FILENAME       : 검사 파일명
	V3Const.PROP_KEY_ERROR_NO       : 에러 번호
	V3Const.PROP_KEY_MORE_INFO	    : 부가 정보
	V3Const.PROP_KEY_MALWARE_NAME   : 악성코드 이름(진단명)
	V3Const.PROP_KEY_MALWARE_NO     : 악성코드 번호(진단번호)
	V3Const.PROP_KEY_MALWARE_FILE   : 악성코드가 발견된 파일
    V3Const.PROP_KEY_EXCEPTION      : 익셉션 메세지(자바 익셉션이 발생 한 경우에 한해서 전달됨)
	*/

	/*
	// filename을 검사하여 결과를 알려준다.
	public static int V3Scanner.scanFile(String filename);
	// filename을 검사하여 부가정보를 prop에 담는다. (prop이 null인 경우 부가 정보는 담기지 않는다.)
	public static int V3Scanner.scanFile(String filename, Properties prop);
	*/

    static void printScanInfo(String filename, int ret, Properties prop)
    {
        // message
        String msg = "";
        switch (ret)
        {
            case V3Const.RET_AUTH_FAILED	: msg = "인증 실패";
                break;

            case V3Const.RET_CLIENT_TIMEOUT  : msg = "검사 요청 클라이언트 TIMEOUT";
                break;

            case V3Const.RET_NETWORK_ERROR  : msg = "네트워크 장애";
                break;

            case V3Const.RET_CLIENT_FAIL  : msg = "검사 요청 클라이언트 오류";
                break;

            case V3Const.RET_CANNOT_SCAN  : msg = "검사 실패";
                break;

            case V3Const.RET_NO_MALWARE   : msg = "악성코드 없음";
                break;

            case V3Const.RET_MALWARE_FOUND : msg = "악성코드 발견";
                break;

            case V3Const.RET_CLEAN_MODIFY_SUCCESS   : msg = "수정 치료 성공";
                break;

            case V3Const.RET_CLEAN_MODIFY_FAIL      : msg = "수정 치료 실패(삭제 권고)";
                break;

            case V3Const.RET_CLEAN_DEL_SUCCESS      : msg = "삭제 치료 성공";
                break;

            case V3Const.RET_CLEAN_DEL_FAIL      : msg = "삭제 치료 실패(삭제 권고)";
                break;

            case V3Const.RET_CLEAN_DEL_FAIL_BYCONF      : msg = "삭제 치료 실패(검사 서버 옵션)";
                break;

            default: msg = "알수 없음";
                break;
        }

        // print information
        System.out.println("filename  : " + filename);
        System.out.println("return    : " + ret + " (" + msg + ")");
        if (prop != null)
        {
            System.out.println("date rev  : " + prop.getProperty(V3Const.PROP_KEY_DATE_REV, "N/A"));
            System.out.println("scan time : " + prop.getProperty(V3Const.PROP_KEY_SCAN_DATE_TIME, "N/A"));
            System.out.println("more info : " + prop.getProperty(V3Const.PROP_KEY_MORE_INFO, "N/A"));
            if (ret == V3Const.RET_MALWARE_FOUND)
            {
                System.out.println( " malware : " + prop.getProperty(V3Const.PROP_KEY_MALWARE_NAME, "N/A") );
                System.out.println( "     in  : " + prop.getProperty(V3Const.PROP_KEY_MALWARE_FILE, "N/A") );
            }
            System.out.println(prop);
        }
        System.out.println("");
    }

    public static void main(String[] args) throws Exception
    {
        // files - 원격지 서버에 위치한 파일
        // filesR - 로컬 클라이언트에 위치한 파일
        String files[] = new String[]{"/root/test.txt", "/root/test.zip"};
        String filesR[] = new String[]{"c:\\20210930_TSJava_v3java_only.zip"};

        // [ V3Scanner.class와 연동하기 위한 설정파일 등록 ]
        //
        // ahnlab_v3engine.jar와  함께 제공되는 V3Scanner.properties는  V3Scanner.class를 위한 설정파일이다.
        // 이를 활용하기 위해 아래의 함수를 활용할 수 있다. 함수 사용법은 함께 제공 된 javadoc 문서를 참조.
        //
        if(! V3Scanner.setConfPropertiesPath("V3Scanner.properties"))	// 예제는 예제프로그램과 동일한 디렉토리에 설정파일이 있는 경우다.
        {
            System.out.println("configuration properties failed... using default properties - " + V3Scanner.getConfPropertiesPath() + ".");
        }
		/*
		    [ 연동 방식 ]
                아래의 두 가지 방식으로 연동이 가능한다.
                scanFile() 함수에 검사 할 대상파일의 경로만 전달 할 경우, 바이러스 감염 유무 또는
                치료 할 시 치료 결과 유무만 함수 반환값으로 받을 수 있다. 이때 반환값 정의는
                V3Const 클래스에 RET_* 형태의 static 상수값으로 정의되어 있다.
                만일 검사 결과에 대한 좀 더 자세한 정보(진단명, 예상되는 치료정보)를 얻고자 할 경우,
                scanFile() 함수에 검사 할 대상 파일의 경로와 더불어 빈(empty) property 객체를 인자로
                전달한다. 검사 결과에 대한 상세 정보는 함수호출이 종료 된 후 전달한 property에 채워진다.
                property의 key값은 V3Const 클래스에 PROP_KEY_* 형태의 static 상수값으로 정의되어 있다.
    		 주의:
    			특별한 경우가 아니라면 하나의 대상에 대해서는 scanFile()을 한번만 호출하도록 해야 한다.
        [ scanFile() 함수의 리턴값 ]
            V3Const.RET_AUTH_FAILED           	 : 인증 실패
			V3Const.RET_CLIENT_TIMEOUT           : 요청 클라이언트 측 타임아웃
			V3Const.RET_NETWORK_ERROR            : 네트워크 장애
			V3Const.RET_CLIENT_FAIL              : 요청 클라이언트 실행 실패
			V3Const.RET_CANNOT_SCAN              : 검사 실패
			V3Const.RET_NO_MALWARE               : 정상
			V3Const.RET_MALWARE_FOUND            : 감염          (치료를 하지 않을 경우)
			V3Const.RET_CLEAN_MODIFY_SUCCESS     : 수정치료 성공 (치료를 할 경우)
			V3Const.RET_CLEAN_MODIFY_FAIL        : 수정치료 실패 (치료를 할 경우)
			V3Const.RET_CLEAN_DEL_SUCCESS        : 삭제치료 성공 (치료를 할 경우)
			V3Const.RET_CLEAN_DEL_FAIL           : 삭제치료 실패 (치료를 할 경우)
			V3Const.RET_CLEAN_DEL_FAIL_BYCONF    : 설정에 의한 삭제 치료 실패 (삭제 치료 금지 옵션을 설정 할 경우)
 	 - 치료에 관한 옵션은 검사 서버의 설정파일(option.cfg)에서 clean과 delete 옵션을 통해 설정 가능 함.
	    [ scanFile() 상세 검사를 했을 경우 전달되는 프로퍼티 키 ]
        	V3Const.PROP_KEY_FILENAME     : 검사 파일명
        	V3Const.PROP_KEY_ERROR_NO     : 에러 번호
        	V3Const.PROP_KEY_MORE_INFO	: 부가 정보
        	V3Const.PROP_KEY_MALWARE_NAME : 악성코드 이름(진단명)
        	V3Const.PROP_KEY_MALWARE_NO   : 악성코드 번호(진단번호)
        	V3Const.PROP_KEY_MALWARE_FILE : 악성코드가 발견된 파일
        ---case 1 혹은 case 2 둘 중 하나만을 사용한다.
	    [ 감염 유무만 간단하게 검사하고자 할 경우 ]
	        public static int V3Scanner.scanFile(String filename);
	    [ 검사와 함께 상세 진단 정보도 얻고자 할 경우 ]
	        public static int V3Scanner.scanFile(String filename, Properties prop);
	    */

        System.out.println("----- case 1) simple scan --------------------------------------------");
        // simple scan
        for (int i=0; i<files.length; i++)
        {
            String filename = files[i];
            int ret = V3Scanner.scanFile(filename);
            printScanInfo(filename, ret, null);
        }
        System.out.println("----- case 2) remote scan --------------------------------------------");

        // scan with more information
        for (int i=0; i<filesR.length; i++)
        {
            String filename = filesR[i];
            Properties prop = new Properties();
            int ret = V3Scanner.remoteScanFile(filename, prop);

            //System.out.println("remote scan result : " + ret);
            printScanInfo(filename, ret, prop);

        }


        System.out.println("----- case 3) detail scan --------------------------------------------");
        // scan with more information
        for (int i=0; i<files.length; i++)
        {
            String filename = files[i];
            Properties prop = new Properties();
            int ret = V3Scanner.scanFile(filename, prop);
            printScanInfo(filename, ret, prop);

        }

    }
}
