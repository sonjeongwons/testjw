package com.scf.manager.mvc.repository;

import com.querydsl.core.types.OrderSpecifier;
import com.querydsl.core.types.Projections;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.querydsl.jpa.JPQLQuery;
import com.scf.manager.base.domain.RetrieveClauseBuilder;
import com.scf.manager.common.exception.ResourceNotFoundException;
import com.scf.manager.mvc.domain.Function;
import com.scf.manager.mvc.domain.QFunction;
import com.scf.manager.mvc.domain.QTrigger;
import com.scf.manager.mvc.dto.FunctionDTO;
import io.micrometer.core.instrument.util.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;

import static com.scf.manager.mvc.domain.QFunction.function;

public class FunctionRepositoryImpl extends QuerydslRepositorySupport implements FunctionRepositoryCustom {

    @PersistenceContext
    private EntityManager em;

    public FunctionRepositoryImpl() {
        super(Function.class);
    }

//    @Override
//    public Page<FunctionDTO.Response> searchAllBoard(FunctionDTO.Search reqDto){
//		JPQLQuery<BoardDTO.Response> query = getQuerydsl().createQuery();
////		QFun board = QBoard.board;
////		query.select(Projections.fields(
////                        BoardDTO.Response.class
////						, board.boardSeq
////						, board.title
////						, board.content
////						, board.delYn
////						, board.useYn
////						, board.notiAt
////						, board.recommendCnt
////						))
////                .from(board)
////                .where(
////                        likeSearchText(reqDto)
////                )
////                .orderBy(board.boardSeq.desc());
////
////        PageRequest pageable = RetrieveClauseBuilder.setOffsetLimit(query, reqDto);
////        List<BoardDTO.Response> resultList = query.fetch();
////        long total = query.fetchCount();
////        return new PageImpl<>(resultList, pageable, total);
//        return null;
//    }

    public BooleanExpression eqSearchText(FunctionDTO.Search reqDto) {

        if (StringUtils.isEmpty(reqDto.getAccountId()) && StringUtils.isEmpty(reqDto.getUserId())) {
            throw new ResourceNotFoundException("어카운트 아이디 또는 유저 아이디를 확인해주십시오");
        }
        if (StringUtils.isEmpty(reqDto.getUserId())) {
            return function.accountId.eq(reqDto.getAccountId());
        } else {
            return function.userId.eq(reqDto.getUserId()).and(function.accountId.eq(reqDto.getAccountId()));
        }
    }

    @Override
    public Page<FunctionDTO.Response> searchAllFunction(FunctionDTO.Search reqDto) {
        JPQLQuery<FunctionDTO.Response> query = getQuerydsl().createQuery();
        QFunction function = QFunction.function;

        query.select(Projections.fields(
                        FunctionDTO.Response.class
                        , function.displayName
                        , function.runtime
                        , function.region
                        , function.functionStatus
                        , function.functionKey
                        , function.functionSeq
                        , function.accountId
                        , function.userId
                        , function.createAt
                        , function.modifyAt
                )).from(function)
                .where(
                        function.region.eq(reqDto.getRegion())
                        , eqSearchText(reqDto)
                        , likeSearchDisplayName(reqDto)
                        , function.delYn.eq("N")
                ).orderBy(
                        orderSearchText(reqDto)
                );
        PageRequest pageable = RetrieveClauseBuilder.setOffsetLimit(query, reqDto);
        List<FunctionDTO.Response> resultList = query.fetch();
//        log.info("resultList = " + resultList);
        long total = query.fetchCount();
//        log.info("total = " + total);
        return new PageImpl<>(resultList, pageable, total);

    }

    private OrderSpecifier<?> orderSearchText(FunctionDTO.Search reqDto) {
//        log.info("reqDto = " + reqDto);
        if ("name,desc".equals(reqDto.getOrderBy())) {
            return function.displayName.desc();
        } else if ("name,asc".equals(reqDto.getOrderBy())) {
            return function.displayName.asc();
        } else if ("createAt,desc".equals(reqDto.getOrderBy())) {
            return function.createAt.desc();
        } else if ("createAt,asc".equals(reqDto.getOrderBy())) {
            return function.createAt.asc();
        } else if ("region,desc".equals(reqDto.getOrderBy())) {
            return function.region.desc();
        } else if ("region,asc".equals(reqDto.getOrderBy())) {
            return function.region.asc();
        } else {
            return function.functionSeq.desc();
        }


    }

    public BooleanExpression likeSearchDisplayName(FunctionDTO.Search reqDto) {

        if (!StringUtils.isEmpty(reqDto.getSearchValue())) {
            return function.displayName.like("%" + reqDto.getSearchValue() + "%");
        } else {
            return null;
        }
    }
}



/api/v1/function?userId=10360&searchValue=1&orderBy=name,asc&region=KR-EAST-1&projectId=PROJECT-LamgKhixt0mTgSO3-F6l4a
