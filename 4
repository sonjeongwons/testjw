주요 회고 질문에 대한 팀원별 답변


---

Q1. 리팩토링을 통해 개선된 점은?

🟢 팀원 A: "코드 가독성이 정말 많이 좋아졌고, 새로 온 팀원도 빠르게 적응할 수 있을 것 같아요."
🟠 팀원 B: "중복 로직을 제거하면서 함수 분리가 잘되어 유지보수할 때 훨씬 편리해졌어요."
🔵 팀원 C: "ORM 쿼리를 최적화해서 API 응답 속도가 눈에 띄게 개선된 게 가장 큰 성과라고 생각해요."


---

Q2. 리팩토링 과정에서 가장 어려웠던 점은?

🟢 팀원 A: "레거시 코드가 너무 많아서 수정할 때 어디까지 손대야 할지 범위를 정하는 게 힘들었어요."
🟠 팀원 B: "리팩토링 중간에 기능 추가 요청이 들어와서 일정 조율하는 게 가장 어려웠던 부분이었어요."
🔵 팀원 C: "코드를 리팩토링하다 보니 기존 로직에서 예상치 못한 버그가 발생해서 디버깅하는 데 시간이 걸렸어요."


---

Q3. 리팩토링이 코드 품질과 개발 속도에 어떤 영향을 미쳤는가?

🟢 팀원 A: "코드가 일관성 있어지면서 리뷰 속도가 빨라졌고, 신규 개발 속도도 향상된 것 같아요."
🟠 팀원 B: "기존 코드에서는 같은 로직을 중복 작성해야 했는데, 리팩토링 이후 재사용성이 높아져서 작업이 훨씬 수월해졌어요."
🔵 팀원 C: "처음에는 리팩토링하느라 시간이 많이 걸렸지만, 이후에는 버그 수정이나 기능 추가가 훨씬 쉬워졌어요."


---

Q4. 다음에 리팩토링을 진행할 때 개선할 점은?

🟢 팀원 A: "단계별로 리팩토링을 진행해서 기능 개발과 충돌이 없도록 더 세밀하게 계획했으면 좋겠어요."
🟠 팀원 B: "리팩토링 자동화 도구를 적극적으로 활용해서 반복적인 수정 작업을 줄이면 좋을 것 같아요."
🔵 팀원 C: "리팩토링 전에 충분한 테스트 코드가 준비되어 있으면, 예상치 못한 사이드 이펙트가 줄어들 것 같아요."


---

Q5. 배운 점과 공유하고 싶은 경험은?

🟢 팀원 A: "리팩토링을 통해 코드 스타일을 통일하는 게 유지보수에 얼마나 중요한지 깨달았어요."
🟠 팀원 B: "리팩토링하면서 코드 리뷰가 정말 중요하다는 걸 다시 한번 느꼈어요. 서로의 피드백이 많은 도움이 됐어요."
🔵 팀원 C: "리팩토링은 단순히 코드 개선이 아니라 협업 효율도 높여준다는 걸 경험했어요."


---

이렇게 다양한 시각에서 회고를 정리하면 좀 더 풍부한 논의가 가능할 거야!

