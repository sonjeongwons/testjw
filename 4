4개월 간의 코드 리팩토링 회고 활동 정리

팀원들과 4개월 동안 진행한 코드 리팩토링을 돌아보는 시간을 가지면서, 효과적인 회고 활동을 위해 다음과 같이 정리할 수 있어.


---

1. 회고 활동 구성

A. 전체 진행 과정 정리

리팩토링 목표: 초기 목표와 기대했던 결과 정리

리팩토링 진행 방식: 팀 내 역할 분배, 코드 리뷰 방식, 도입한 원칙 (예: SOLID 원칙, 클린 코드, 리팩토링 패턴)

주요 리팩토링 항목: 어떤 코드들을 개선했으며, 어떤 패턴을 도입했는지 정리

성과 측정 방법: 코드 품질 개선 여부, 성능 개선 여부, 유지보수성 향상 여부 등


B. 주요 회고 질문

1) 리팩토링을 통해 개선된 점은?

2) 리팩토링 과정에서 가장 어려웠던 점은?

3) 리팩토링이 코드 품질과 개발 속도에 어떤 영향을 미쳤는가?

4) 다음에 리팩토링을 진행할 때 개선할 점은?

5) 배운 점과 공유하고 싶은 경험은?


C. 팀별 공유 및 피드백

코드 리뷰 과정에서 배운 점 공유

각 팀원들의 개선 아이디어 및 피드백

차기 리팩토링 프로젝트에 반영할 사항 논의



---

2. 리팩토링 활동 중 겪은 어려움

기술적인 어려움

1. 코드 변경의 영향 범위가 예상보다 컸다

기존 코드와의 의존성이 많아 작은 변경도 예상치 못한 사이드 이펙트를 발생시킴.

해결 방법: 테스트 코드 강화, 단계별 리팩토링 진행.



2. 레거시 코드와의 충돌

오래된 코드와 새로운 코드 스타일이 혼재하면서 통일성이 부족해짐.

해결 방법: 코드 스타일 가이드 수립 및 일관된 패턴 적용.



3. 데이터베이스 관련 리팩토링의 부담

SQL 쿼리 최적화 및 ORM 변경 과정에서 성능 저하 이슈 발생.

해결 방법: 트랜잭션 관리 및 쿼리 튜닝을 통한 성능 최적화.




프로세스적인 어려움

4. 팀 내 리팩토링 우선순위 조율 어려움

기능 개발 일정과 리팩토링을 병행해야 해서 일정 관리가 힘들었음.

해결 방법: 스프린트마다 일정 부분 리팩토링을 배정하는 방식으로 조정.



5. 코드 리뷰 피드백의 일관성 부족

팀원마다 코드를 보는 관점이 달라 피드백 기준이 상이함.

해결 방법: 코드 리뷰 체크리스트 및 스타일 가이드 도입.



6. 자동화 부족으로 반복적인 작업 부담

일부 코드 변경이 많아 반복적인 수정이 필요했음.

해결 방법: 정적 분석 도구와 리팩토링 자동화 도구 적극 활용.





---

3. 리팩토링을 통해 얻은 성과

코드 품질 개선

가독성 향상: 불필요한 중복 코드 제거, 명확한 네이밍 적용.

유지보수성 향상: 단일 책임 원칙(SRP) 적용, 모듈화 및 인터페이스 개선.

확장성 증가: 새로운 기능 추가 시 변경 범위 최소화.


성능 개선

불필요한 연산 제거 및 쿼리 최적화로 속도 향상

메모리 사용량 감소 및 GC 최적화


개발 생산성 향상

코드 리뷰 속도 개선: 일관된 코드 스타일 적용으로 코드 이해도가 상승.

신규 기능 개발 속도 증가: 리팩토링 후 코드 구조가 명확해지면서 개발 속도가 빨라짐.


협업 효율 증가

팀원 간 코드 이해도 상승: 공통적인 리팩토링 원칙을 학습하면서 코드 이해가 쉬워짐.

코드 리뷰 및 피드백 문화 정착: 주기적인 코드 리뷰를 통한 팀워크 향상.



---

4. 앞으로 개선할 점

1. 리팩토링을 더 자주, 작은 단위로 진행

일정한 간격으로 코드 품질을 유지하는 것이 중요.



2. 자동화된 리팩토링 도구 적극 활용

정적 분석 도구 (SonarQube, ESLint 등) 및 리팩토링 도구 활용.



3. 리팩토링 관련 사전 학습 및 가이드 정리

팀 내에서 리팩토링 가이드를 만들어 공유.



4. 리팩토링과 기능 개발을 병행할 수 있는 워크플로우 구축

기능 개발과 리팩토링이 충돌하지 않도록 스프린트 계획에 반영.





---

5. 마무리

이번 리팩토링 활동을 통해 팀원 간의 협업이 강화되고 코드 품질이 향상되었어.
특히, 리팩토링을 통해 유지보수성과 확장성이 크게 개선되었고, 앞으로의 개발이 더 효율적으로 이루어질 기반을 마련했어.
이제 이 경험을 바탕으로 지속적인 리팩토링 문화를 유지하면서 더 나은 개발 환경을 만들어 가자.


---

추가적으로 회고에서 논의하면 좋을 질문들

Q1. 리팩토링을 진행하면서 가장 만족스러웠던 개선 사례는 무엇인가?

Q2. 향후 프로젝트에서 리팩토링을 진행할 때 어떤 점을 미리 준비하면 좋을까?

Q3. 코드 품질 개선 외에 개발 프로세스나 협업 측면에서 얻은 교훈은 무엇인가?

