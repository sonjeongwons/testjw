나는 현재 docker-compose를 통해 아래 파일들을 구동하고있어. 기존에는 otelcol-0.118.0.yaml 파일과 docker-compose.yaml 파일을 통해 docker-compose up 명령어로 애플리케이션을 구동했지만, 난 pipelines.yaml, data-prepper-config.yaml 을 신규로 추가함으로써 data-prepper 애플리케이션을 추가로 docker-compose.yaml에 추가하여 구동할거야.
일단 docker-compose로 해당 신규로 추가된 yaml들을 구동 못하고있어서 아래 <실행옵션> 예시로 docker 명령어로 애플리케이션을 기동하여 검증했어. 해당 명령어로 docker구동하지않고 최종적으로는 내 docker-compose.yaml 파일에 아래 내용들을 업데이트해서 data-prepper 애플리케이션을 구동하고싶어. docker-compose.yaml 파일을 수정해봐.

<실행옵션>
docker run --add-host opensearch-dashboard-paas.kr-west1.dev2.samsungsdscloud.com:198.18.3.136 \
  --name data-prepper -p 4900:4900 \
  -v ./pipelines.yaml:/usr/share/data-prepper/pipelines/pipelines.yaml \
  -v ./data-prepper-config.yaml:/usr/share/data-prepper/config/data-prepper-config.yaml \
  harbor-paasdev.samsungsdscloud.com/lma/data-prepper:2.10.1


// pipelines.yaml
otel-logs-pipeline:
  buffer:
    bounded_blocking:
      batch_size: 200
      buffer_size: 50000
  processor:
  - date:
      destination: '@timestamp'
      from_time_received: true
  sink:
  - opensearch:
      hosts:
      - https://opensearch-paas.kr-west1.dev2.samsungsdscloud.com
      index: cvc-logs-%{yyyy.MM.dd}
      index_type: custom
      insecure: true
      password: '!CVC_PW123'
      username: cvc_data
  source:
    otel_logs_source:
      authentication:
        unauthenticated:
      port: 21892
      ssl: false
  workers: 3
otel-trace-pipeline:
  buffer:
    bounded_blocking:
      batch_size: 200
      buffer_size: 50000
  delay: "100"
  processor:
  - date:
      destination: '@timestamp'
      from_time_received: true
  sink:
  - pipeline:
      name: raw-trace-pipeline
  - pipeline:
      name: service-map-pipeline
  source:
    otel_trace_source:
      authentication:
        unauthenticated:
      port: 21890
      ssl: false
  workers: 3
raw-trace-pipeline:
  buffer:
    bounded_blocking:
      batch_size: 200
      buffer_size: 50000
  processor:
  - otel_trace_raw:
  - otel_trace_group:
      hosts:
      - https://opensearch-paas.kr-west1.dev2.samsungsdscloud.com
      insecure: true
      password: '!CVC_PW123'
      username: cvc_data
  sink:
  - opensearch:
      hosts:
      - https://opensearch-paas.kr-west1.dev2.samsungsdscloud.com
      index_type: trace-analytics-raw
      insecure: true
      password: '!CVC_PW123'
      username: cvc_data
  source:
    pipeline:
      name: otel-trace-pipeline
  workers: 3
service-map-pipeline:
  buffer:
    bounded_blocking:
      batch_size: 200
      buffer_size: 50000
  delay: "100"
  processor:
  - service_map_stateful:
  sink:
  - opensearch:
      hosts:
      - https://opensearch-paas.kr-west1.dev2.samsungsdscloud.com
      index_type: trace-analytics-service-map
      insecure: true
      password: '!CVC_PW123'
      username: cvc_data
  source:
    pipeline:
      name: otel-trace-pipeline
  workers: 3








// data-prepper-config.yaml
ssl: false
circuit_breakers:
  heap:
    usage: 0.8gb
    reset: 5s
    check_interval: 1s
peer_forwarder:
  ssl: false
  ssl_insecure_disable_verification: true




// otelcol-0.118.0.yaml
extensions:
  basicauth/otel:
    client_auth:
      username: 'cvc_data' # PARAM : connection.env value update
      password: '!CVC_PW123' # PARAM : connection.env value update
  file_storage/logs:
    create_directory: true
    directory: /var/lib/otelcol/file_storage/gateway
    timeout: 1s
    compaction:
      on_rebound: true
      rebound_needed_threshold_mib: 100
      rebound_trigger_threshold_mib: 10
      check_interval: 5s
      cleanup_on_start: true
      directory: /var/lib/otelcol/file_storage/gateway/tmp

processors:
  batch: {}
  memory_limiter:
    check_interval: 1s
    limit_mib: 462
    limit_percentage: 80
    spike_limit_mib: 92
    spike_limit_percentage: 25
  resourcedetection/system:
    detectors: ["system"]
    system:
      hostname_sources: ["os"]
  resource:
    attributes:
      - key: "lma-tenant"
        value: "cvc"  # PARAM :: vmdb1
        action: insert
      - key: "node"
        value: 'cvc02'
        action: insert
  transform:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["host.name"], resource.attributes["host.name"])
          - set(attributes["node.ip"], resource.attributes["node.ip"])
          - set(attributes["process.command"], resource.attributes["process.command"])
          - set(attributes["process.command_line"], resource.attributes["process.command_line"])
          - set(attributes["process.executable.name"], resource.attributes["process.executable.name"])
          - set(attributes["process.executable.path"], resource.attributes["process.executable.path"])
          - set(attributes["process.owner"], resource.attributes["process.owner"])
          - set(attributes["process.parent_pid"], resource.attributes["process.parent_pid"])
          - set(attributes["process.pid"], resource.attributes["process.pid"])

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: '0.0.0.0:4317'
      http:
        endpoint: '0.0.0.0:4318'

  # METRIC Reciever START
  hostmetrics:
    collection_interval: 30s
    root_path: /hostfs
    scrapers:
      cpu:
        metrics:
          system.cpu.logical.count:
            enabled: true
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
          system.memory.limit:
            enabled: true
      load:
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      network:
      paging:
      processes:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector-cvc02'  # PARAM :: -db1 
          scrape_interval: 30s # default 5s
          static_configs:
            - targets: ['0.0.0.0:8888']
  # METRIC Reciever END

  # LOG Reciever START
  filelog:
    exclude:
    - /var/log/pods/lma_agent-opentelemetry-collector*_*/opentelemetry-collector/*.log
    include:
    - /cvc/log/scanner*.log
    include_file_name: false
    include_file_path: true
    retry_on_failure:
      enabled: true
    start_at: end
  # LOG Reciever END

exporters:
  debug: {}
  # if you need to debug log on pod, use this exporters on piplines
  prometheusremotewrite/otel:
    endpoint: "https://cortex-paas.kr-west1.dev2.samsungsdscloud.com/api/v1/push" # vmware cortex remote write url
    tls:
      insecure: true
    external_labels:
      otel_collector: server
      node_name: 'cvc02'
      node_ip: 'cvc02'
    headers:
      X-Scope-OrgID: 'cvc' # PARAM :: cortex tenant id.
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 24h
    remote_write_queue:
      enabled: true
      queue_size: 10000
    # timeout: 5s
  opensearch/otel:
    # Index Pattern will be : ss4o_{type}-{dataset}-{namespace}
    #dataset: apps
    #namespace: otel
    # If use this, pattern will be {logs_index}
    logs_index: cvc-logs
    http:
      tls:
        insecure_skip_verify: true
      endpoint: https://opensearch-paas.kr-west1.dev2.samsungsdscloud.com
      timeout: 2m
      headers:
        #Content-Type: "application/json"
      auth:
        authenticator: basicauth/otel
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 24h
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 100000
      storage: file_storage/logs
    # timeout: 5s
  awss3/otel:
    s3uploader:
      region: 'kr-west1'
      s3_bucket: 'paas-lma-logs'
      s3_prefix: 'cvc'
      s3_partition: 'hour'
      s3_force_path_style: true
      disable_ssl: true
      endpoint: 'https://object-store.private.kr-west1.dev2.samsungsdscloud.com'
    sending_queue:
      enabled: true
      num_consumers: 1
      queue_size: 100000
      storage: file_storage/logs
  otlp/trace-data-prepper:
    endpoint: data-prepper:21890
    tls:
      insecure: true
      insecure_skip_verify: true
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 24h
    sending_queue:
      enabled: true
      num_consumers: 3
      queue_size: 100000
      storage: file_storage/logs
    timeout: 5s
service:
  extensions:
    - basicauth/otel
    - file_storage/logs
  telemetry:
    metrics:
      address: 0.0.0.0:8888
      level: detailed
  pipelines:
    logs:
      exporters: [opensearch/otel, awss3/otel]
      processors: [resource, transform, memory_limiter, batch]
      receivers: [otlp, filelog]
    metrics:
      exporters: [prometheusremotewrite/otel]
      processors: [resourcedetection/system, resource, transform, memory_limiter, batch]
      receivers: [otlp, hostmetrics, prometheus]
    traces:
      exporters: [otlp/trace-data-prepper]
      processors: [memory_limiter, batch]
      receivers: [otlp]




// docker-compose.yaml
services:
  otel-collector:
    user: "0:0"
    image: paascommon-edcnnztb.scr.private.kr-west1.dev2.samsungsdscloud.com/cvc/opentelemetry-collector-contrib:0.118.0
    volumes:
      - /cvc/otelcol-0.118.0.yaml:/etc/otelcol-contrib/config.yaml
      - /var/lib/otelcol/file_storage/gateway:/var/lib/otelcol/file_storage/gateway
      - /cvc/log:/cvc/log
      - /:/hostfs:ro
    environment:
      - AWS_ACCESS_KEY_ID=2ea2be5027cf41789f42f86de3a2ff8d
      - AWS_SECRET_ACCESS_KEY=3ef2f008-6a20-4af2-8d7c-65d2a39320dc
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    extra_hosts:
      - "cortex-paas.kr-west1.dev2.samsungsdscloud.com:198.18.3.136"
      - "opensearch-paas.kr-west1.dev2.samsungsdscloud.com:198.18.3.136"
      - "object-store.private.kr-west1.dev2.samsungsdscloud.com:198.19.126.41"
  scanner:
    image: paascommon-edcnnztb.scr.private.kr-west1.dev2.samsungsdscloud.com/cvc/cvc-scanner:latest
    ports:
      - 8081:8081
    volumes:
      - /cvc/log:/cvc/log
      - /tmp:/tmp
    environment:
      - CVC_KEYSTONE_ID=cvc-service
      - CVC_KEYSTONE_PW=CVCscanner1!
      - IAM_API_ENDPOINT=https://identity-i.kr-west1.dev2.samsungsdscloud.com/v3/auth/tokens?nocatalog=null
    extra_hosts:
      - "iam-i.kr-west1.dev2.samsungsdscloud.com:198.18.2.52"
      - "identity-i.kr-west1.dev2.samsungsdscloud.com:198.18.2.52"
      - "host.docker.internal:host-gateway"


  

  
