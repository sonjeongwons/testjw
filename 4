TriggerService.java 코드 리팩토링: 메서드 단위 개선 사항 및 코드 품질 향상 내용


---

1. searchTrigger(String functionKey)

변경 사항

1. 중복 코드 제거 및 메서드 추출

트리거 타입별 조회 코드가 중복되므로 getTriggerByType(Trigger trigger) 메서드로 분리하여 재사용성을 높임.



2. Enum 활용

기존 if-else 구조에서 문자열 비교(startsWith("http") 등)를 TriggerTypeEnum을 활용하여 명확하게 변경.




코드 변경 전

if (trigger.getTriggerType().startsWith("http")) {
    triggerHTTP = triggerHTTPRepository.findByTrigger(trigger)
        .orElseThrow(() -> new ResourceNotFoundException("유효한 HTTP 트리거가 존재하지않습니다."));
} else if (trigger.getTriggerType().startsWith("cron")) {
    triggerCron = triggerCronRepository.findByTrigger(trigger)
        .orElseThrow(() -> new ResourceNotFoundException("유효한 Cron 트리거가 존재하지않습니다."));
} else if (trigger.getTriggerType().startsWith("apigateway")) {
    if ("Y".equals(trigger.getTriggerConnectedYn())) {
        triggerAPIGW = triggerAPIGWRepository.findByTrigger(trigger)
            .orElseThrow(() -> new ResourceNotFoundException("유효한 API Gateway 트리거가 존재하지않습니다."));
    }
}

코드 변경 후

public TriggerDTO.Response searchTrigger(String functionKey) {
    Function function = functionRepository.findByFunctionKeyAndDelYn(functionKey, "N")
        .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.FUNCTION_NOT_FOUND));

    Trigger trigger = triggerRepository.findByFunction(function)
        .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.TRIGGER_NOT_FOUND));

    TriggerHTTP triggerHTTP = new TriggerHTTP();
    TriggerCron triggerCron = new TriggerCron();
    TriggerAPIGW triggerAPIGW = new TriggerAPIGW();

    getTriggerByType(trigger, triggerHTTP, triggerCron, triggerAPIGW);

    return trigger.toDto(function, triggerHTTP, triggerCron, triggerAPIGW, false);
}

private void getTriggerByType(Trigger trigger, TriggerHTTP triggerHTTP, TriggerCron triggerCron, TriggerAPIGW triggerAPIGW) {
    switch (TriggerTypeEnum.valueOf(trigger.getTriggerType().toUpperCase())) {
        case HTTP:
            triggerHTTP = triggerHTTPRepository.findByTrigger(trigger)
                .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.TRIGGER_HTTP_NOT_FOUND));
            break;
        case CRON:
            triggerCron = triggerCronRepository.findByTrigger(trigger)
                .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.TRIGGER_CRON_NOT_FOUND));
            break;
        case APIGATEWAY:
            if ("Y".equals(trigger.getTriggerConnectedYn())) {
                triggerAPIGW = triggerAPIGWRepository.findByTrigger(trigger)
                    .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.TRIGGER_APIGW_NOT_FOUND));
            }
            break;
        default:
            throw new RuntimeException(ExceptionMessages.TRIGGER_TYPE_EXCEPTION);
    }
}

개선된 점

중복 코드 제거: getTriggerByType() 메서드로 분리하여 재사용성을 높이고 가독성을 향상시킴.

Enum 활용: TriggerTypeEnum.valueOf(trigger.getTriggerType().toUpperCase())를 사용하여 Magic String을 제거하고 유지보수성을 향상.

예외 메시지 상수화: ExceptionMessages 클래스를 도입하여 예외 메시지를 한 곳에서 관리.



---

2. modifyTrigger(TriggerDTO.Modify reqDto, String functionKey)

변경 사항

1. 중복 코드 제거

트리거 삭제 후 새 트리거 추가하는 로직을 deleteTrigger()와 updateTrigger()로 분리.



2. Guard Clause 적용

불필요한 if-else 블록을 제거하고 조기 반환을 활용하여 코드 가독성을 높임.




코드 변경 전

if (StringUtils.isEmpty(reqDto.getTriggerType())) {
    throw new RuntimeException("트리거 타입을 입력해주세요.");
}

Function function = functionRepository.findByFunctionKeyAndDelYn(functionKey, "N")
    .orElseThrow(() -> new ResourceNotFoundException("유효한 펑션이 존재하지 않습니다."));

this.deleteTrigger(function, false);

TriggerDTO.Response response = this.updateTrigger(reqDto, function);
return response;

코드 변경 후

public TriggerDTO.Response modifyTrigger(TriggerDTO.Modify reqDto, String functionKey) throws IOException, ParseException {
    validateTriggerType(reqDto.getTriggerType());

    Function function = functionRepository.findByFunctionKeyAndDelYn(functionKey, "N")
        .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.FUNCTION_NOT_FOUND));

    deleteTrigger(function, false);

    return updateTrigger(reqDto, function);
}

private void validateTriggerType(String triggerType) {
    if (StringUtils.isEmpty(triggerType)) {
        throw new RuntimeException(ExceptionMessages.TRIGGER_TYPE_REQUIRED);
    }
}

개선된 점

Guard Clause 적용: validateTriggerType()을 활용하여 조기 반환을 적용, 불필요한 코드 중첩을 제거하여 가독성을 개선.

예외 메시지 상수화: ExceptionMessages.TRIGGER_TYPE_REQUIRED를 사용하여 메시지 일관성을 유지.



---

3. connectTrigger(TriggerDTO.Modify reqDto, String functionKey)

변경 사항

1. 중복 코드 제거

validateTriggerConnection() 메서드를 만들어 트리거 연결 전 검증 로직을 분리.



2. Enum 활용

트리거 타입 비교 시 Magic String 대신 Enum을 사용.




코드 변경 전

if ("Y".equals(trigger.getTriggerConnectedYn())) {
    throw new RuntimeException("이미 트리거연결 되어있습니다.");
}

if (!"apigateway".equals(trigger.getTriggerType())) {
    throw new RuntimeException("요청한 트리거 타입과 불일치합니다.");
}

코드 변경 후

public TriggerDTO.Response connectTrigger(TriggerDTO.Modify reqDto, String functionKey) throws IOException, ParseException {
    Function function = functionRepository.findByFunctionKeyAndDelYn(functionKey, "N")
        .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.FUNCTION_NOT_FOUND));

    Trigger trigger = triggerRepository.findByFunction(function)
        .orElseThrow(() -> new ResourceNotFoundException(ExceptionMessages.TRIGGER_NOT_FOUND));

    validateTriggerConnection(trigger);

    TriggerAPIGW triggerAPIGW = triggerAPIGWRepository.save(TriggerAPIGW.register(reqDto));

    trigger.updateTriggerConnectedYn("Y");
    triggerRepository.save(trigger);

    return trigger.toDto(function, new TriggerHTTP(), new TriggerCron(), triggerAPIGW, true);
}

private void validateTriggerConnection(Trigger trigger) {
    if ("Y".equals(trigger.getTriggerConnectedYn())) {
        throw new RuntimeException(ExceptionMessages.TRIGGER_ALREADY_CONNECTED);
    }
    if (!TriggerTypeEnum.APIGATEWAY.name().equals(trigger.getTriggerType())) {
        throw new RuntimeException(ExceptionMessages.TRIGGER_TYPE_MISMATCH);
    }
}

개선된 점

중복 코드 제거: validateTriggerConnection() 메서드 분리하여 가독성과 유지보수성 향상.

Magic String 제거: "apigateway".equals(trigger.getTriggerType()) → TriggerTypeEnum.APIGATEWAY.name().equals(trigger.getTriggerType())로 변경.



---

총괄 개선 요약

이러한 개선을 통해 코드가 더 짧고 명확하며 유지보수하기 쉬운 구조가 되었다.

