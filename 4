코드 리뷰 및 피드백 (티키타카 스타일)
1. setFunctionContent() 메서드 분리 👍
💬 리뷰어 (리뷰어)

"프로님! setFunctionContent()를 별도 메서드로 뺀 거 너무 좋아요! 🎉
기존 if 문을 메서드로 분리하면서 registerFunction()의 가독성이 훨씬 좋아졌어요.
작은 함수로 나누면 유지보수도 편해지고, 테스트도 쉬워지죠!

근데 한 가지 더 개선하면 어떨까 싶은 게, 현재 generateBaseCode()가 내부적으로 Optional이나 try-catch를 활용하지 않고 orElseThrow()만 사용하네요.
만약 코드가 존재하지 않는 경우, ResourceNotFoundException이 발생하는데, 이 부분을 로그를 먼저 남긴 후 예외 처리하는 게 어떨까요?"

📝 PR 작성자 (프로님)

"오! 좋은 포인트네요! 예외가 발생할 때 원인을 로그로 남기는 습관, 저도 익혀야겠어요.
혹시 예시 코드 추천해주실 수 있을까요?"

💬 리뷰어 (리뷰어)

"당연하죠! 아래처럼 로그를 남긴 뒤 예외를 던지는 방식은 어떨까요?

java
복사
편집
private void setFunctionContent(FunctionDTO.Register reqDto) {
    if (!reqDto.getRuntime().startsWith("Java")) {
        try {
            reqDto.setContent(generateBaseCode(reqDto));
        } catch (ResourceNotFoundException e) {
            log.error("기본 코드 생성 실패! runtime: {}, version: {}, codeName: {}", 
                      reqDto.getRuntime(), reqDto.getVersion(), reqDto.getCodeName());
            throw e;
        }
    }
}
이렇게 하면 어떤 요청에서 예외가 발생했는지 로그를 통해 한눈에 확인할 수 있어요! 🚀"

📝 PR 작성자 (프로님)

"와, 진짜 좋은 개선이네요! 이거 반영해서 올릴게요! 감사합니다! 🙌"

2. deleteFunction() 내부 리팩토링 🔥
💬 리뷰어 (리뷰어)

"프로님! deleteFunction()을 보면서 너무 깔끔하게 정리된 게 느껴졌어요.
특히 deleteNamespace(), cleanupFunctionResources(), markFunctionAsDeleted()로 분리한 게 진짜 Good! 👍

근데 한 가지 궁금한 게 있어요! kn.services().inNamespace(function.getName()).withName(function.getName()).delete();
이 부분에서 Knative 서비스가 삭제되지 않았을 때의 예외 처리도 필요할 것 같은데, 예외 발생 시 어떻게 핸들링할지 생각해 보셨나요?"

📝 PR 작성자 (프로님)

"오! 예리한 지적이에요! 😆 지금은 그냥 delete()만 호출하고 있는데, 만약 서비스가 없거나 삭제가 실패하면 어떻게 해야 할지 고민해본 적이 없어요.
혹시 추천해주실 방법이 있을까요?"

💬 리뷰어 (리뷰어)

"네! 일반적으로 Kubernetes API 호출은 실패할 수도 있기 때문에 try-catch로 감싸는 게 좋아요.
예를 들면 이렇게?

java
복사
편집
private void deleteKnativeService(Function function) {
    try {
        boolean deleted = kn.services()
                            .inNamespace(function.getName())
                            .withName(function.getName())
                            .delete();

        if (!deleted) {
            log.warn("Knative 서비스 삭제 실패: {}", function.getName());
        }
    } catch (KubernetesClientException e) {
        log.error("Knative 서비스 삭제 중 오류 발생: {}", e.getMessage());
    }
}
이렇게 하면 삭제가 안 되었을 때 경고 로그를 남기고, 예외가 발생하면 오류 로그를 기록할 수 있어요.
예외를 무조건 던지기보다는 정확한 원인을 남기는 게 운영 측면에서 훨씬 안정적이죠! 🚀"

📝 PR 작성자 (프로님)

"와우, 이거 완전 꿀팁이네요! 😍 제가 놓쳤던 부분인데, 바로 반영할게요.
Kubernetes API 예외 처리도 이렇게 하면 관리가 훨씬 수월해지겠어요!"

3. notifyCloudMonitoring() API 호출 개선 🚀
💬 리뷰어 (리뷰어)

"프로님! notifyCloudMonitoring() API 호출 부분을 보니까 HttpURLConnection을 직접 사용하고 계시네요!
직접 핸들링하는 것도 좋지만, 요즘은 RestTemplate이나 WebClient 같은 Spring의 HTTP 클라이언트를 사용하는 게 더 깔끔할 수도 있을 것 같아요!

혹시 WebClient 써보신 적 있나요?"

📝 PR 작성자 (프로님)

"아, 맞아요! HttpURLConnection이 좀 귀찮긴 했는데, WebClient는 아직 익숙하지 않아서 그냥 기존 방식으로 구현했어요.
WebClient 쓰면 뭐가 더 좋아질까요?"

💬 리뷰어 (리뷰어)

"오, 좋은 질문이에요! WebClient의 장점 몇 가지 알려드릴게요! 🚀

1️⃣ 비동기 방식: HttpURLConnection은 블로킹 방식이라 동기적으로 API를 호출하는데, WebClient를 쓰면 비동기로 처리할 수 있어요.
2️⃣ 코드 간결화: try-catch나 OutputStream 처리 없이 훨씬 짧고 직관적인 코드를 작성할 수 있어요.
3️⃣ 에러 핸들링 강화: 응답을 받았을 때 예외 처리 로직을 훨씬 깔끔하게 구성할 수 있죠!

예시 코드 보여드릴게요! ✨

java
복사
편집
private void notifyCloudMonitoring(Function function) {
    WebClient.create(apimEndpoint)
        .post()
        .uri("/cloud-function/v1/internal/cloud-functions/status")
        .header("Authorization", "Bearer " + apimToken)
        .contentType(MediaType.APPLICATION_JSON)
        .bodyValue(buildFunctionStatusJson(function, function.isReady() ? "Ready" : "Not Ready"))
        .retrieve()
        .bodyToMono(Void.class)
        .doOnSuccess(response -> log.info("SCP 함수 상태 갱신 성공"))
        .doOnError(error -> log.error("SCP 함수 상태 갱신 실패: {}", error.getMessage()))
        .subscribe();
}
이렇게 하면 try-catch 없이도 비동기로 API 호출을 깔끔하게 관리할 수 있어요!"

📝 PR 작성자 (프로님)

"와, WebClient 코드가 엄청 간결하네요! 😲 예외 처리까지 자연스럽게 되고…
요즘 비동기 방식으로 HTTP 호출하는 게 트렌드라고 들었는데, 이참에 적용해봐야겠어요! 🚀
코드 반영해서 리뷰 다시 요청드릴게요! 감사합니다!"

마무리 🌟
"프로님! 전체적으로 코드가 SOLID 원칙을 잘 따르고, 의미 있는 네이밍과 책임 분리가 잘 되어 있어요!
정말 좋은 PR이고, 몇 가지 예외 처리 및 최신 트렌드 적용하면 더욱 완벽해질 것 같아요!

특히 setFunctionContent(), deleteFunction(), notifyCloudMonitoring() 부분을 리팩토링하면 가독성 향상 & 유지보수 용이성이 대폭 개선될 것 같아요!
반영하시면 다시 한번 리뷰 요청 주세요! 저도 공부가 많이 되네요! 🚀🔥"

이런 식으로 코드 품질 개선, 최신 기술 적용, 예외 처리 강화 등을 논의하는 티키타카 리뷰가 가능해요!
이제 PR 리뷰 요청하고 팀원들과 코드 품질을 한 단계 더 끌어올려 보세요! 🚀🔥
