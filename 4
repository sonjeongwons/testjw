$ git diff develop..refactoring-function-cloudpark|cat
diff --git a/src/main/java/com/scf/manager/mvc/api/FunctionApiController.java b/src/main/java/com/scf/manager/mvc/api/FunctionApiController.java
index 59797b9..0781e87 100644
--- a/src/main/java/com/scf/manager/mvc/api/FunctionApiController.java
+++ b/src/main/java/com/scf/manager/mvc/api/FunctionApiController.java
@@ -142,7 +142,7 @@ public class FunctionApiController {
     @PostMapping("presigned-url")
     @Operation(summary = "임시 다운로드 URL 발급용 API", description = "S3에서 임시 다운로드 URL을 발급받는다.")
     public ResponseEntity<String> getPresignedUrl(@Valid @RequestBody DownloadDTO reqDto) throws IOException {
-        String url = functionService.getPresignedUrl(reqDto);
+        String url = functionService.generatePresignedUrl(reqDto);
         return ResponseEntity.status(HttpStatus.CREATED).body(url);
     }

diff --git a/src/main/java/com/scf/manager/mvc/service/FunctionService.java b/src/main/java/com/scf/manager/mvc/service/FunctionService.java
index 5f71dcc..abeeb73 100644
--- a/src/main/java/com/scf/manager/mvc/service/FunctionService.java
+++ b/src/main/java/com/scf/manager/mvc/service/FunctionService.java
@@ -48,6 +48,7 @@ import java.io.OutputStream;
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.text.ParseException;
@@ -93,6 +94,8 @@ public class FunctionService {
     private final SourceFileRepository sourceFileRepository;
     private final SourceFileService sourceFileService;

+    private static final Duration PRESIGNED_URL_DURATION = Duration.ofMinutes(1);
+
     @Value("${apim.http.timeout}")
     private int timeOutValue;

@@ -126,12 +129,16 @@ public class FunctionService {
     }

     private void validateFunctionRequest(FunctionDTO.Register reqDto) {
-        List<String> requiredFields = Arrays.asList(reqDto.getFunctionKey(), reqDto.getProjectId(),
-                reqDto.getUserId(), reqDto.getEndPointType(),
-                reqDto.getRuntime());
+        List<String> missingFields = new ArrayList<>();
+
+        if (StringUtils.isEmpty(reqDto.getFunctionKey())) missingFields.add("Function Key");
+        if (StringUtils.isEmpty(reqDto.getProjectId())) missingFields.add("Project ID");
+        if (StringUtils.isEmpty(reqDto.getUserId())) missingFields.add("User ID");
+        if (StringUtils.isEmpty(reqDto.getEndPointType())) missingFields.add("Endpoint Type");
+        if (StringUtils.isEmpty(reqDto.getRuntime())) missingFields.add("Runtime");

-        if (requiredFields.stream().anyMatch(StringUtils::isEmpty)) {
-            throw new RuntimeException("필수 입력값을 확인해주세요.");
+        if (!missingFields.isEmpty()) {
+            throw new IllegalArgumentException("필수 입력값이 누락되었습니다: " + String.join(", ", missingFields));
         }
     }

@@ -341,8 +348,8 @@ public class FunctionService {
         Function function = functionRepository.findByFunctionKey(functionKey)
                 .orElseThrow(() -> new ResourceNotFoundException("존재하지 않는 펑션입니다."));

-        if (function.isReady() || function.isDeploying()) {
-            kn.services().inNamespace(function.getName()).withName(function.getName()).delete();
+        if (canBeDeleted(function)) {
+            deleteKnativeService(function);
             istioCallService.deleteIstioPolicy(function.getName());
             deleteNamespace(function);
             cleanupFunctionResources(function);
@@ -351,6 +358,15 @@ public class FunctionService {
         markFunctionAsDeleted(function);
     }

+    private void deleteKnativeService(Function function) {
+        kn.services().inNamespace(function.getName()).withName(function.getName()).delete();
+        log.info("Deleted Knative service for function: {}", function.getName());
+    }
+
+    private boolean canBeDeleted(Function function) {
+        return function.isReady() || function.isDeploying();
+    }
+

     private void cleanupFunctionResources(Function function) {
         List<AllowIp> AllowIps = allowIpRepository.findByFunction(function);
@@ -415,6 +431,7 @@ public class FunctionService {
         return output;
     }

+
     public FunctionDTO.DuplicateResponse checkFunctionNameDuplicate(FunctionDTO.Search reqDto) {
         boolean isExist = functionRepository.existsByDisplayNameAndProjectIdAndDelYn(reqDto.getDisplayName(), reqDto.getProjectId(), "N");

@@ -444,17 +461,6 @@ public class FunctionService {
         }
     }

-    public void deleteUserNamespace(Function function) {
-        try (KubernetesClient client = new DefaultKubernetesClient()) {
-            // 사용자 네임스페이스 삭제
-            client.namespaces().withName(function.getName()).delete();
-            log.info("사용자 네임스페이스 삭제 완료.");
-        } catch (KubernetesClientException e) {
-            log.error("사용자 네임스페이스 삭제오류 발생: " + e.getMessage());
-            e.printStackTrace();
-        }
-    }
-
     private List<FunctionEnvironmentDTO.Register> getDefaultEnvironmentDTO(String functionName, String region, String runtime) {
         List<UrlDTO> urlDTOs = UrlUtil.generateUrl(functionName, region,"none");

@@ -478,33 +484,30 @@ public class FunctionService {


     @Transactional
-    public String getPresignedUrl(DownloadDTO reqDto) throws IOException {
-        try (S3Presigner presigner = S3Presigner.builder()
-                .serviceConfiguration(S3Configuration.builder()
-                        .pathStyleAccessEnabled(true) // 경로 스타일 구문을 사용 강제 (https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Configuration.html)
-                        .build())
-                .region(Region.of("ALL")) // SCP Object Storage의 리전은 Endpoint URL에서 설정
-                .endpointOverride(URI.create(reqDto.getEndpointUrl())) // 사용자 지정 S3 엔드포인트 URL로 변경
-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(reqDto.getAccessKey(), reqDto.getSecretKey())))
-                .build()) {
-            GetObjectRequest getObjectRequest = GetObjectRequest.builder()
-                    .bucket(reqDto.getBucketName())
-                    .key(reqDto.getObjectKey())
-                    .build();
-
-            GetObjectPresignRequest getObjectPresignRequest = GetObjectPresignRequest.builder()
-                    .signatureDuration(Duration.ofMinutes(1)) // 유효시간 1분
-                    .getObjectRequest(getObjectRequest)
-                    .build();
-
-            PresignedGetObjectRequest presignedGetObjectRequest = presigner.presignGetObject(getObjectPresignRequest);
-            String theUrl = presignedGetObjectRequest.url().toString();
-            log.info("Presigned URL: " + theUrl);
-
-            return theUrl;
+    public String generatePresignedUrl(DownloadDTO reqDto) throws IOException {
+        try (S3Presigner presigner = createS3Presigner(reqDto)) {
+            return createPresignedUrl(presigner, reqDto);
         }
     }

+    private S3Presigner createS3Presigner(DownloadDTO reqDto) {
+        return S3Presigner.builder()
+                .serviceConfiguration(S3Configuration.builder().pathStyleAccessEnabled(true).build())
+                .region(Region.of("ALL"))
+                .endpointOverride(URI.create(reqDto.getEndpointUrl()))
+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(reqDto.getAccessKey(), reqDto.getSecretKey())))
+                .build();
+    }
+
+    private String createPresignedUrl(S3Presigner presigner, DownloadDTO reqDto) {
+        GetObjectPresignRequest presignRequest = GetObjectPresignRequest.builder()
+                .signatureDuration(PRESIGNED_URL_DURATION)
+                .getObjectRequest(GetObjectRequest.builder().bucket(reqDto.getBucketName()).key(reqDto.getObjectKey()).build())
+                .build();
+
+        return presigner.presignGetObject(presignRequest).url().toString();
+    }
+
     public void downloadFile(DownloadDTO reqDto) {
         // AWS S3 클라이언트 생성
         S3Client s3Client = S3Client.builder()
@@ -590,15 +593,21 @@ public class FunctionService {

     // 함수 상태 정보 알림에 대한 동작 처리를 수행하는 서비스
     @Transactional
-    public FunctionDTO.Response updateFunctionStatus(FunctionDTO.Modify functionDtos, String name) throws IOException {
-        Function function = functionRepository.findByName(name)
-                .orElseThrow(() -> new ResourceNotFoundException("존재하지 않는 펑션입니다."));
+    public FunctionDTO.Response updateFunctionStatus(FunctionDTO.Modify functionDtos, String functionName) throws IOException {
+        Function function = getFunctionByName(functionName);
+        updateFunctionStatusAndNotify(function, functionDtos.getFunctionStatus());
+        return function.toDto();
+    }

-        function.setFunctionStatus(TypeEnums.FunctionStatus.valueOf(functionDtos.getFunctionStatus()));
-        functionRepository.save(function);
+    private Function getFunctionByName(String functionName) {
+        return functionRepository.findByName(functionName)
+                .orElseThrow(() -> new ResourceNotFoundException("존재하지 않는 함수: " + functionName));
+    }

+    private void updateFunctionStatusAndNotify(Function function, String newStatus) throws IOException {
+        function.setFunctionStatus(TypeEnums.FunctionStatus.valueOf(newStatus));
+        functionRepository.save(function);
         notifyCloudMonitoring(function);
-        return function.toDto();
     }

     private void notifyCloudMonitoring(Function function) throws IOException {
@@ -613,11 +622,11 @@ public class FunctionService {
         connection.setDoOutput(true);

         try (OutputStream os = connection.getOutputStream()) {
-            os.write(requestBody.getBytes("utf-8"));
+            os.write(requestBody.getBytes(StandardCharsets.UTF_8));
         }

         if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
-            log.warn("SCP 함수 상태 갱신 API 호출 실패");
+            log.warn("SCP 함수 상태 갱신 API 호출 실패: 응답 코드 {}", connection.getResponseCode());
         }
     }


