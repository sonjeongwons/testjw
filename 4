		if(!V3Scanner.setConfPropertiesPath("V3Scanner.properties"))	// 예제는 예제프로그램과 동일한 디렉토리에 설정파일이 있는 경우다.
		{
			System.out.println("configuration properties failed... using default properties - " + V3Scanner.getConfPropertiesPath() + ".");
		}


//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.ahnlab.v3engine;

import com.ahnlab.tsenginesuite.ObjectPool;
import com.ahnlab.tsenginesuite.ScanClient;
import com.ahnlab.tsenginesuite.ServerSelector;
import com.ahnlab.tsenginesuite.TSProperties;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;

public class V3Scanner {
    static final String SCANNER_DUMMY_ID = "/scanner/dummy";
    static final String SCANNER_BYPASS_ID = "/scanner/bypass";
    static final String SCANNER_DIRECT_ID = "/scanner/direct";
    static final String SCANNER_REAL_CLIENT = "/usr/local/v3engine/v3daemon/v3scan_client";
    static final String ENC_ASCII_TYPE = "ISO-8859-1";
    static String s_av_config_file = "V3Scanner.properties";
    static long s_config_last_modified = 0L;
    static String s_prop_enc = "EUC-KR";
    static String s_serv_enc = "UTF-8";
    static String s_use_net = "no";
    static String s_av_scanner = "/scanner/bypass";
    static String s_av_server_ip = "127.0.0.1";
    static String s_av_server_port = "3003";
    static String s_av_connect_retry = "2";
    static String s_av_aliveTime = "30";
    static int s_av_loglevel = 1;
    static int s_av_exceptionlevel = 1;
    static String s_av_logfile = null;
    static int s_av_default_ret = 0;
    static String s_av_log_date_format = "yyyy-MM-dd hh:mm:ss";
    static String s_av_uds_path = "";
    static String s_av_expire_option = "error";
    static int s_av_connection_pool_timeout = 5;
    static int s_av_connection_pool_count = 30;
    static String s_av_server_addr = "";
    private static ObjectPool s_scanClientPool = null;
    private static boolean s_randomServerSelect = true;
    private static String s_unset_string = "-111";
    static final int SCANTYPE_LOCAL_FILE = 0;
    static final int SCANTYPE_REMOTE_FILE = 1;
    static final int SCANTYPE_URL = 2;

    public V3Scanner() {
    }

    static void logprintln(int var0, String var1) {
        if (s_av_loglevel >= var0) {
            System.out.println("[" + Thread.currentThread().getName() + "]{LOG" + var0 + "}" + (new Date(System.currentTimeMillis())).toString() + " " + var1);
        }

    }

    static void logPrintStackTrace(int var0, Exception var1) {
        if (s_av_exceptionlevel >= var0) {
            var1.printStackTrace();
        }

    }

    static boolean initFromProperty() {
        boolean var0 = true;
        long var1 = 0L;

        Properties var3;
        try {
            File var4 = new File(s_av_config_file);
            var1 = var4.lastModified();
            if (var1 == s_config_last_modified) {
                logprintln(4, "ahnlab_V3Scanner.initFromProperty() : not modified " + s_av_config_file);
                return true;
            }

            var3 = new Properties();
            FileInputStream var5 = new FileInputStream(var4);
            var3.load(var5);
        } catch (Exception var11) {
            logprintln(1, "ahnlab_V3Scanner.initFromProperty() Failed to open option properties file.");
            logPrintStackTrace(5, var11);
            return false;
        }

        synchronized(V3Scanner.class) {
            try {
                s_av_exceptionlevel = Integer.parseInt(getProp(var3, "exception_level", Integer.toString(s_av_exceptionlevel)));
                s_av_loglevel = Integer.parseInt(getProp(var3, "log_level", Integer.toString(s_av_loglevel)));
                s_av_default_ret = Integer.parseInt(getProp(var3, "initial_return_value", Integer.toString(s_av_default_ret)));
                s_av_connection_pool_timeout = Integer.parseInt(getProp(var3, "connection_pool_timeout", Integer.toString(s_av_connection_pool_timeout)));
                s_av_connection_pool_count = Integer.parseInt(getProp(var3, "connection_pool_count", Integer.toString(s_av_connection_pool_count)));
                s_av_log_date_format = getProp(var3, "log_date_format", s_av_log_date_format);
                s_prop_enc = getProp(var3, "properties_encoding", s_prop_enc);
                s_serv_enc = getProp(var3, "server_encoding", s_serv_enc);
                s_use_net = getProp(var3, "use_network", s_use_net);
                s_av_server_ip = getProp(var3, "server_ip", s_av_server_ip);
                s_av_server_port = getProp(var3, "server_port", s_av_server_port);
                s_av_connect_retry = getProp(var3, "connect_retry", s_av_connect_retry);
                s_av_aliveTime = getProp(var3, "client_alive_time", s_av_aliveTime);
                s_av_uds_path = getProp(var3, "uds_port_path", s_av_uds_path);
                s_av_expire_option = getProp(var3, "expiration_treat", s_av_expire_option);
                s_av_server_addr = getProp(var3, "server_addr", "");
                if (s_av_server_addr.length() == 0) {
                    s_av_server_addr = s_av_server_ip + ":" + s_av_server_port;
                } else if (var3.getProperty("server_ip", "").length() > 0) {
                    s_av_server_addr = s_av_server_ip + ":" + s_av_server_port + ", " + s_av_server_addr;
                }

                String var12 = getProp(var3, "server_select", "random");
                if ("serial".equals(var12)) {
                    s_randomServerSelect = false;
                }

                s_av_scanner = new String(getProp(var3, "scanner", s_av_scanner).getBytes("ISO-8859-1"), s_prop_enc);
            } catch (NumberFormatException var7) {
                logprintln(1, "ahnlab_V3Scanner.initFromProperty() Invalid Integer option value. check option properties file.");
                logPrintStackTrace(5, var7);
                var0 = false;
            } catch (UnsupportedEncodingException var8) {
                logprintln(1, "ahnlab_V3Scanner.initFromProperty() Incorrected encoding character set is used. check exception message.");
                logPrintStackTrace(5, var8);
                var0 = false;
            } catch (Exception var9) {
                logprintln(1, "ahnlab_V3Scanner.initFromProperty() Unknown exception raised.");
                logPrintStackTrace(1, var9);
                var0 = false;
            }

            if (var0) {
                s_config_last_modified = var1;
            }

            return var0;
        }
    }

    public static boolean setConfPropertiesPath(String var0) {
        if (var0 != null) {
            File var1 = new File(var0);
            if (var1.isFile()) {
                s_av_config_file = var0;
                return true;
            }
        }

        return false;
    }

    public static String getConfPropertiesPath() {
        return s_av_config_file;
    }

    public static int scanFile(String var0, Properties var1) {
        return scanFile(var0, 0, var1);
    }

    public static int scanFile(String var0, int var1, Properties var2) {
        return scanFile(var0, var1, (String)null, var2);
    }

    public static int scanFile(String var0, int var1, String var2, Properties var3) {
        int var4 = s_av_default_ret;
        int var5 = s_av_default_ret;
        if (var3 != null) {
            var3.clear();
        }

        if (!initFromProperty()) {
            var4 = -4;
            if (var3 != null) {
                setProp(var3, "V3ScannerVer", "4.0.4.1(build 1092)");
                setProp(var3, "filename", var0);
                setProp(var3, "info", "Failed to parse option properties file.");
            }
        } else {
            if (s_av_scanner.equals("/scanner/bypass")) {
                var5 = 0;
                if (var3 != null) {
                    setProp(var3, "StatusName", "bypass scan configuration");
                }
            } else if (s_av_scanner.equals("/scanner/dummy")) {
                var5 = scanFile_Impl_Dummy(var0, var3);
            } else if (s_av_scanner.equals("/scanner/direct") && var1 >= 0 && var1 <= 4) {
                initObjectPool();
                ScanClient var6 = (ScanClient)s_scanClientPool.acquireObject();
                var6.setEncoding(s_serv_enc);
                var5 = var6.scanFile(var0, var1, var2, var3);
                s_scanClientPool.releaseObject(var6);
            } else if (var1 != 0) {
                var5 = -4;
                if (var3 != null) {
                    if (var1 >= 0 && var1 <= 4) {
                        setProp(var3, "info", "Clean option setting is only allowed for direct scan mode");
                    } else {
                        setProp(var3, "info", "Invalid scan arguments");
                    }
                }
            } else {
                var5 = scanFile_Impl_Real(var0, var3, var2, 0);
            }

            if (var5 == -11 && s_av_expire_option.trim().compareTo("bypass") == 0) {
                var5 = 0;
            }

            if (var3 != null) {
                setProp(var3, "V3ScannerVer", "4.0.4.1(build 1092)");
                setProp(var3, "filename", var0);
                if (getProp(var3, "info", s_unset_string).equalsIgnoreCase(s_unset_string)) {
                    setProp(var3, "info", V3Const.convertInfo2StringNative(var5));
                }

                setProp(var3, "errorno", (new Integer(var5)).toString());
            }

            var4 = var5;
            logprintln(4, "ahnlab_V3Scanner.scanFile() " + var0 + "( result = " + var5 + ", info_code = " + var5 + ")");
        }

        return var4;
    }

    public static int remoteScanFile(String var0, Properties var1) {
        return remoteScanFile(var0, 0, (String)null, var1);
    }

    public static int remoteScanFile(String var0, int var1, Properties var2) {
        return remoteScanFile(var0, var1, (String)null, var2);
    }

    public static int remoteScanFile(String var0, int var1, String var2, Properties var3) {
        int var4 = s_av_default_ret;
        int var5 = s_av_default_ret;
        if (var3 != null) {
            var3.clear();
        }

        if (!initFromProperty()) {
            var4 = -4;
            if (var3 != null) {
                setProp(var3, "V3ScannerVer", "4.0.4.1(build 1092)");
                setProp(var3, "filename", var0);
                setProp(var3, "info", "Failed to parse option properties file.");
            }
        } else {
            if (s_av_scanner.equals("/scanner/direct") && var1 >= 0 && var1 <= 4) {
                initObjectPool();
                ScanClient var6 = (ScanClient)s_scanClientPool.acquireObject();
                var6.setEncoding(s_serv_enc);
                var5 = var6.remoteScanFile(var0, var1, var2, var3);
                s_scanClientPool.releaseObject(var6);
            } else if (var1 != 0) {
                var5 = -4;
                if (var3 != null) {
                    if (var1 >= 0 && var1 <= 4) {
                        setProp(var3, "info", "Clean option setting is only allowd for direct scan mode");
                    } else {
                        setProp(var3, "info", "Invalid scan arguments");
                    }
                }
            } else {
                var5 = scanFile_Impl_Real(var0, var3, var2, 1);
            }

            if (var5 == -11 && s_av_expire_option.trim().compareTo("bypass") == 0) {
                var5 = 0;
            }

            if (var3 != null) {
                setProp(var3, "V3ScannerVer", "4.0.4.1(build 1092)");
                setProp(var3, "filename", var0);
                if (getProp(var3, "info", s_unset_string).equalsIgnoreCase(s_unset_string)) {
                    setProp(var3, "info", V3Const.convertInfo2StringNative(var5));
                }

                setProp(var3, "errorno", (new Integer(var5)).toString());
            }

            var4 = var5;
            logprintln(4, "ahnlab_V3Scanner.remoteScanFile() " + var0 + "( result = " + var5 + ", info_code = " + var5 + ")");
        }

        return var4;
    }

    public static MemScanResult remoteScanMemFile(String var0, int var1, byte[] var2, Properties var3) {
        return remoteScanMemFile(var0, 0, var1, var2, (String)null, var3);
    }

    public static MemScanResult remoteScanMemFile(String var0, int var1, int var2, byte[] var3, Properties var4) {
        return remoteScanMemFile(var0, var1, var2, var3, (String)null, var4);
    }

    public static MemScanResult remoteScanMemFile(String var0, int var1, int var2, byte[] var3, String var4, Properties var5) {
        MemScanResult var6 = new MemScanResult();
        var6.scanResult = s_av_default_ret;
        if (var5 != null) {
            var5.clear();
        }

        if (!initFromProperty()) {
            var6.scanResult = -4;
            if (var5 != null) {
                setProp(var5, "V3ScannerVer", "4.0.4.1(build 1092)");
                setProp(var5, "filename", var0);
                setProp(var5, "info", "Failed to parse option properties file.");
            }
        } else {
            if (s_av_scanner.equals("/scanner/direct") && var1 >= 0 && var1 <= 4) {
                initObjectPool();
                ScanClient var8 = (ScanClient)s_scanClientPool.acquireObject();
                var8.setEncoding(s_serv_enc);
                ScanClient.RemoteScanMemFileInfo var7 = var8.remoteScanMemFile(var0, var1, var2, var3, var4, var5);
                var6.scanResult = var7.scanResult;
                var6.fileSize = var7.fileSize;
                var6.memFile = var7.memFile;
                var6.strPath = var7.strPath;
                s_scanClientPool.releaseObject(var8);
            } else {
                var6.scanResult = -4;
                if (var5 != null) {
                    setProp(var5, "info", "Remote scan memory file that need for direct scan mode");
                }
            }

            if (var6.scanResult == -11 && s_av_expire_option.trim().compareTo("bypass") == 0) {
                var6.scanResult = 0;
            }

            if (var5 != null) {
                setProp(var5, "V3ScannerVer", "4.0.4.1(build 1092)");
                setProp(var5, "filename", var0);
                if (getProp(var5, "info", s_unset_string).equalsIgnoreCase(s_unset_string)) {
                    setProp(var5, "info", V3Const.convertInfo2StringNative(var6.scanResult));
                }

                setProp(var5, "errorno", (new Integer(var6.scanResult)).toString());
            }

            logprintln(4, "ahnlab_V3Scanner.remoteScanMemFile() " + var0 + ", info_code = " + var6.scanResult + ")");
        }

        return var6;
    }

    public static int scanURL(String var0, String var1, Properties var2) {
        int var3 = s_av_default_ret;
        int var4 = s_av_default_ret;
        if (var2 != null) {
            var2.clear();
        }

        if (!initFromProperty()) {
            var3 = -4;
            if (var2 != null) {
                setProp(var2, "V3ScannerVer", "4.0.4.1(build 1092)");
                setProp(var2, "info", "Failed to parse option properties file.");
            }
        } else {
            if (s_av_scanner.equals("/scanner/direct")) {
                initObjectPool();
                ScanClient var5 = (ScanClient)s_scanClientPool.acquireObject();
                var5.setEncoding(s_serv_enc);
                var4 = var5.scanURL(var0, var1, var2);
                s_scanClientPool.releaseObject(var5);
            } else {
                var4 = scanFile_Impl_Real(var0, var2, var1, 2);
            }

            if (var4 == -11 && s_av_expire_option.trim().compareTo("bypass") == 0) {
                var4 = 0;
            }

            if (var2 != null) {
                setProp(var2, "V3ScannerVer", "4.0.4.1(build 1092)");
                if (getProp(var2, "info", s_unset_string).equalsIgnoreCase(s_unset_string)) {
                    setProp(var2, "info", V3Const.convertInfo2StringNative(var4));
                }

                setProp(var2, "errorno", (new Integer(var4)).toString());
            }

            var3 = var4;
            logprintln(4, "ahnlab_V3Scanner.scanURL() " + var0 + "( result = " + var4 + ", info_code = " + var4 + ")");
        }

        return var3;
    }

    public static int scanFile(String var0) {
        return scanFile(var0, (Properties)null);
    }

    private static int scanFile_Impl_Real(String var0, Properties var1, String var2, int var3) {
        String var4 = var0;
        Properties var5 = var1 == null ? new Properties() : var1;
        int var6 = s_av_default_ret;
        logprintln(1, "[scanFile_Impl_Real] filename = " + var0);

        boolean var23;
        try {
            StringBuffer var7 = new StringBuffer();

            for(int var8 = 0; var8 < var4.length(); ++var8) {
                char var9 = var4.charAt(var8);
                if (var9 != '\n' && var9 != '\r') {
                    var7.append(var9);
                }
            }

            var4 = var7.toString();
        } catch (Exception var22) {
            logprintln(1, "ahnlab_V3Scanner.scanFile_Impl_Real() exception raised - " + var22);
            var23 = true;
            logPrintStackTrace(5, var22);
            setProp(var5, "exception", var22.toString());
        }

        logprintln(4, "[scanFile_impl_Real] after excape line feed: filename = " + var4);

        try {
            var4 = V3Base64Encoder.encodeStr(var4, "UTF-8");
        } catch (UnsupportedEncodingException var20) {
            logprintln(1, "ahnlab_V3Scanner.scanFile_Impl_Real() exception raised in BASE64 Encoding routine - " + var20);
            var23 = true;
            logPrintStackTrace(5, var20);
            setProp(var5, "exception", var20.toString());
        }

        logprintln(4, "[scanFile_impl_Real] after BASE64Encoder: filename = " + var4);

        try {
            ArrayList var26 = new ArrayList();
            var26.add(s_av_scanner);
            var26.add(var4);
            var26.add("-r");
            var26.add(s_av_connect_retry);
            var26.add("-t");
            var26.add(s_av_aliveTime);
            var26.add("-e");
            String var24;
            if ("yes".equals(s_use_net.trim())) {
                var24 = "net";
                var26.add("-a");
                var26.add(s_av_server_ip + ":" + s_av_server_port);
                if (var3 == 1) {
                    var24 = var24 + "/remote";
                    var26.add("-rs");
                }
            } else {
                var24 = "uds";
                var26.add("-u");
                var26.add(s_av_uds_path);
            }

            if (var3 == 2) {
                var24 = var24 + "/url";
                var26.add("--url");
            }

            if (var2 != null) {
                try {
                    String var10 = V3Base64Encoder.encodeStr(var2, "UTF-8");
                    var26.add("-m");
                    var26.add(var10);
                } catch (UnsupportedEncodingException var19) {
                }
            }

            Runtime var27 = Runtime.getRuntime();
            String[] var25 = (String[])((String[])var26.toArray(new String[var26.size()]));
            logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() " + var24 + ": starting exec(" + s_av_scanner + ") ...");
            Process var11 = var27.exec(var25);
            logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() " + var24 + ": finished/exec(" + s_av_scanner + ") ...");
            InputStream var12 = var11.getInputStream();
            logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() InputStream : " + var12);
            ByteArrayOutputStream var13 = new ByteArrayOutputStream();
            StringBuffer var14 = new StringBuffer();
            boolean var15 = false;

            while(true) {
                int var28 = var12.read();
                if (var28 == -1) {
                    var14.append(var13.toString(s_serv_enc));
                    String var16 = var14.toString();
                    logprintln(4, "raw scanned message: " + var13);
                    logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() String : " + var16);
                    logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() waiting for process " + var11);
                    var11.waitFor();

                    try {
                        logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() myprop.load(is) loading...");
                        TSProperties.load(var5, var16);
                        logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() myprop.load(err) loading...");
                        var5.load(var11.getErrorStream());
                        logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() myprop.getProperty(\"scanRet\") loading...");
                        var6 = Integer.parseInt(getProp(var5, "scanRet", "-4"));
                    } catch (Exception var18) {
                        logprintln(1, "ahnlab_V3Scanner.scanFile_Impl_Real() exception raised - " + var18);
                        var6 = -111;
                        logPrintStackTrace(5, var18);
                        setProp(var5, "exception", var18.toString());
                    }

                    logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() destroying process " + var11);
                    var11.destroy();
                    break;
                }

                if (var28 == 10) {
                    var14.append(var13.toString(s_serv_enc));
                    var14.append('\n');
                    var13.reset();
                } else {
                    var13.write(var28);
                    if (var28 == 92) {
                        var13.write(var28);
                    }
                }
            }
        } catch (Exception var21) {
            logprintln(1, "ahnlab_V3Scanner.scanFile_Impl_Real() exception raised - " + var21);
            var6 = -111;
            logPrintStackTrace(5, var21);
            setProp(var5, "exception", var21.toString());
        }

        logprintln(4, "ahnlab_V3Scanner.scanFile_Impl_Real() prop : " + var5);
        return var6;
    }

    static int scanFile_Impl_Dummy(String var0, Properties var1) {
        boolean var2 = true;
        if (var1 != null) {
            setProp(var1, "EngineVersion", "2012.07.01.00");
            setProp(var1, "TSEngineVersion", "2.11.0.3(Build 6789)");
            setProp(var1, "ScanDateTime", "2012/07/01 12:00:00");
        }

        byte var3;
        if (var0.toLowerCase().indexOf("worm") >= 0) {
            var3 = 1;
            if (var1 != null) {
                setProp(var1, "scanRet", "1");
                if (!var0.toLowerCase().endsWith("zip") && !var0.toLowerCase().endsWith("rar") && !var0.toLowerCase().endsWith("tar") && !var0.toLowerCase().endsWith("gz") && !var0.toLowerCase().endsWith("arj") && !var0.toLowerCase().endsWith("ace") && !var0.toLowerCase().endsWith("jar")) {
                    setProp(var1, "FileName", var0);
                    setProp(var1, "SubFileName", var0);
                    setProp(var1, "VirusName", "WORM_Test_File");
                    setProp(var1, "VirusCode", "123456789");
                    setProp(var1, "StatusCode", "800");
                    setProp(var1, "StatusName", "Repariable(The file will be deleted because it is either corrupted or bad-coded)");
                    setProp(var1, "FileName", var0, 0);
                    setProp(var1, "SubFileName", var0, 0);
                    setProp(var1, "VirusName", "WORM_Test_File", 0);
                    setProp(var1, "VirusCode", "123456789", 0);
                    setProp(var1, "StatusCode", "800", 0);
                    setProp(var1, "StatusName", "Repariable(The file will be deleted because it is either corrupted or bad-coded)", 0);
                } else {
                    setProp(var1, "FileName", var0);
                    setProp(var1, "SubFileName", var0 + "\\\\eicar.com");
                    setProp(var1, "VirusName", "WORM_Test_File");
                    setProp(var1, "VirusCode", "123456789");
                    setProp(var1, "StatusCode", "25");
                    setProp(var1, "StatusName", "Repariable(The file is corrupted with a virus and will be processed according to the option settings(25))");
                    setProp(var1, "FileName", var0, 0);
                    setProp(var1, "SubFileName", var0 + "\\\\eicar.com", 0);
                    setProp(var1, "VirusName", "WORM_Test_File", 0);
                    setProp(var1, "VirusCode", "123456789", 0);
                    setProp(var1, "StatusCode", "25", 0);
                    setProp(var1, "StatusName", "Repariable(The file is corrupted with a virus and will be processed according to the option settings(25))", 0);
                    setProp(var1, "FileName", var0, 1);
                    setProp(var1, "SubFileName", var0 + "\\\\virus.exe", 1);
                    setProp(var1, "VirusName", "VIRUS_Test_File", 1);
                    setProp(var1, "VirusCode", "123456780", 1);
                    setProp(var1, "StatusCode", "25", 1);
                    setProp(var1, "StatusName", "Repariable(The file is corrupted with a virus and will be processed according to the option settings(25))", 1);
                }
            }
        } else if (var0.toLowerCase().indexOf("virus") >= 0) {
            var3 = 1;
            if (var1 != null) {
                setProp(var1, "scanRet", "1");
                if (!var0.toLowerCase().endsWith("zip") && !var0.toLowerCase().endsWith("rar") && !var0.toLowerCase().endsWith("tar") && !var0.toLowerCase().endsWith("gz") && !var0.toLowerCase().endsWith("alz") && !var0.toLowerCase().endsWith("lzh") && !var0.toLowerCase().endsWith("7z")) {
                    setProp(var1, "FileName", var0);
                    setProp(var1, "SubFileName", var0);
                    setProp(var1, "VirusName", "VIRUS_Test_File");
                    setProp(var1, "VirusCode", "123456780");
                    setProp(var1, "StatusCode", "0");
                    setProp(var1, "StatusName", "Repariable");
                    setProp(var1, "FileName", var0, 0);
                    setProp(var1, "SubFileName", var0, 0);
                    setProp(var1, "VirusName", "VIRUS_Test_File", 0);
                    setProp(var1, "VirusCode", "123456780", 0);
                    setProp(var1, "StatusCode", "0", 0);
                    setProp(var1, "StatusName", "Repariable", 0);
                } else {
                    setProp(var1, "FileName", var0);
                    setProp(var1, "SubFileName", var0 + "\\\\eicar.com");
                    setProp(var1, "VirusName", "WORM_Test_File");
                    setProp(var1, "VirusCode", "123456789");
                    setProp(var1, "StatusCode", "25");
                    setProp(var1, "StatusName", "Repariable(The file is corrupted with a virus and will be processed according to the option settings(25))");
                    setProp(var1, "FileName", var0, 0);
                    setProp(var1, "SubFileName", var0 + "\\\\eicar.com", 0);
                    setProp(var1, "VirusName", "WORM_Test_File", 0);
                    setProp(var1, "VirusCode", "123456789", 0);
                    setProp(var1, "StatusCode", "25", 0);
                    setProp(var1, "StatusName", "Repariable(The file is corrupted with a virus and will be processed according to the option settings(25))", 0);
                    setProp(var1, "FileName", var0, 1);
                    setProp(var1, "SubFileName", var0 + "\\\\virus.exe", 1);
                    setProp(var1, "VirusName", "VIRUS_Test_File", 1);
                    setProp(var1, "VirusCode", "123456780", 1);
                    setProp(var1, "StatusCode", "25", 1);
                    setProp(var1, "StatusName", "Repariable(The file is corrupted with a virus and will be processed according to the option settings(25))", 1);
                }
            }
        } else if (var0.toLowerCase().indexOf("authorize") >= 0) {
            var3 = -11;
            if (var1 != null) {
                setProp(var1, "scanRet", "-11");
                setProp(var1, "info", "dummy " + V3Const.convertInfo2StringNative(var3));
            }
        } else if (var0.toLowerCase().indexOf("error") >= 0) {
            var3 = -1;
            if (var1 != null) {
                setProp(var1, "scanRet", "-1");
                setProp(var1, "info", "dummy " + V3Const.convertInfo2StringNative(var3));
            }
        } else if (var0.toLowerCase().indexOf("exception") >= 0) {
            var3 = -1;
            if (var1 != null) {
                setProp(var1, "scanRet", "-1");
                setProp(var1, "info", "Exception is raised.");
                setProp(var1, "exception", "dummy exception");
            }
        } else {
            var3 = 0;
            if (var1 != null) {
                setProp(var1, "scanRet", "0");
                setProp(var1, "info", "It's normal file.");
            }
        }

        if (var1 != null) {
            setProp(var1, "errorno", Integer.toString(var3));
        }

        return var3;
    }

    static void setProp(Properties var0, String var1, String var2, int var3) {
        if (var0 != null && var1 != null) {
            if (var3 < 0) {
                logprintln(3, new String("setProp() key = " + var1 + " value = " + var2));
                var0.setProperty(var1, var2);
            } else {
                logprintln(3, new String("setProp() key = " + var1 + var3 + " value = " + var2));
                var0.setProperty(new String(var1 + var3), var2);
            }

        }
    }

    static void setProp(Properties var0, String var1, String var2) {
        setProp(var0, var1, var2, -1);
    }

    static String getProp(Properties var0, String var1, String var2) {
        if (var0 != null && var1 != null) {
            logprintln(3, new String("getProp() key = " + var1 + " default value = " + var2));
            return var0.getProperty(var1, var2);
        } else {
            return null;
        }
    }

    static String getProp(Properties var0, String var1) {
        if (var0 != null && var1 != null) {
            logprintln(3, new String("getProp() key = " + var1));
            return var0.getProperty(var1);
        } else {
            return null;
        }
    }

    public static void main(String[] var0) throws Exception {
        for(int var1 = 0; var1 < var0.length; ++var1) {
            String var2 = var0[var1];
            Properties var3 = new Properties();
            int var4 = scanFile(var2, var3);
            System.out.println(" filename : " + var2);
            System.out.println(" return : " + var4);
            System.out.println(var3 + "\n");
        }

    }

    private static void initObjectPool() {
        if (s_scanClientPool == null) {
            synchronized(V3Scanner.class) {
                if (s_scanClientPool == null) {
                    ServerSelector var1 = new ServerSelector(s_av_server_addr, s_randomServerSelect);
                    s_scanClientPool = new ObjectPool(new ScanClient(var1, Integer.parseInt(s_av_aliveTime), Integer.parseInt(s_av_connect_retry), s_serv_enc), s_av_connection_pool_count, s_av_connection_pool_timeout);
                }
            }
        }

    }

    static {
        s_av_config_file = System.getProperty("V3Scanner.properties", s_av_config_file);
    }
}
